insert into py276_sentences values (4539, 1, 'extending/newtypes.html', 'As mentioned in the last chapter, Python allows the writer of an extension module to define new types that can be manipulated from Python code, much like strings and lists in core Python.', 'As mentioned in the last chapter, Python allows the writer of an extension module to define new types that can be manipulated from Python code, much like strings and lists in core Python.');
insert into py276_translations values (6539, 1, 'extending/newtypes.html', 'As mentioned in the last chapter, Python allows the writer of an extension module to define new types that can be manipulated from Python code, much like strings and lists in core Python.', 0, 0);
insert into py276_sentences values (4540, 2, 'extending/newtypes.html', 'This is not hard; ', 'This is not hard; ');
insert into py276_translations values (6540, 2, 'extending/newtypes.html', 'This is not hard; ', 0, 0);
insert into py276_sentences values (4541, 3, 'extending/newtypes.html', 'the code for all extension types follows a pattern, but there are some details that you need to understand before you can get started.', 'the code for all extension types follows a pattern, but there are some details that you need to understand before you can get started.');
insert into py276_translations values (6541, 3, 'extending/newtypes.html', 'the code for all extension types follows a pattern, but there are some details that you need to understand before you can get started.', 0, 0);
insert into py276_sentences values (4542, 4, 'extending/newtypes.html', 'Note', 'Note');
insert into py276_translations values (6542, 4, 'extending/newtypes.html', 'Note', 0, 0);
insert into py276_sentences values (4543, 5, 'extending/newtypes.html', 'The way new types are defined changed dramatically (and for the better) in Python 2.2. ', 'The way new types are defined changed dramatically (and for the better) in Python 2.2. ');
insert into py276_translations values (6543, 5, 'extending/newtypes.html', 'The way new types are defined changed dramatically (and for the better) in Python 2.2. ', 0, 0);
insert into py276_sentences values (4544, 6, 'extending/newtypes.html', 'This document documents how to define new types for Python 2.2 and later. ', 'This document documents how to define new types for Python 2.2 and later. ');
insert into py276_translations values (6544, 6, 'extending/newtypes.html', 'This document documents how to define new types for Python 2.2 and later. ', 0, 0);
insert into py276_sentences values (4545, 7, 'extending/newtypes.html', 'If you need to support older versions of Python, you will need to refer to <a class="reference external" href="http://www.python.org/doc/versions/">older versions of this documentation</a>.', 'If you need to support older versions of Python, you will need to refer to <a class="reference external" href="http://www.python.org/doc/versions/">older versions of this documentation</a>.');
insert into py276_translations values (6545, 7, 'extending/newtypes.html', 'If you need to support older versions of Python, you will need to refer to <a class="reference external" href="http://www.python.org/doc/versions/">older versions of this documentation</a>.', 0, 0);
insert into py276_sentences values (4546, 8, 'extending/newtypes.html', 'The Python runtime sees all Python objects as variables of type <a class="reference internal" href="../c-api/structures.html#PyObject" title="PyObject"><tt class="xref c c-type docutils literal"><span class="pre">PyObject*</span></tt></a>. ', 'The Python runtime sees all Python objects as variables of type <a class="reference internal" href="../c-api/structures.html#PyObject" title="PyObject"><tt class="xref c c-type docutils literal"><span class="pre">PyObject*</span></tt></a>. ');
insert into py276_translations values (6546, 8, 'extending/newtypes.html', 'The Python runtime sees all Python objects as variables of type <a class="reference internal" href="../c-api/structures.html#PyObject" title="PyObject"><tt class="xref c c-type docutils literal"><span class="pre">PyObject*</span></tt></a>. ', 0, 0);
insert into py276_sentences values (4547, 9, 'extending/newtypes.html', 'A <a class="reference internal" href="../c-api/structures.html#PyObject" title="PyObject"><tt class="xref c c-type docutils literal"><span class="pre">PyObject</span></tt></a> is not a very magnificent object - it just contains the refcount and a pointer to the object’s “type object”. ', 'A <a class="reference internal" href="../c-api/structures.html#PyObject" title="PyObject"><tt class="xref c c-type docutils literal"><span class="pre">PyObject</span></tt></a> is not a very magnificent object - it just contains the refcount and a pointer to the object’s “type object”. ');
insert into py276_translations values (6547, 9, 'extending/newtypes.html', 'A <a class="reference internal" href="../c-api/structures.html#PyObject" title="PyObject"><tt class="xref c c-type docutils literal"><span class="pre">PyObject</span></tt></a> is not a very magnificent object - it just contains the refcount and a pointer to the object’s “type object”. ', 0, 0);
insert into py276_sentences values (4548, 10, 'extending/newtypes.html', 'This is where the action is; ', 'This is where the action is; ');
insert into py276_translations values (6548, 10, 'extending/newtypes.html', 'This is where the action is; ', 0, 0);
insert into py276_sentences values (4549, 11, 'extending/newtypes.html', 'the type object determines which (C) functions get called when, for instance, an attribute gets looked up on an object or it is multiplied by another object. ', 'the type object determines which (C) functions get called when, for instance, an attribute gets looked up on an object or it is multiplied by another object. ');
insert into py276_translations values (6549, 11, 'extending/newtypes.html', 'the type object determines which (C) functions get called when, for instance, an attribute gets looked up on an object or it is multiplied by another object. ', 0, 0);
insert into py276_sentences values (4550, 12, 'extending/newtypes.html', 'These C functions are called “type methods”.', 'These C functions are called “type methods”.');
insert into py276_translations values (6550, 12, 'extending/newtypes.html', 'These C functions are called “type methods”.', 0, 0);
insert into py276_sentences values (4551, 13, 'extending/newtypes.html', 'So, if you want to define a new object type, you need to create a new type object.', 'So, if you want to define a new object type, you need to create a new type object.');
insert into py276_translations values (6551, 13, 'extending/newtypes.html', 'So, if you want to define a new object type, you need to create a new type object.', 0, 0);
insert into py276_sentences values (4552, 14, 'extending/newtypes.html', 'This sort of thing can only be explained by example, so here’s a minimal, but complete, module that defines a new type:', 'This sort of thing can only be explained by example, so here’s a minimal, but complete, module that defines a new type:');
insert into py276_translations values (6552, 14, 'extending/newtypes.html', 'This sort of thing can only be explained by example, so here’s a minimal, but complete, module that defines a new type:', 0, 0);
insert into py276_sentences values (4553, 15, 'extending/newtypes.html', 'Now that’s quite a bit to take in at once, but hopefully bits will seem familiar from the last chapter.', 'Now that’s quite a bit to take in at once, but hopefully bits will seem familiar from the last chapter.');
insert into py276_translations values (6553, 15, 'extending/newtypes.html', 'Now that’s quite a bit to take in at once, but hopefully bits will seem familiar from the last chapter.', 0, 0);
insert into py276_sentences values (4554, 16, 'extending/newtypes.html', 'The first bit that will be new is:', 'The first bit that will be new is:');
insert into py276_translations values (6554, 16, 'extending/newtypes.html', 'The first bit that will be new is:', 0, 0);
insert into py276_sentences values (4555, 17, 'extending/newtypes.html', 'This is what a Noddy object will contain—in this case, nothing more than every Python object contains, namely a refcount and a pointer to a type object. ', 'This is what a Noddy object will contain—in this case, nothing more than every Python object contains, namely a refcount and a pointer to a type object. ');
insert into py276_translations values (6555, 17, 'extending/newtypes.html', 'This is what a Noddy object will contain—in this case, nothing more than every Python object contains, namely a refcount and a pointer to a type object. ', 0, 0);
insert into py276_sentences values (4556, 18, 'extending/newtypes.html', 'These are the fields the <tt class="docutils literal"><span class="pre">PyObject_HEAD</span></tt> macro brings in. ', 'These are the fields the <tt class="docutils literal"><span class="pre">PyObject_HEAD</span></tt> macro brings in. ');
insert into py276_translations values (6556, 18, 'extending/newtypes.html', 'These are the fields the <tt class="docutils literal"><span class="pre">PyObject_HEAD</span></tt> macro brings in. ', 0, 0);
insert into py276_sentences values (4557, 19, 'extending/newtypes.html', 'The reason for the macro is to standardize the layout and to enable special debugging fields in debug builds. ', 'The reason for the macro is to standardize the layout and to enable special debugging fields in debug builds. ');
insert into py276_translations values (6557, 19, 'extending/newtypes.html', 'The reason for the macro is to standardize the layout and to enable special debugging fields in debug builds. ', 0, 0);
insert into py276_sentences values (4558, 20, 'extending/newtypes.html', 'Note that there is no semicolon after the <tt class="docutils literal"><span class="pre">PyObject_HEAD</span></tt> macro; ', 'Note that there is no semicolon after the <tt class="docutils literal"><span class="pre">PyObject_HEAD</span></tt> macro; ');
insert into py276_translations values (6558, 20, 'extending/newtypes.html', 'Note that there is no semicolon after the <tt class="docutils literal"><span class="pre">PyObject_HEAD</span></tt> macro; ', 0, 0);
insert into py276_sentences values (4559, 21, 'extending/newtypes.html', 'one is included in the macro definition. ', 'one is included in the macro definition. ');
insert into py276_translations values (6559, 21, 'extending/newtypes.html', 'one is included in the macro definition. ', 0, 0);
insert into py276_sentences values (4560, 22, 'extending/newtypes.html', 'Be wary of adding one by accident; ', 'Be wary of adding one by accident; ');
insert into py276_translations values (6560, 22, 'extending/newtypes.html', 'Be wary of adding one by accident; ', 0, 0);
insert into py276_sentences values (4561, 23, 'extending/newtypes.html', 'it’s easy to do from habit, and your compiler might not complain, but someone else’s probably will! ', 'it’s easy to do from habit, and your compiler might not complain, but someone else’s probably will! ');
insert into py276_translations values (6561, 23, 'extending/newtypes.html', 'it’s easy to do from habit, and your compiler might not complain, but someone else’s probably will! ', 0, 0);
insert into py276_sentences values (4562, 24, 'extending/newtypes.html', '(On Windows, MSVC is known to call this an error and refuse to compile the code.)', '(On Windows, MSVC is known to call this an error and refuse to compile the code.)');
insert into py276_translations values (6562, 24, 'extending/newtypes.html', '(On Windows, MSVC is known to call this an error and refuse to compile the code.)', 0, 0);
insert into py276_sentences values (4563, 25, 'extending/newtypes.html', 'For contrast, let’s take a look at the corresponding definition for standard Python integers:', 'For contrast, let’s take a look at the corresponding definition for standard Python integers:');
insert into py276_translations values (6563, 25, 'extending/newtypes.html', 'For contrast, let’s take a look at the corresponding definition for standard Python integers:', 0, 0);
insert into py276_sentences values (4564, 26, 'extending/newtypes.html', 'Moving on, we come to the crunch — the type object.', 'Moving on, we come to the crunch — the type object.');
insert into py276_translations values (6564, 26, 'extending/newtypes.html', 'Moving on, we come to the crunch — the type object.', 0, 0);
insert into py276_sentences values (4565, 27, 'extending/newtypes.html', 'Now if you go and look up the definition of <a class="reference internal" href="../c-api/type.html#PyTypeObject" title="PyTypeObject"><tt class="xref c c-type docutils literal"><span class="pre">PyTypeObject</span></tt></a> in <tt class="file docutils literal"><span class="pre">object.h</span></tt> you’ll see that it has many more fields that the definition above. ', 'Now if you go and look up the definition of <a class="reference internal" href="../c-api/type.html#PyTypeObject" title="PyTypeObject"><tt class="xref c c-type docutils literal"><span class="pre">PyTypeObject</span></tt></a> in <tt class="file docutils literal"><span class="pre">object.h</span></tt> you’ll see that it has many more fields that the definition above. ');
insert into py276_translations values (6565, 27, 'extending/newtypes.html', 'Now if you go and look up the definition of <a class="reference internal" href="../c-api/type.html#PyTypeObject" title="PyTypeObject"><tt class="xref c c-type docutils literal"><span class="pre">PyTypeObject</span></tt></a> in <tt class="file docutils literal"><span class="pre">object.h</span></tt> you’ll see that it has many more fields that the definition above. ', 0, 0);
insert into py276_sentences values (4566, 28, 'extending/newtypes.html', 'The remaining fields will be filled with zeros by the C compiler, and it’s common practice to not specify them explicitly unless you need them.', 'The remaining fields will be filled with zeros by the C compiler, and it’s common practice to not specify them explicitly unless you need them.');
insert into py276_translations values (6566, 28, 'extending/newtypes.html', 'The remaining fields will be filled with zeros by the C compiler, and it’s common practice to not specify them explicitly unless you need them.', 0, 0);
insert into py276_sentences values (4567, 29, 'extending/newtypes.html', 'This is so important that we’re going to pick the top of it apart still further:', 'This is so important that we’re going to pick the top of it apart still further:');
insert into py276_translations values (6567, 29, 'extending/newtypes.html', 'This is so important that we’re going to pick the top of it apart still further:', 0, 0);
insert into py276_sentences values (4568, 30, 'extending/newtypes.html', 'This line is a bit of a wart; ', 'This line is a bit of a wart; ');
insert into py276_translations values (6568, 30, 'extending/newtypes.html', 'This line is a bit of a wart; ', 0, 0);
insert into py276_sentences values (4569, 31, 'extending/newtypes.html', 'what we’d like to write is:', 'what we’d like to write is:');
insert into py276_translations values (6569, 31, 'extending/newtypes.html', 'what we’d like to write is:', 0, 0);
insert into py276_sentences values (4570, 32, 'extending/newtypes.html', 'as the type of a type object is “type”, but this isn’t strictly conforming C and some compilers complain. ', 'as the type of a type object is “type”, but this isn’t strictly conforming C and some compilers complain. ');
insert into py276_translations values (6570, 32, 'extending/newtypes.html', 'as the type of a type object is “type”, but this isn’t strictly conforming C and some compilers complain. ', 0, 0);
insert into py276_sentences values (4571, 33, 'extending/newtypes.html', 'Fortunately, this member will be filled in for us by <a class="reference internal" href="../c-api/type.html#PyType_Ready" title="PyType_Ready"><tt class="xref c c-func docutils literal"><span class="pre">PyType_Ready()</span></tt></a>.', 'Fortunately, this member will be filled in for us by <a class="reference internal" href="../c-api/type.html#PyType_Ready" title="PyType_Ready"><tt class="xref c c-func docutils literal"><span class="pre">PyType_Ready()</span></tt></a>.');
insert into py276_translations values (6571, 33, 'extending/newtypes.html', 'Fortunately, this member will be filled in for us by <a class="reference internal" href="../c-api/type.html#PyType_Ready" title="PyType_Ready"><tt class="xref c c-func docutils literal"><span class="pre">PyType_Ready()</span></tt></a>.', 0, 0);
insert into py276_sentences values (4572, 34, 'extending/newtypes.html', 'The <tt class="xref py py-attr docutils literal"><span class="pre">ob_size</span></tt> field of the header is not used; ', 'The <tt class="xref py py-attr docutils literal"><span class="pre">ob_size</span></tt> field of the header is not used; ');
insert into py276_translations values (6572, 34, 'extending/newtypes.html', 'The <tt class="xref py py-attr docutils literal"><span class="pre">ob_size</span></tt> field of the header is not used; ', 0, 0);
insert into py276_sentences values (4573, 35, 'extending/newtypes.html', 'its presence in the type structure is a historical artifact that is maintained for binary compatibility with extension modules compiled for older versions of Python. ', 'its presence in the type structure is a historical artifact that is maintained for binary compatibility with extension modules compiled for older versions of Python. ');
insert into py276_translations values (6573, 35, 'extending/newtypes.html', 'its presence in the type structure is a historical artifact that is maintained for binary compatibility with extension modules compiled for older versions of Python. ', 0, 0);
insert into py276_sentences values (4574, 36, 'extending/newtypes.html', 'Always set this field to zero.', 'Always set this field to zero.');
insert into py276_translations values (6574, 36, 'extending/newtypes.html', 'Always set this field to zero.', 0, 0);
insert into py276_sentences values (4575, 37, 'extending/newtypes.html', 'The name of our type. ', 'The name of our type. ');
insert into py276_translations values (6575, 37, 'extending/newtypes.html', 'The name of our type. ', 0, 0);
insert into py276_sentences values (4576, 38, 'extending/newtypes.html', 'This will appear in the default textual representation of our objects and in some error messages, for example:', 'This will appear in the default textual representation of our objects and in some error messages, for example:');
insert into py276_translations values (6576, 38, 'extending/newtypes.html', 'This will appear in the default textual representation of our objects and in some error messages, for example:', 0, 0);
insert into py276_sentences values (4577, 39, 'extending/newtypes.html', 'Note that the name is a dotted name that includes both the module name and the name of the type within the module. ', 'Note that the name is a dotted name that includes both the module name and the name of the type within the module. ');
insert into py276_translations values (6577, 39, 'extending/newtypes.html', 'Note that the name is a dotted name that includes both the module name and the name of the type within the module. ', 0, 0);
insert into py276_sentences values (4578, 40, 'extending/newtypes.html', 'The module in this case is <tt class="xref py py-mod docutils literal"><span class="pre">noddy</span></tt> and the type is <tt class="xref py py-class docutils literal"><span class="pre">Noddy</span></tt>, so we set the type name to <tt class="xref py py-class docutils literal"><span class="pre">noddy.</span></tt>', 'The module in this case is <tt class="xref py py-mod docutils literal"><span class="pre">noddy</span></tt> and the type is <tt class="xref py py-class docutils literal"><span class="pre">Noddy</span></tt>, so we set the type name to <tt class="xref py py-class docutils literal"><span class="pre">noddy.</span></tt>');
insert into py276_translations values (6578, 40, 'extending/newtypes.html', 'The module in this case is <tt class="xref py py-mod docutils literal"><span class="pre">noddy</span></tt> and the type is <tt class="xref py py-class docutils literal"><span class="pre">Noddy</span></tt>, so we set the type name to <tt class="xref py py-class docutils literal"><span class="pre">noddy.</span></tt>', 0, 0);
insert into py276_sentences values (4579, 41, 'extending/newtypes.html', 'Noddy.', 'Noddy.');
insert into py276_translations values (6579, 41, 'extending/newtypes.html', 'Noddy.', 0, 0);
insert into py276_sentences values (4580, 42, 'extending/newtypes.html', 'This is so that Python knows how much memory to allocate when you call <a class="reference internal" href="../c-api/allocation.html#PyObject_New" title="PyObject_New"><tt class="xref c c-func docutils literal"><span class="pre">PyObject_New()</span></tt></a>.', 'This is so that Python knows how much memory to allocate when you call <a class="reference internal" href="../c-api/allocation.html#PyObject_New" title="PyObject_New"><tt class="xref c c-func docutils literal"><span class="pre">PyObject_New()</span></tt></a>.');
insert into py276_translations values (6580, 42, 'extending/newtypes.html', 'This is so that Python knows how much memory to allocate when you call <a class="reference internal" href="../c-api/allocation.html#PyObject_New" title="PyObject_New"><tt class="xref c c-func docutils literal"><span class="pre">PyObject_New()</span></tt></a>.', 0, 0);
insert into py276_sentences values (4581, 43, 'extending/newtypes.html', 'Note', 'Note');
insert into py276_translations values (6581, 43, 'extending/newtypes.html', 'Note', 0, 0);
insert into py276_sentences values (4582, 44, 'extending/newtypes.html', 'If you want your type to be subclassable from Python, and your type has the same <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_basicsize" title="PyTypeObject.tp_basicsize"><tt class="xref c c-member docutils literal"><span class="pre">tp_basicsize</span></tt></a> as its base type, you may have problems with multiple inheritance. ', 'If you want your type to be subclassable from Python, and your type has the same <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_basicsize" title="PyTypeObject.tp_basicsize"><tt class="xref c c-member docutils literal"><span class="pre">tp_basicsize</span></tt></a> as its base type, you may have problems with multiple inheritance. ');
insert into py276_translations values (6582, 44, 'extending/newtypes.html', 'If you want your type to be subclassable from Python, and your type has the same <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_basicsize" title="PyTypeObject.tp_basicsize"><tt class="xref c c-member docutils literal"><span class="pre">tp_basicsize</span></tt></a> as its base type, you may have problems with multiple inheritance. ', 0, 0);
insert into py276_sentences values (4583, 45, 'extending/newtypes.html', 'A Python subclass of your type will have to list your type first in its <a class="reference internal" href="../library/stdtypes.html#class.__bases__" title="class.__bases__"><tt class="xref py py-attr docutils literal"><span class="pre">__bases__</span></tt></a>, or else it will not be able to call your type’s <a class="reference internal" href="../reference/datamodel.html#object.__new__" title="object.__new__"><tt class="xref py py-meth docutils literal"><span class="pre">__new__()</span></tt></a> method without getting an error. ', 'A Python subclass of your type will have to list your type first in its <a class="reference internal" href="../library/stdtypes.html#class.__bases__" title="class.__bases__"><tt class="xref py py-attr docutils literal"><span class="pre">__bases__</span></tt></a>, or else it will not be able to call your type’s <a class="reference internal" href="../reference/datamodel.html#object.__new__" title="object.__new__"><tt class="xref py py-meth docutils literal"><span class="pre">__new__()</span></tt></a> method without getting an error. ');
insert into py276_translations values (6583, 45, 'extending/newtypes.html', 'A Python subclass of your type will have to list your type first in its <a class="reference internal" href="../library/stdtypes.html#class.__bases__" title="class.__bases__"><tt class="xref py py-attr docutils literal"><span class="pre">__bases__</span></tt></a>, or else it will not be able to call your type’s <a class="reference internal" href="../reference/datamodel.html#object.__new__" title="object.__new__"><tt class="xref py py-meth docutils literal"><span class="pre">__new__()</span></tt></a> method without getting an error. ', 0, 0);
insert into py276_sentences values (4584, 46, 'extending/newtypes.html', 'You can avoid this problem by ensuring that your type has a larger value for <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_basicsize" title="PyTypeObject.tp_basicsize"><tt class="xref c c-member docutils literal"><span class="pre">tp_basicsize</span></tt></a> than its base type does. ', 'You can avoid this problem by ensuring that your type has a larger value for <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_basicsize" title="PyTypeObject.tp_basicsize"><tt class="xref c c-member docutils literal"><span class="pre">tp_basicsize</span></tt></a> than its base type does. ');
insert into py276_translations values (6584, 46, 'extending/newtypes.html', 'You can avoid this problem by ensuring that your type has a larger value for <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_basicsize" title="PyTypeObject.tp_basicsize"><tt class="xref c c-member docutils literal"><span class="pre">tp_basicsize</span></tt></a> than its base type does. ', 0, 0);
insert into py276_sentences values (4585, 47, 'extending/newtypes.html', 'Most of the time, this will be true anyway, because either your base type will be <a class="reference internal" href="../library/functions.html#object" title="object"><tt class="xref py py-class docutils literal"><span class="pre">object</span></tt></a>, or else you will be adding data members to your base type, and therefore increasing its size.', 'Most of the time, this will be true anyway, because either your base type will be <a class="reference internal" href="../library/functions.html#object" title="object"><tt class="xref py py-class docutils literal"><span class="pre">object</span></tt></a>, or else you will be adding data members to your base type, and therefore increasing its size.');
insert into py276_translations values (6585, 47, 'extending/newtypes.html', 'Most of the time, this will be true anyway, because either your base type will be <a class="reference internal" href="../library/functions.html#object" title="object"><tt class="xref py py-class docutils literal"><span class="pre">object</span></tt></a>, or else you will be adding data members to your base type, and therefore increasing its size.', 0, 0);
insert into py276_sentences values (4586, 48, 'extending/newtypes.html', 'This has to do with variable length objects like lists and strings. ', 'This has to do with variable length objects like lists and strings. ');
insert into py276_translations values (6586, 48, 'extending/newtypes.html', 'This has to do with variable length objects like lists and strings. ', 0, 0);
insert into py276_sentences values (4587, 49, 'extending/newtypes.html', 'Ignore this for now.', 'Ignore this for now.');
insert into py276_translations values (6587, 49, 'extending/newtypes.html', 'Ignore this for now.', 0, 0);
insert into py276_sentences values (4588, 50, 'extending/newtypes.html', 'Skipping a number of type methods that we don’t provide, we set the class flags to <a class="reference internal" href="../c-api/typeobj.html#Py_TPFLAGS_DEFAULT" title="Py_TPFLAGS_DEFAULT"><tt class="xref py py-const docutils literal"><span class="pre">Py_TPFLAGS_DEFAULT</span></tt></a>.', 'Skipping a number of type methods that we don’t provide, we set the class flags to <a class="reference internal" href="../c-api/typeobj.html#Py_TPFLAGS_DEFAULT" title="Py_TPFLAGS_DEFAULT"><tt class="xref py py-const docutils literal"><span class="pre">Py_TPFLAGS_DEFAULT</span></tt></a>.');
insert into py276_translations values (6588, 50, 'extending/newtypes.html', 'Skipping a number of type methods that we don’t provide, we set the class flags to <a class="reference internal" href="../c-api/typeobj.html#Py_TPFLAGS_DEFAULT" title="Py_TPFLAGS_DEFAULT"><tt class="xref py py-const docutils literal"><span class="pre">Py_TPFLAGS_DEFAULT</span></tt></a>.', 0, 0);
insert into py276_sentences values (4589, 51, 'extending/newtypes.html', 'All types should include this constant in their flags. ', 'All types should include this constant in their flags. ');
insert into py276_translations values (6589, 51, 'extending/newtypes.html', 'All types should include this constant in their flags. ', 0, 0);
insert into py276_sentences values (4590, 52, 'extending/newtypes.html', 'It enables all of the members defined by the current version of Python.', 'It enables all of the members defined by the current version of Python.');
insert into py276_translations values (6590, 52, 'extending/newtypes.html', 'It enables all of the members defined by the current version of Python.', 0, 0);
insert into py276_sentences values (4591, 53, 'extending/newtypes.html', 'We provide a doc string for the type in <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_doc" title="PyTypeObject.tp_doc"><tt class="xref c c-member docutils literal"><span class="pre">tp_doc</span></tt></a>.', 'We provide a doc string for the type in <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_doc" title="PyTypeObject.tp_doc"><tt class="xref c c-member docutils literal"><span class="pre">tp_doc</span></tt></a>.');
insert into py276_translations values (6591, 53, 'extending/newtypes.html', 'We provide a doc string for the type in <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_doc" title="PyTypeObject.tp_doc"><tt class="xref c c-member docutils literal"><span class="pre">tp_doc</span></tt></a>.', 0, 0);
insert into py276_sentences values (4592, 54, 'extending/newtypes.html', 'Now we get into the type methods, the things that make your objects different from the others. ', 'Now we get into the type methods, the things that make your objects different from the others. ');
insert into py276_translations values (6592, 54, 'extending/newtypes.html', 'Now we get into the type methods, the things that make your objects different from the others. ', 0, 0);
insert into py276_sentences values (4593, 55, 'extending/newtypes.html', 'We aren’t going to implement any of these in this version of the module. ', 'We aren’t going to implement any of these in this version of the module. ');
insert into py276_translations values (6593, 55, 'extending/newtypes.html', 'We aren’t going to implement any of these in this version of the module. ', 0, 0);
insert into py276_sentences values (4594, 56, 'extending/newtypes.html', 'We’ll expand this example later to have more interesting behavior.', 'We’ll expand this example later to have more interesting behavior.');
insert into py276_translations values (6594, 56, 'extending/newtypes.html', 'We’ll expand this example later to have more interesting behavior.', 0, 0);
insert into py276_sentences values (4595, 57, 'extending/newtypes.html', 'For now, all we want to be able to do is to create new <tt class="xref py py-class docutils literal"><span class="pre">Noddy</span></tt> objects. ', 'For now, all we want to be able to do is to create new <tt class="xref py py-class docutils literal"><span class="pre">Noddy</span></tt> objects. ');
insert into py276_translations values (6595, 57, 'extending/newtypes.html', 'For now, all we want to be able to do is to create new <tt class="xref py py-class docutils literal"><span class="pre">Noddy</span></tt> objects. ', 0, 0);
insert into py276_sentences values (4596, 58, 'extending/newtypes.html', 'To enable object creation, we have to provide a <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_new" title="PyTypeObject.tp_new"><tt class="xref c c-member docutils literal"><span class="pre">tp_new</span></tt></a> implementation. ', 'To enable object creation, we have to provide a <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_new" title="PyTypeObject.tp_new"><tt class="xref c c-member docutils literal"><span class="pre">tp_new</span></tt></a> implementation. ');
insert into py276_translations values (6596, 58, 'extending/newtypes.html', 'To enable object creation, we have to provide a <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_new" title="PyTypeObject.tp_new"><tt class="xref c c-member docutils literal"><span class="pre">tp_new</span></tt></a> implementation. ', 0, 0);
insert into py276_sentences values (4597, 59, 'extending/newtypes.html', 'In this case, we can just use the default implementation provided by the API function <a class="reference internal" href="../c-api/type.html#PyType_GenericNew" title="PyType_GenericNew"><tt class="xref c c-func docutils literal"><span class="pre">PyType_GenericNew()</span></tt></a>. ', 'In this case, we can just use the default implementation provided by the API function <a class="reference internal" href="../c-api/type.html#PyType_GenericNew" title="PyType_GenericNew"><tt class="xref c c-func docutils literal"><span class="pre">PyType_GenericNew()</span></tt></a>. ');
insert into py276_translations values (6597, 59, 'extending/newtypes.html', 'In this case, we can just use the default implementation provided by the API function <a class="reference internal" href="../c-api/type.html#PyType_GenericNew" title="PyType_GenericNew"><tt class="xref c c-func docutils literal"><span class="pre">PyType_GenericNew()</span></tt></a>. ', 0, 0);
insert into py276_sentences values (4598, 60, 'extending/newtypes.html', 'We’d like to just assign this to the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_new" title="PyTypeObject.tp_new"><tt class="xref c c-member docutils literal"><span class="pre">tp_new</span></tt></a> slot, but we can’t, for portability sake, On some platforms or compilers, we can’t statically initialize a structure member with a function defined in another C module, so, instead, we’ll assign the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_new" title="PyTypeObject.tp_new"><tt class="xref c c-member docutils literal"><span class="pre">tp_new</span></tt></a> slot in the module initialization function just before calling <a class="reference internal" href="../c-api/type.html#PyType_Ready" title="PyType_Ready"><tt class="xref c c-func docutils literal"><span class="pre">PyType_Ready()</span></tt></a>:', 'We’d like to just assign this to the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_new" title="PyTypeObject.tp_new"><tt class="xref c c-member docutils literal"><span class="pre">tp_new</span></tt></a> slot, but we can’t, for portability sake, On some platforms or compilers, we can’t statically initialize a structure member with a function defined in another C module, so, instead, we’ll assign the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_new" title="PyTypeObject.tp_new"><tt class="xref c c-member docutils literal"><span class="pre">tp_new</span></tt></a> slot in the module initialization function just before calling <a class="reference internal" href="../c-api/type.html#PyType_Ready" title="PyType_Ready"><tt class="xref c c-func docutils literal"><span class="pre">PyType_Ready()</span></tt></a>:');
insert into py276_translations values (6598, 60, 'extending/newtypes.html', 'We’d like to just assign this to the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_new" title="PyTypeObject.tp_new"><tt class="xref c c-member docutils literal"><span class="pre">tp_new</span></tt></a> slot, but we can’t, for portability sake, On some platforms or compilers, we can’t statically initialize a structure member with a function defined in another C module, so, instead, we’ll assign the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_new" title="PyTypeObject.tp_new"><tt class="xref c c-member docutils literal"><span class="pre">tp_new</span></tt></a> slot in the module initialization function just before calling <a class="reference internal" href="../c-api/type.html#PyType_Ready" title="PyType_Ready"><tt class="xref c c-func docutils literal"><span class="pre">PyType_Ready()</span></tt></a>:', 0, 0);
insert into py276_sentences values (4599, 61, 'extending/newtypes.html', 'All the other type methods are <em>NULL</em>, so we’ll go over them later — that’s for a later section!', 'All the other type methods are <em>NULL</em>, so we’ll go over them later — that’s for a later section!');
insert into py276_translations values (6599, 61, 'extending/newtypes.html', 'All the other type methods are <em>NULL</em>, so we’ll go over them later — that’s for a later section!', 0, 0);
insert into py276_sentences values (4600, 62, 'extending/newtypes.html', 'Everything else in the file should be familiar, except for some code in <tt class="xref c c-func docutils literal"><span class="pre">initnoddy()</span></tt>:', 'Everything else in the file should be familiar, except for some code in <tt class="xref c c-func docutils literal"><span class="pre">initnoddy()</span></tt>:');
insert into py276_translations values (6600, 62, 'extending/newtypes.html', 'Everything else in the file should be familiar, except for some code in <tt class="xref c c-func docutils literal"><span class="pre">initnoddy()</span></tt>:', 0, 0);
insert into py276_sentences values (4601, 63, 'extending/newtypes.html', 'This initializes the <tt class="xref py py-class docutils literal"><span class="pre">Noddy</span></tt> type, filing in a number of members, including <tt class="xref py py-attr docutils literal"><span class="pre">ob_type</span></tt> that we initially set to <em>NULL</em>.', 'This initializes the <tt class="xref py py-class docutils literal"><span class="pre">Noddy</span></tt> type, filing in a number of members, including <tt class="xref py py-attr docutils literal"><span class="pre">ob_type</span></tt> that we initially set to <em>NULL</em>.');
insert into py276_translations values (6601, 63, 'extending/newtypes.html', 'This initializes the <tt class="xref py py-class docutils literal"><span class="pre">Noddy</span></tt> type, filing in a number of members, including <tt class="xref py py-attr docutils literal"><span class="pre">ob_type</span></tt> that we initially set to <em>NULL</em>.', 0, 0);
insert into py276_sentences values (4602, 64, 'extending/newtypes.html', 'This adds the type to the module dictionary. ', 'This adds the type to the module dictionary. ');
insert into py276_translations values (6602, 64, 'extending/newtypes.html', 'This adds the type to the module dictionary. ', 0, 0);
insert into py276_sentences values (4603, 65, 'extending/newtypes.html', 'This allows us to create <tt class="xref py py-class docutils literal"><span class="pre">Noddy</span></tt> instances by calling the <tt class="xref py py-class docutils literal"><span class="pre">Noddy</span></tt> class:', 'This allows us to create <tt class="xref py py-class docutils literal"><span class="pre">Noddy</span></tt> instances by calling the <tt class="xref py py-class docutils literal"><span class="pre">Noddy</span></tt> class:');
insert into py276_translations values (6603, 65, 'extending/newtypes.html', 'This allows us to create <tt class="xref py py-class docutils literal"><span class="pre">Noddy</span></tt> instances by calling the <tt class="xref py py-class docutils literal"><span class="pre">Noddy</span></tt> class:', 0, 0);
insert into py276_sentences values (4604, 66, 'extending/newtypes.html', 'That’s it! ', 'That’s it! ');
insert into py276_translations values (6604, 66, 'extending/newtypes.html', 'That’s it! ', 0, 0);
insert into py276_sentences values (4605, 67, 'extending/newtypes.html', 'All that remains is to build it; ', 'All that remains is to build it; ');
insert into py276_translations values (6605, 67, 'extending/newtypes.html', 'All that remains is to build it; ', 0, 0);
insert into py276_sentences values (4606, 68, 'extending/newtypes.html', 'put the above code in a file called <tt class="file docutils literal"><span class="pre">noddy.c</span></tt> and', 'put the above code in a file called <tt class="file docutils literal"><span class="pre">noddy.c</span></tt> and');
insert into py276_translations values (6606, 68, 'extending/newtypes.html', 'put the above code in a file called <tt class="file docutils literal"><span class="pre">noddy.c</span></tt> and', 0, 0);
insert into py276_sentences values (4607, 69, 'extending/newtypes.html', 'in a file called <tt class="file docutils literal"><span class="pre">setup.py</span></tt>; ', 'in a file called <tt class="file docutils literal"><span class="pre">setup.py</span></tt>; ');
insert into py276_translations values (6607, 69, 'extending/newtypes.html', 'in a file called <tt class="file docutils literal"><span class="pre">setup.py</span></tt>; ', 0, 0);
insert into py276_sentences values (4608, 70, 'extending/newtypes.html', 'then typing', 'then typing');
insert into py276_translations values (6608, 70, 'extending/newtypes.html', 'then typing', 0, 0);
insert into py276_sentences values (4609, 71, 'extending/newtypes.html', 'at a shell should produce a file <tt class="file docutils literal"><span class="pre">noddy.so</span></tt> in a subdirectory; ', 'at a shell should produce a file <tt class="file docutils literal"><span class="pre">noddy.so</span></tt> in a subdirectory; ');
insert into py276_translations values (6609, 71, 'extending/newtypes.html', 'at a shell should produce a file <tt class="file docutils literal"><span class="pre">noddy.so</span></tt> in a subdirectory; ', 0, 0);
insert into py276_sentences values (4610, 72, 'extending/newtypes.html', 'move to that directory and fire up Python — you should be able to <tt class="docutils literal"><span class="pre">import</span> <span class="pre">noddy</span></tt> and play around with Noddy objects.', 'move to that directory and fire up Python — you should be able to <tt class="docutils literal"><span class="pre">import</span> <span class="pre">noddy</span></tt> and play around with Noddy objects.');
insert into py276_translations values (6610, 72, 'extending/newtypes.html', 'move to that directory and fire up Python — you should be able to <tt class="docutils literal"><span class="pre">import</span> <span class="pre">noddy</span></tt> and play around with Noddy objects.', 0, 0);
insert into py276_sentences values (4611, 73, 'extending/newtypes.html', 'That wasn’t so hard, was it?', 'That wasn’t so hard, was it?');
insert into py276_translations values (6611, 73, 'extending/newtypes.html', 'That wasn’t so hard, was it?', 0, 0);
insert into py276_sentences values (4612, 74, 'extending/newtypes.html', 'Of course, the current Noddy type is pretty uninteresting. ', 'Of course, the current Noddy type is pretty uninteresting. ');
insert into py276_translations values (6612, 74, 'extending/newtypes.html', 'Of course, the current Noddy type is pretty uninteresting. ', 0, 0);
insert into py276_sentences values (4613, 75, 'extending/newtypes.html', 'It has no data and doesn’t do anything. ', 'It has no data and doesn’t do anything. ');
insert into py276_translations values (6613, 75, 'extending/newtypes.html', 'It has no data and doesn’t do anything. ', 0, 0);
insert into py276_sentences values (4614, 76, 'extending/newtypes.html', 'It can’t even be subclassed.', 'It can’t even be subclassed.');
insert into py276_translations values (6614, 76, 'extending/newtypes.html', 'It can’t even be subclassed.', 0, 0);
insert into py276_sentences values (4615, 77, 'extending/newtypes.html', 'Let’s expend the basic example to add some data and methods. ', 'Let’s expend the basic example to add some data and methods. ');
insert into py276_translations values (6615, 77, 'extending/newtypes.html', 'Let’s expend the basic example to add some data and methods. ', 0, 0);
insert into py276_sentences values (4616, 78, 'extending/newtypes.html', 'Let’s also make the type usable as a base class. ', 'Let’s also make the type usable as a base class. ');
insert into py276_translations values (6616, 78, 'extending/newtypes.html', 'Let’s also make the type usable as a base class. ', 0, 0);
insert into py276_sentences values (4617, 79, 'extending/newtypes.html', 'We’ll create a new module, <tt class="xref py py-mod docutils literal"><span class="pre">noddy2</span></tt> that adds these capabilities:', 'We’ll create a new module, <tt class="xref py py-mod docutils literal"><span class="pre">noddy2</span></tt> that adds these capabilities:');
insert into py276_translations values (6617, 79, 'extending/newtypes.html', 'We’ll create a new module, <tt class="xref py py-mod docutils literal"><span class="pre">noddy2</span></tt> that adds these capabilities:', 0, 0);
insert into py276_sentences values (4618, 80, 'extending/newtypes.html', 'This version of the module has a number of changes.', 'This version of the module has a number of changes.');
insert into py276_translations values (6618, 80, 'extending/newtypes.html', 'This version of the module has a number of changes.', 0, 0);
insert into py276_sentences values (4619, 81, 'extending/newtypes.html', 'We’ve added an extra include:', 'We’ve added an extra include:');
insert into py276_translations values (6619, 81, 'extending/newtypes.html', 'We’ve added an extra include:', 0, 0);
insert into py276_sentences values (4620, 82, 'extending/newtypes.html', 'This include provides declarations that we use to handle attributes, as described a bit later.', 'This include provides declarations that we use to handle attributes, as described a bit later.');
insert into py276_translations values (6620, 82, 'extending/newtypes.html', 'This include provides declarations that we use to handle attributes, as described a bit later.', 0, 0);
insert into py276_sentences values (4621, 83, 'extending/newtypes.html', 'The name of the <tt class="xref py py-class docutils literal"><span class="pre">Noddy</span></tt> object structure has been shortened to <tt class="xref py py-class docutils literal"><span class="pre">Noddy</span></tt>. ', 'The name of the <tt class="xref py py-class docutils literal"><span class="pre">Noddy</span></tt> object structure has been shortened to <tt class="xref py py-class docutils literal"><span class="pre">Noddy</span></tt>. ');
insert into py276_translations values (6621, 83, 'extending/newtypes.html', 'The name of the <tt class="xref py py-class docutils literal"><span class="pre">Noddy</span></tt> object structure has been shortened to <tt class="xref py py-class docutils literal"><span class="pre">Noddy</span></tt>. ', 0, 0);
insert into py276_sentences values (4622, 84, 'extending/newtypes.html', 'The type object name has been shortened to <tt class="xref py py-class docutils literal"><span class="pre">NoddyType</span></tt>.', 'The type object name has been shortened to <tt class="xref py py-class docutils literal"><span class="pre">NoddyType</span></tt>.');
insert into py276_translations values (6622, 84, 'extending/newtypes.html', 'The type object name has been shortened to <tt class="xref py py-class docutils literal"><span class="pre">NoddyType</span></tt>.', 0, 0);
insert into py276_sentences values (4623, 85, 'extending/newtypes.html', 'The <tt class="xref py py-class docutils literal"><span class="pre">Noddy</span></tt> type now has three data attributes, <em>first</em>, <em>last</em>, and <em>number</em>. ', 'The <tt class="xref py py-class docutils literal"><span class="pre">Noddy</span></tt> type now has three data attributes, <em>first</em>, <em>last</em>, and <em>number</em>. ');
insert into py276_translations values (6623, 85, 'extending/newtypes.html', 'The <tt class="xref py py-class docutils literal"><span class="pre">Noddy</span></tt> type now has three data attributes, <em>first</em>, <em>last</em>, and <em>number</em>. ', 0, 0);
insert into py276_sentences values (4624, 86, 'extending/newtypes.html', 'The <em>first</em> and <em>last</em> variables are Python strings containing first and last names. ', 'The <em>first</em> and <em>last</em> variables are Python strings containing first and last names. ');
insert into py276_translations values (6624, 86, 'extending/newtypes.html', 'The <em>first</em> and <em>last</em> variables are Python strings containing first and last names. ', 0, 0);
insert into py276_sentences values (4625, 87, 'extending/newtypes.html', 'The <em>number</em> attribute is an integer.', 'The <em>number</em> attribute is an integer.');
insert into py276_translations values (6625, 87, 'extending/newtypes.html', 'The <em>number</em> attribute is an integer.', 0, 0);
insert into py276_sentences values (4626, 88, 'extending/newtypes.html', 'The object structure is updated accordingly:', 'The object structure is updated accordingly:');
insert into py276_translations values (6626, 88, 'extending/newtypes.html', 'The object structure is updated accordingly:', 0, 0);
insert into py276_sentences values (4627, 89, 'extending/newtypes.html', 'Because we now have data to manage, we have to be more careful about object allocation and deallocation. ', 'Because we now have data to manage, we have to be more careful about object allocation and deallocation. ');
insert into py276_translations values (6627, 89, 'extending/newtypes.html', 'Because we now have data to manage, we have to be more careful about object allocation and deallocation. ', 0, 0);
insert into py276_sentences values (4628, 90, 'extending/newtypes.html', 'At a minimum, we need a deallocation method:', 'At a minimum, we need a deallocation method:');
insert into py276_translations values (6628, 90, 'extending/newtypes.html', 'At a minimum, we need a deallocation method:', 0, 0);
insert into py276_sentences values (4629, 91, 'extending/newtypes.html', 'which is assigned to the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_dealloc" title="PyTypeObject.tp_dealloc"><tt class="xref c c-member docutils literal"><span class="pre">tp_dealloc</span></tt></a> member:', 'which is assigned to the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_dealloc" title="PyTypeObject.tp_dealloc"><tt class="xref c c-member docutils literal"><span class="pre">tp_dealloc</span></tt></a> member:');
insert into py276_translations values (6629, 91, 'extending/newtypes.html', 'which is assigned to the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_dealloc" title="PyTypeObject.tp_dealloc"><tt class="xref c c-member docutils literal"><span class="pre">tp_dealloc</span></tt></a> member:', 0, 0);
insert into py276_sentences values (4630, 92, 'extending/newtypes.html', 'This method decrements the reference counts of the two Python attributes. ', 'This method decrements the reference counts of the two Python attributes. ');
insert into py276_translations values (6630, 92, 'extending/newtypes.html', 'This method decrements the reference counts of the two Python attributes. ', 0, 0);
insert into py276_sentences values (4631, 93, 'extending/newtypes.html', 'We use <a class="reference internal" href="../c-api/refcounting.html#Py_XDECREF" title="Py_XDECREF"><tt class="xref c c-func docutils literal"><span class="pre">Py_XDECREF()</span></tt></a> here because the <tt class="xref py py-attr docutils literal"><span class="pre">first</span></tt> and <tt class="xref py py-attr docutils literal"><span class="pre">last</span></tt> members could be <em>NULL</em>. ', 'We use <a class="reference internal" href="../c-api/refcounting.html#Py_XDECREF" title="Py_XDECREF"><tt class="xref c c-func docutils literal"><span class="pre">Py_XDECREF()</span></tt></a> here because the <tt class="xref py py-attr docutils literal"><span class="pre">first</span></tt> and <tt class="xref py py-attr docutils literal"><span class="pre">last</span></tt> members could be <em>NULL</em>. ');
insert into py276_translations values (6631, 93, 'extending/newtypes.html', 'We use <a class="reference internal" href="../c-api/refcounting.html#Py_XDECREF" title="Py_XDECREF"><tt class="xref c c-func docutils literal"><span class="pre">Py_XDECREF()</span></tt></a> here because the <tt class="xref py py-attr docutils literal"><span class="pre">first</span></tt> and <tt class="xref py py-attr docutils literal"><span class="pre">last</span></tt> members could be <em>NULL</em>. ', 0, 0);
insert into py276_sentences values (4632, 94, 'extending/newtypes.html', 'It then calls the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_free" title="PyTypeObject.tp_free"><tt class="xref c c-member docutils literal"><span class="pre">tp_free</span></tt></a> member of the object’s type to free the object’s memory. ', 'It then calls the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_free" title="PyTypeObject.tp_free"><tt class="xref c c-member docutils literal"><span class="pre">tp_free</span></tt></a> member of the object’s type to free the object’s memory. ');
insert into py276_translations values (6632, 94, 'extending/newtypes.html', 'It then calls the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_free" title="PyTypeObject.tp_free"><tt class="xref c c-member docutils literal"><span class="pre">tp_free</span></tt></a> member of the object’s type to free the object’s memory. ', 0, 0);
insert into py276_sentences values (4633, 95, 'extending/newtypes.html', 'Note that the object’s type might not be <tt class="xref py py-class docutils literal"><span class="pre">NoddyType</span></tt>, because the object may be an instance of a subclass.', 'Note that the object’s type might not be <tt class="xref py py-class docutils literal"><span class="pre">NoddyType</span></tt>, because the object may be an instance of a subclass.');
insert into py276_translations values (6633, 95, 'extending/newtypes.html', 'Note that the object’s type might not be <tt class="xref py py-class docutils literal"><span class="pre">NoddyType</span></tt>, because the object may be an instance of a subclass.', 0, 0);
insert into py276_sentences values (4634, 96, 'extending/newtypes.html', 'We want to make sure that the first and last names are initialized to empty strings, so we provide a new method:', 'We want to make sure that the first and last names are initialized to empty strings, so we provide a new method:');
insert into py276_translations values (6634, 96, 'extending/newtypes.html', 'We want to make sure that the first and last names are initialized to empty strings, so we provide a new method:', 0, 0);
insert into py276_sentences values (4635, 97, 'extending/newtypes.html', 'and install it in the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_new" title="PyTypeObject.tp_new"><tt class="xref c c-member docutils literal"><span class="pre">tp_new</span></tt></a> member:', 'and install it in the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_new" title="PyTypeObject.tp_new"><tt class="xref c c-member docutils literal"><span class="pre">tp_new</span></tt></a> member:');
insert into py276_translations values (6635, 97, 'extending/newtypes.html', 'and install it in the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_new" title="PyTypeObject.tp_new"><tt class="xref c c-member docutils literal"><span class="pre">tp_new</span></tt></a> member:', 0, 0);
insert into py276_sentences values (4636, 98, 'extending/newtypes.html', 'The new member is responsible for creating (as opposed to initializing) objects of the type. ', 'The new member is responsible for creating (as opposed to initializing) objects of the type. ');
insert into py276_translations values (6636, 98, 'extending/newtypes.html', 'The new member is responsible for creating (as opposed to initializing) objects of the type. ', 0, 0);
insert into py276_sentences values (4637, 99, 'extending/newtypes.html', 'It is exposed in Python as the <a class="reference internal" href="../reference/datamodel.html#object.__new__" title="object.__new__"><tt class="xref py py-meth docutils literal"><span class="pre">__new__()</span></tt></a> method. ', 'It is exposed in Python as the <a class="reference internal" href="../reference/datamodel.html#object.__new__" title="object.__new__"><tt class="xref py py-meth docutils literal"><span class="pre">__new__()</span></tt></a> method. ');
insert into py276_translations values (6637, 99, 'extending/newtypes.html', 'It is exposed in Python as the <a class="reference internal" href="../reference/datamodel.html#object.__new__" title="object.__new__"><tt class="xref py py-meth docutils literal"><span class="pre">__new__()</span></tt></a> method. ', 0, 0);
insert into py276_sentences values (4638, 100, 'extending/newtypes.html', 'See the paper titled “Unifying types and classes in Python” for a detailed discussion of the <a class="reference internal" href="../reference/datamodel.html#object.__new__" title="object.__new__"><tt class="xref py py-meth docutils literal"><span class="pre">__new__()</span></tt></a> method. ', 'See the paper titled “Unifying types and classes in Python” for a detailed discussion of the <a class="reference internal" href="../reference/datamodel.html#object.__new__" title="object.__new__"><tt class="xref py py-meth docutils literal"><span class="pre">__new__()</span></tt></a> method. ');
insert into py276_translations values (6638, 100, 'extending/newtypes.html', 'See the paper titled “Unifying types and classes in Python” for a detailed discussion of the <a class="reference internal" href="../reference/datamodel.html#object.__new__" title="object.__new__"><tt class="xref py py-meth docutils literal"><span class="pre">__new__()</span></tt></a> method. ', 0, 0);
insert into py276_sentences values (4639, 101, 'extending/newtypes.html', 'One reason to implement a new method is to assure the initial values of instance variables. ', 'One reason to implement a new method is to assure the initial values of instance variables. ');
insert into py276_translations values (6639, 101, 'extending/newtypes.html', 'One reason to implement a new method is to assure the initial values of instance variables. ', 0, 0);
insert into py276_sentences values (4640, 102, 'extending/newtypes.html', 'In this case, we use the new method to make sure that the initial values of the members <tt class="xref py py-attr docutils literal"><span class="pre">first</span></tt> and <tt class="xref py py-attr docutils literal"><span class="pre">last</span></tt> are not <em>NULL</em>. ', 'In this case, we use the new method to make sure that the initial values of the members <tt class="xref py py-attr docutils literal"><span class="pre">first</span></tt> and <tt class="xref py py-attr docutils literal"><span class="pre">last</span></tt> are not <em>NULL</em>. ');
insert into py276_translations values (6640, 102, 'extending/newtypes.html', 'In this case, we use the new method to make sure that the initial values of the members <tt class="xref py py-attr docutils literal"><span class="pre">first</span></tt> and <tt class="xref py py-attr docutils literal"><span class="pre">last</span></tt> are not <em>NULL</em>. ', 0, 0);
insert into py276_sentences values (4641, 103, 'extending/newtypes.html', 'If we didn’t care whether the initial values were <em>NULL</em>, we could have used <a class="reference internal" href="../c-api/type.html#PyType_GenericNew" title="PyType_GenericNew"><tt class="xref c c-func docutils literal"><span class="pre">PyType_GenericNew()</span></tt></a> as our new method, as we did before. ', 'If we didn’t care whether the initial values were <em>NULL</em>, we could have used <a class="reference internal" href="../c-api/type.html#PyType_GenericNew" title="PyType_GenericNew"><tt class="xref c c-func docutils literal"><span class="pre">PyType_GenericNew()</span></tt></a> as our new method, as we did before. ');
insert into py276_translations values (6641, 103, 'extending/newtypes.html', 'If we didn’t care whether the initial values were <em>NULL</em>, we could have used <a class="reference internal" href="../c-api/type.html#PyType_GenericNew" title="PyType_GenericNew"><tt class="xref c c-func docutils literal"><span class="pre">PyType_GenericNew()</span></tt></a> as our new method, as we did before. ', 0, 0);
insert into py276_sentences values (4642, 104, 'extending/newtypes.html', '<a class="reference internal" href="../c-api/type.html#PyType_GenericNew" title="PyType_GenericNew"><tt class="xref c c-func docutils literal"><span class="pre">PyType_GenericNew()</span></tt></a> initializes all of the instance variable members to <em>NULL</em>.', '<a class="reference internal" href="../c-api/type.html#PyType_GenericNew" title="PyType_GenericNew"><tt class="xref c c-func docutils literal"><span class="pre">PyType_GenericNew()</span></tt></a> initializes all of the instance variable members to <em>NULL</em>.');
insert into py276_translations values (6642, 104, 'extending/newtypes.html', '<a class="reference internal" href="../c-api/type.html#PyType_GenericNew" title="PyType_GenericNew"><tt class="xref c c-func docutils literal"><span class="pre">PyType_GenericNew()</span></tt></a> initializes all of the instance variable members to <em>NULL</em>.', 0, 0);
insert into py276_sentences values (4643, 105, 'extending/newtypes.html', 'The new method is a static method that is passed the type being instantiated and any arguments passed when the type was called, and that returns the new object created. ', 'The new method is a static method that is passed the type being instantiated and any arguments passed when the type was called, and that returns the new object created. ');
insert into py276_translations values (6643, 105, 'extending/newtypes.html', 'The new method is a static method that is passed the type being instantiated and any arguments passed when the type was called, and that returns the new object created. ', 0, 0);
insert into py276_sentences values (4644, 106, 'extending/newtypes.html', 'New methods always accept positional and keyword arguments, but they often ignore the arguments, leaving the argument handling to initializer methods. ', 'New methods always accept positional and keyword arguments, but they often ignore the arguments, leaving the argument handling to initializer methods. ');
insert into py276_translations values (6644, 106, 'extending/newtypes.html', 'New methods always accept positional and keyword arguments, but they often ignore the arguments, leaving the argument handling to initializer methods. ', 0, 0);
insert into py276_sentences values (4645, 107, 'extending/newtypes.html', 'Note that if the type supports subclassing, the type passed may not be the type being defined. ', 'Note that if the type supports subclassing, the type passed may not be the type being defined. ');
insert into py276_translations values (6645, 107, 'extending/newtypes.html', 'Note that if the type supports subclassing, the type passed may not be the type being defined. ', 0, 0);
insert into py276_sentences values (4646, 108, 'extending/newtypes.html', 'The new method calls the tp_alloc slot to allocate memory. ', 'The new method calls the tp_alloc slot to allocate memory. ');
insert into py276_translations values (6646, 108, 'extending/newtypes.html', 'The new method calls the tp_alloc slot to allocate memory. ', 0, 0);
insert into py276_sentences values (4647, 109, 'extending/newtypes.html', 'We don’t fill the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_alloc" title="PyTypeObject.tp_alloc"><tt class="xref c c-member docutils literal"><span class="pre">tp_alloc</span></tt></a> slot ourselves. ', 'We don’t fill the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_alloc" title="PyTypeObject.tp_alloc"><tt class="xref c c-member docutils literal"><span class="pre">tp_alloc</span></tt></a> slot ourselves. ');
insert into py276_translations values (6647, 109, 'extending/newtypes.html', 'We don’t fill the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_alloc" title="PyTypeObject.tp_alloc"><tt class="xref c c-member docutils literal"><span class="pre">tp_alloc</span></tt></a> slot ourselves. ', 0, 0);
insert into py276_sentences values (4648, 110, 'extending/newtypes.html', 'Rather <a class="reference internal" href="../c-api/type.html#PyType_Ready" title="PyType_Ready"><tt class="xref c c-func docutils literal"><span class="pre">PyType_Ready()</span></tt></a> fills it for us by inheriting it from our base class, which is <a class="reference internal" href="../library/functions.html#object" title="object"><tt class="xref py py-class docutils literal"><span class="pre">object</span></tt></a> by default. ', 'Rather <a class="reference internal" href="../c-api/type.html#PyType_Ready" title="PyType_Ready"><tt class="xref c c-func docutils literal"><span class="pre">PyType_Ready()</span></tt></a> fills it for us by inheriting it from our base class, which is <a class="reference internal" href="../library/functions.html#object" title="object"><tt class="xref py py-class docutils literal"><span class="pre">object</span></tt></a> by default. ');
insert into py276_translations values (6648, 110, 'extending/newtypes.html', 'Rather <a class="reference internal" href="../c-api/type.html#PyType_Ready" title="PyType_Ready"><tt class="xref c c-func docutils literal"><span class="pre">PyType_Ready()</span></tt></a> fills it for us by inheriting it from our base class, which is <a class="reference internal" href="../library/functions.html#object" title="object"><tt class="xref py py-class docutils literal"><span class="pre">object</span></tt></a> by default. ', 0, 0);
insert into py276_sentences values (4649, 111, 'extending/newtypes.html', 'Most types use the default allocation.', 'Most types use the default allocation.');
insert into py276_translations values (6649, 111, 'extending/newtypes.html', 'Most types use the default allocation.', 0, 0);
insert into py276_sentences values (4650, 112, 'extending/newtypes.html', 'Note', 'Note');
insert into py276_translations values (6650, 112, 'extending/newtypes.html', 'Note', 0, 0);
insert into py276_sentences values (4651, 113, 'extending/newtypes.html', 'If you are creating a co-operative <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_new" title="PyTypeObject.tp_new"><tt class="xref c c-member docutils literal"><span class="pre">tp_new</span></tt></a> (one that calls a base type’s <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_new" title="PyTypeObject.tp_new"><tt class="xref c c-member docutils literal"><span class="pre">tp_new</span></tt></a> or <a class="reference internal" href="../reference/datamodel.html#object.__new__" title="object.__new__"><tt class="xref py py-meth docutils literal"><span class="pre">__new__()</span></tt></a>), you must <em>not</em> try to determine what method to call using method resolution order at runtime. ', 'If you are creating a co-operative <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_new" title="PyTypeObject.tp_new"><tt class="xref c c-member docutils literal"><span class="pre">tp_new</span></tt></a> (one that calls a base type’s <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_new" title="PyTypeObject.tp_new"><tt class="xref c c-member docutils literal"><span class="pre">tp_new</span></tt></a> or <a class="reference internal" href="../reference/datamodel.html#object.__new__" title="object.__new__"><tt class="xref py py-meth docutils literal"><span class="pre">__new__()</span></tt></a>), you must <em>not</em> try to determine what method to call using method resolution order at runtime. ');
insert into py276_translations values (6651, 113, 'extending/newtypes.html', 'If you are creating a co-operative <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_new" title="PyTypeObject.tp_new"><tt class="xref c c-member docutils literal"><span class="pre">tp_new</span></tt></a> (one that calls a base type’s <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_new" title="PyTypeObject.tp_new"><tt class="xref c c-member docutils literal"><span class="pre">tp_new</span></tt></a> or <a class="reference internal" href="../reference/datamodel.html#object.__new__" title="object.__new__"><tt class="xref py py-meth docutils literal"><span class="pre">__new__()</span></tt></a>), you must <em>not</em> try to determine what method to call using method resolution order at runtime. ', 0, 0);
insert into py276_sentences values (4652, 114, 'extending/newtypes.html', 'Always statically determine what type you are going to call, and call its <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_new" title="PyTypeObject.tp_new"><tt class="xref c c-member docutils literal"><span class="pre">tp_new</span></tt></a> directly, or via <tt class="docutils literal"><span class="pre">type-&gt;tp_base-&gt;tp_new</span></tt>. ', 'Always statically determine what type you are going to call, and call its <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_new" title="PyTypeObject.tp_new"><tt class="xref c c-member docutils literal"><span class="pre">tp_new</span></tt></a> directly, or via <tt class="docutils literal"><span class="pre">type-&gt;tp_base-&gt;tp_new</span></tt>. ');
insert into py276_translations values (6652, 114, 'extending/newtypes.html', 'Always statically determine what type you are going to call, and call its <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_new" title="PyTypeObject.tp_new"><tt class="xref c c-member docutils literal"><span class="pre">tp_new</span></tt></a> directly, or via <tt class="docutils literal"><span class="pre">type-&gt;tp_base-&gt;tp_new</span></tt>. ', 0, 0);
insert into py276_sentences values (4653, 115, 'extending/newtypes.html', 'If you do not do this, Python subclasses of your type that also inherit from other Python-defined classes may not work correctly. ', 'If you do not do this, Python subclasses of your type that also inherit from other Python-defined classes may not work correctly. ');
insert into py276_translations values (6653, 115, 'extending/newtypes.html', 'If you do not do this, Python subclasses of your type that also inherit from other Python-defined classes may not work correctly. ', 0, 0);
insert into py276_sentences values (4654, 116, 'extending/newtypes.html', '(Specifically, you may not be able to create instances of such subclasses without getting a <a class="reference internal" href="../library/exceptions.html#exceptions.TypeError" title="exceptions.TypeError"><tt class="xref py py-exc docutils literal"><span class="pre">TypeError</span></tt></a>.)', '(Specifically, you may not be able to create instances of such subclasses without getting a <a class="reference internal" href="../library/exceptions.html#exceptions.TypeError" title="exceptions.TypeError"><tt class="xref py py-exc docutils literal"><span class="pre">TypeError</span></tt></a>.)');
insert into py276_translations values (6654, 116, 'extending/newtypes.html', '(Specifically, you may not be able to create instances of such subclasses without getting a <a class="reference internal" href="../library/exceptions.html#exceptions.TypeError" title="exceptions.TypeError"><tt class="xref py py-exc docutils literal"><span class="pre">TypeError</span></tt></a>.)', 0, 0);
insert into py276_sentences values (4655, 117, 'extending/newtypes.html', 'We provide an initialization function:', 'We provide an initialization function:');
insert into py276_translations values (6655, 117, 'extending/newtypes.html', 'We provide an initialization function:', 0, 0);
insert into py276_sentences values (4656, 118, 'extending/newtypes.html', 'by filling the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_init" title="PyTypeObject.tp_init"><tt class="xref c c-member docutils literal"><span class="pre">tp_init</span></tt></a> slot.', 'by filling the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_init" title="PyTypeObject.tp_init"><tt class="xref c c-member docutils literal"><span class="pre">tp_init</span></tt></a> slot.');
insert into py276_translations values (6656, 118, 'extending/newtypes.html', 'by filling the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_init" title="PyTypeObject.tp_init"><tt class="xref c c-member docutils literal"><span class="pre">tp_init</span></tt></a> slot.', 0, 0);
insert into py276_sentences values (4657, 119, 'extending/newtypes.html', 'The <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_init" title="PyTypeObject.tp_init"><tt class="xref c c-member docutils literal"><span class="pre">tp_init</span></tt></a> slot is exposed in Python as the <a class="reference internal" href="../reference/datamodel.html#object.__init__" title="object.__init__"><tt class="xref py py-meth docutils literal"><span class="pre">__init__()</span></tt></a> method. ', 'The <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_init" title="PyTypeObject.tp_init"><tt class="xref c c-member docutils literal"><span class="pre">tp_init</span></tt></a> slot is exposed in Python as the <a class="reference internal" href="../reference/datamodel.html#object.__init__" title="object.__init__"><tt class="xref py py-meth docutils literal"><span class="pre">__init__()</span></tt></a> method. ');
insert into py276_translations values (6657, 119, 'extending/newtypes.html', 'The <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_init" title="PyTypeObject.tp_init"><tt class="xref c c-member docutils literal"><span class="pre">tp_init</span></tt></a> slot is exposed in Python as the <a class="reference internal" href="../reference/datamodel.html#object.__init__" title="object.__init__"><tt class="xref py py-meth docutils literal"><span class="pre">__init__()</span></tt></a> method. ', 0, 0);
insert into py276_sentences values (4658, 120, 'extending/newtypes.html', 'It is used to initialize an object after it’s created. ', 'It is used to initialize an object after it’s created. ');
insert into py276_translations values (6658, 120, 'extending/newtypes.html', 'It is used to initialize an object after it’s created. ', 0, 0);
insert into py276_sentences values (4659, 121, 'extending/newtypes.html', 'Unlike the new method, we can’t guarantee that the initializer is called. ', 'Unlike the new method, we can’t guarantee that the initializer is called. ');
insert into py276_translations values (6659, 121, 'extending/newtypes.html', 'Unlike the new method, we can’t guarantee that the initializer is called. ', 0, 0);
insert into py276_sentences values (4660, 122, 'extending/newtypes.html', 'The initializer isn’t called when unpickling objects and it can be overridden. ', 'The initializer isn’t called when unpickling objects and it can be overridden. ');
insert into py276_translations values (6660, 122, 'extending/newtypes.html', 'The initializer isn’t called when unpickling objects and it can be overridden. ', 0, 0);
insert into py276_sentences values (4661, 123, 'extending/newtypes.html', 'Our initializer accepts arguments to provide initial values for our instance. ', 'Our initializer accepts arguments to provide initial values for our instance. ');
insert into py276_translations values (6661, 123, 'extending/newtypes.html', 'Our initializer accepts arguments to provide initial values for our instance. ', 0, 0);
insert into py276_sentences values (4662, 124, 'extending/newtypes.html', 'Initializers always accept positional and keyword arguments.', 'Initializers always accept positional and keyword arguments.');
insert into py276_translations values (6662, 124, 'extending/newtypes.html', 'Initializers always accept positional and keyword arguments.', 0, 0);
insert into py276_sentences values (4663, 125, 'extending/newtypes.html', 'Initializers can be called multiple times. ', 'Initializers can be called multiple times. ');
insert into py276_translations values (6663, 125, 'extending/newtypes.html', 'Initializers can be called multiple times. ', 0, 0);
insert into py276_sentences values (4664, 126, 'extending/newtypes.html', 'Anyone can call the <a class="reference internal" href="../reference/datamodel.html#object.__init__" title="object.__init__"><tt class="xref py py-meth docutils literal"><span class="pre">__init__()</span></tt></a> method on our objects. ', 'Anyone can call the <a class="reference internal" href="../reference/datamodel.html#object.__init__" title="object.__init__"><tt class="xref py py-meth docutils literal"><span class="pre">__init__()</span></tt></a> method on our objects. ');
insert into py276_translations values (6664, 126, 'extending/newtypes.html', 'Anyone can call the <a class="reference internal" href="../reference/datamodel.html#object.__init__" title="object.__init__"><tt class="xref py py-meth docutils literal"><span class="pre">__init__()</span></tt></a> method on our objects. ', 0, 0);
insert into py276_sentences values (4665, 127, 'extending/newtypes.html', 'For this reason, we have to be extra careful when assigning the new values. ', 'For this reason, we have to be extra careful when assigning the new values. ');
insert into py276_translations values (6665, 127, 'extending/newtypes.html', 'For this reason, we have to be extra careful when assigning the new values. ', 0, 0);
insert into py276_sentences values (4666, 128, 'extending/newtypes.html', 'We might be tempted, for example to assign the <tt class="xref py py-attr docutils literal"><span class="pre">first</span></tt> member like this:', 'We might be tempted, for example to assign the <tt class="xref py py-attr docutils literal"><span class="pre">first</span></tt> member like this:');
insert into py276_translations values (6666, 128, 'extending/newtypes.html', 'We might be tempted, for example to assign the <tt class="xref py py-attr docutils literal"><span class="pre">first</span></tt> member like this:', 0, 0);
insert into py276_sentences values (4667, 129, 'extending/newtypes.html', 'But this would be risky. ', 'But this would be risky. ');
insert into py276_translations values (6667, 129, 'extending/newtypes.html', 'But this would be risky. ', 0, 0);
insert into py276_sentences values (4668, 130, 'extending/newtypes.html', 'Our type doesn’t restrict the type of the <tt class="xref py py-attr docutils literal"><span class="pre">first</span></tt> member, so it could be any kind of object. ', 'Our type doesn’t restrict the type of the <tt class="xref py py-attr docutils literal"><span class="pre">first</span></tt> member, so it could be any kind of object. ');
insert into py276_translations values (6668, 130, 'extending/newtypes.html', 'Our type doesn’t restrict the type of the <tt class="xref py py-attr docutils literal"><span class="pre">first</span></tt> member, so it could be any kind of object. ', 0, 0);
insert into py276_sentences values (4669, 131, 'extending/newtypes.html', 'It could have a destructor that causes code to be executed that tries to access the <tt class="xref py py-attr docutils literal"><span class="pre">first</span></tt> member. ', 'It could have a destructor that causes code to be executed that tries to access the <tt class="xref py py-attr docutils literal"><span class="pre">first</span></tt> member. ');
insert into py276_translations values (6669, 131, 'extending/newtypes.html', 'It could have a destructor that causes code to be executed that tries to access the <tt class="xref py py-attr docutils literal"><span class="pre">first</span></tt> member. ', 0, 0);
insert into py276_sentences values (4670, 132, 'extending/newtypes.html', 'To be paranoid and protect ourselves against this possibility, we almost always reassign members before decrementing their reference counts. ', 'To be paranoid and protect ourselves against this possibility, we almost always reassign members before decrementing their reference counts. ');
insert into py276_translations values (6670, 132, 'extending/newtypes.html', 'To be paranoid and protect ourselves against this possibility, we almost always reassign members before decrementing their reference counts. ', 0, 0);
insert into py276_sentences values (4671, 133, 'extending/newtypes.html', 'When don’t we have to do this?', 'When don’t we have to do this?');
insert into py276_translations values (6671, 133, 'extending/newtypes.html', 'When don’t we have to do this?', 0, 0);
insert into py276_sentences values (4672, 134, 'extending/newtypes.html', 'We want to expose our instance variables as attributes. ', 'We want to expose our instance variables as attributes. ');
insert into py276_translations values (6672, 134, 'extending/newtypes.html', 'We want to expose our instance variables as attributes. ', 0, 0);
insert into py276_sentences values (4673, 135, 'extending/newtypes.html', 'There are a number of ways to do that. ', 'There are a number of ways to do that. ');
insert into py276_translations values (6673, 135, 'extending/newtypes.html', 'There are a number of ways to do that. ', 0, 0);
insert into py276_sentences values (4674, 136, 'extending/newtypes.html', 'The simplest way is to define member definitions:', 'The simplest way is to define member definitions:');
insert into py276_translations values (6674, 136, 'extending/newtypes.html', 'The simplest way is to define member definitions:', 0, 0);
insert into py276_sentences values (4675, 137, 'extending/newtypes.html', 'and put the definitions in the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_members" title="PyTypeObject.tp_members"><tt class="xref c c-member docutils literal"><span class="pre">tp_members</span></tt></a> slot:', 'and put the definitions in the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_members" title="PyTypeObject.tp_members"><tt class="xref c c-member docutils literal"><span class="pre">tp_members</span></tt></a> slot:');
insert into py276_translations values (6675, 137, 'extending/newtypes.html', 'and put the definitions in the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_members" title="PyTypeObject.tp_members"><tt class="xref c c-member docutils literal"><span class="pre">tp_members</span></tt></a> slot:', 0, 0);
insert into py276_sentences values (4676, 138, 'extending/newtypes.html', 'Each member definition has a member name, type, offset, access flags and documentation string. ', 'Each member definition has a member name, type, offset, access flags and documentation string. ');
insert into py276_translations values (6676, 138, 'extending/newtypes.html', 'Each member definition has a member name, type, offset, access flags and documentation string. ', 0, 0);
insert into py276_sentences values (4677, 139, 'extending/newtypes.html', 'See the <a class="reference internal" href="#generic-attribute-management"><em>Generic Attribute Management</em></a> section below for details.', 'See the <a class="reference internal" href="#generic-attribute-management"><em>Generic Attribute Management</em></a> section below for details.');
insert into py276_translations values (6677, 139, 'extending/newtypes.html', 'See the <a class="reference internal" href="#generic-attribute-management"><em>Generic Attribute Management</em></a> section below for details.', 0, 0);
insert into py276_sentences values (4678, 140, 'extending/newtypes.html', 'A disadvantage of this approach is that it doesn’t provide a way to restrict the types of objects that can be assigned to the Python attributes. ', 'A disadvantage of this approach is that it doesn’t provide a way to restrict the types of objects that can be assigned to the Python attributes. ');
insert into py276_translations values (6678, 140, 'extending/newtypes.html', 'A disadvantage of this approach is that it doesn’t provide a way to restrict the types of objects that can be assigned to the Python attributes. ', 0, 0);
insert into py276_sentences values (4679, 141, 'extending/newtypes.html', 'We expect the first and last names to be strings, but any Python objects can be assigned. ', 'We expect the first and last names to be strings, but any Python objects can be assigned. ');
insert into py276_translations values (6679, 141, 'extending/newtypes.html', 'We expect the first and last names to be strings, but any Python objects can be assigned. ', 0, 0);
insert into py276_sentences values (4680, 142, 'extending/newtypes.html', 'Further, the attributes can be deleted, setting the C pointers to <em>NULL</em>. ', 'Further, the attributes can be deleted, setting the C pointers to <em>NULL</em>. ');
insert into py276_translations values (6680, 142, 'extending/newtypes.html', 'Further, the attributes can be deleted, setting the C pointers to <em>NULL</em>. ', 0, 0);
insert into py276_sentences values (4681, 143, 'extending/newtypes.html', 'Even though we can make sure the members are initialized to non-<em>NULL</em> values, the members can be set to <em>NULL</em> if the attributes are deleted.', 'Even though we can make sure the members are initialized to non-<em>NULL</em> values, the members can be set to <em>NULL</em> if the attributes are deleted.');
insert into py276_translations values (6681, 143, 'extending/newtypes.html', 'Even though we can make sure the members are initialized to non-<em>NULL</em> values, the members can be set to <em>NULL</em> if the attributes are deleted.', 0, 0);
insert into py276_sentences values (4682, 144, 'extending/newtypes.html', 'We define a single method, <tt class="xref py py-meth docutils literal"><span class="pre">name()</span></tt>, that outputs the objects name as the concatenation of the first and last names.', 'We define a single method, <tt class="xref py py-meth docutils literal"><span class="pre">name()</span></tt>, that outputs the objects name as the concatenation of the first and last names.');
insert into py276_translations values (6682, 144, 'extending/newtypes.html', 'We define a single method, <tt class="xref py py-meth docutils literal"><span class="pre">name()</span></tt>, that outputs the objects name as the concatenation of the first and last names.', 0, 0);
insert into py276_sentences values (4683, 145, 'extending/newtypes.html', 'The method is implemented as a C function that takes a <tt class="xref py py-class docutils literal"><span class="pre">Noddy</span></tt> (or <tt class="xref py py-class docutils literal"><span class="pre">Noddy</span></tt> subclass) instance as the first argument. ', 'The method is implemented as a C function that takes a <tt class="xref py py-class docutils literal"><span class="pre">Noddy</span></tt> (or <tt class="xref py py-class docutils literal"><span class="pre">Noddy</span></tt> subclass) instance as the first argument. ');
insert into py276_translations values (6683, 145, 'extending/newtypes.html', 'The method is implemented as a C function that takes a <tt class="xref py py-class docutils literal"><span class="pre">Noddy</span></tt> (or <tt class="xref py py-class docutils literal"><span class="pre">Noddy</span></tt> subclass) instance as the first argument. ', 0, 0);
insert into py276_sentences values (4684, 146, 'extending/newtypes.html', 'Methods always take an instance as the first argument. ', 'Methods always take an instance as the first argument. ');
insert into py276_translations values (6684, 146, 'extending/newtypes.html', 'Methods always take an instance as the first argument. ', 0, 0);
insert into py276_sentences values (4685, 147, 'extending/newtypes.html', 'Methods often take positional and keyword arguments as well, but in this cased we don’t take any and don’t need to accept a positional argument tuple or keyword argument dictionary. ', 'Methods often take positional and keyword arguments as well, but in this cased we don’t take any and don’t need to accept a positional argument tuple or keyword argument dictionary. ');
insert into py276_translations values (6685, 147, 'extending/newtypes.html', 'Methods often take positional and keyword arguments as well, but in this cased we don’t take any and don’t need to accept a positional argument tuple or keyword argument dictionary. ', 0, 0);
insert into py276_sentences values (4686, 148, 'extending/newtypes.html', 'This method is equivalent to the Python method:', 'This method is equivalent to the Python method:');
insert into py276_translations values (6686, 148, 'extending/newtypes.html', 'This method is equivalent to the Python method:', 0, 0);
insert into py276_sentences values (4687, 149, 'extending/newtypes.html', 'Note that we have to check for the possibility that our <tt class="xref py py-attr docutils literal"><span class="pre">first</span></tt> and <tt class="xref py py-attr docutils literal"><span class="pre">last</span></tt> members are <em>NULL</em>. ', 'Note that we have to check for the possibility that our <tt class="xref py py-attr docutils literal"><span class="pre">first</span></tt> and <tt class="xref py py-attr docutils literal"><span class="pre">last</span></tt> members are <em>NULL</em>. ');
insert into py276_translations values (6687, 149, 'extending/newtypes.html', 'Note that we have to check for the possibility that our <tt class="xref py py-attr docutils literal"><span class="pre">first</span></tt> and <tt class="xref py py-attr docutils literal"><span class="pre">last</span></tt> members are <em>NULL</em>. ', 0, 0);
insert into py276_sentences values (4688, 150, 'extending/newtypes.html', 'This is because they can be deleted, in which case they are set to <em>NULL</em>. ', 'This is because they can be deleted, in which case they are set to <em>NULL</em>. ');
insert into py276_translations values (6688, 150, 'extending/newtypes.html', 'This is because they can be deleted, in which case they are set to <em>NULL</em>. ', 0, 0);
insert into py276_sentences values (4689, 151, 'extending/newtypes.html', 'It would be better to prevent deletion of these attributes and to restrict the attribute values to be strings. ', 'It would be better to prevent deletion of these attributes and to restrict the attribute values to be strings. ');
insert into py276_translations values (6689, 151, 'extending/newtypes.html', 'It would be better to prevent deletion of these attributes and to restrict the attribute values to be strings. ', 0, 0);
insert into py276_sentences values (4690, 152, 'extending/newtypes.html', 'We’ll see how to do that in the next section.', 'We’ll see how to do that in the next section.');
insert into py276_translations values (6690, 152, 'extending/newtypes.html', 'We’ll see how to do that in the next section.', 0, 0);
insert into py276_sentences values (4691, 153, 'extending/newtypes.html', 'Now that we’ve defined the method, we need to create an array of method definitions:', 'Now that we’ve defined the method, we need to create an array of method definitions:');
insert into py276_translations values (6691, 153, 'extending/newtypes.html', 'Now that we’ve defined the method, we need to create an array of method definitions:', 0, 0);
insert into py276_sentences values (4692, 154, 'extending/newtypes.html', 'and assign them to the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_methods" title="PyTypeObject.tp_methods"><tt class="xref c c-member docutils literal"><span class="pre">tp_methods</span></tt></a> slot:', 'and assign them to the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_methods" title="PyTypeObject.tp_methods"><tt class="xref c c-member docutils literal"><span class="pre">tp_methods</span></tt></a> slot:');
insert into py276_translations values (6692, 154, 'extending/newtypes.html', 'and assign them to the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_methods" title="PyTypeObject.tp_methods"><tt class="xref c c-member docutils literal"><span class="pre">tp_methods</span></tt></a> slot:', 0, 0);
insert into py276_sentences values (4693, 155, 'extending/newtypes.html', 'Note that we used the <a class="reference internal" href="../c-api/structures.html#METH_NOARGS" title="METH_NOARGS"><tt class="xref py py-const docutils literal"><span class="pre">METH_NOARGS</span></tt></a> flag to indicate that the method is passed no arguments.', 'Note that we used the <a class="reference internal" href="../c-api/structures.html#METH_NOARGS" title="METH_NOARGS"><tt class="xref py py-const docutils literal"><span class="pre">METH_NOARGS</span></tt></a> flag to indicate that the method is passed no arguments.');
insert into py276_translations values (6693, 155, 'extending/newtypes.html', 'Note that we used the <a class="reference internal" href="../c-api/structures.html#METH_NOARGS" title="METH_NOARGS"><tt class="xref py py-const docutils literal"><span class="pre">METH_NOARGS</span></tt></a> flag to indicate that the method is passed no arguments.', 0, 0);
insert into py276_sentences values (4694, 156, 'extending/newtypes.html', 'Finally, we’ll make our type usable as a base class. ', 'Finally, we’ll make our type usable as a base class. ');
insert into py276_translations values (6694, 156, 'extending/newtypes.html', 'Finally, we’ll make our type usable as a base class. ', 0, 0);
insert into py276_sentences values (4695, 157, 'extending/newtypes.html', 'We’ve written our methods carefully so far so that they don’t make any assumptions about the type of the object being created or used, so all we need to do is to add the <a class="reference internal" href="../c-api/typeobj.html#Py_TPFLAGS_BASETYPE" title="Py_TPFLAGS_BASETYPE"><tt class="xref py py-const docutils literal"><span class="pre">Py_TPFLAGS_BASETYPE</span></tt></a> to our class flag definition:', 'We’ve written our methods carefully so far so that they don’t make any assumptions about the type of the object being created or used, so all we need to do is to add the <a class="reference internal" href="../c-api/typeobj.html#Py_TPFLAGS_BASETYPE" title="Py_TPFLAGS_BASETYPE"><tt class="xref py py-const docutils literal"><span class="pre">Py_TPFLAGS_BASETYPE</span></tt></a> to our class flag definition:');
insert into py276_translations values (6695, 157, 'extending/newtypes.html', 'We’ve written our methods carefully so far so that they don’t make any assumptions about the type of the object being created or used, so all we need to do is to add the <a class="reference internal" href="../c-api/typeobj.html#Py_TPFLAGS_BASETYPE" title="Py_TPFLAGS_BASETYPE"><tt class="xref py py-const docutils literal"><span class="pre">Py_TPFLAGS_BASETYPE</span></tt></a> to our class flag definition:', 0, 0);
insert into py276_sentences values (4696, 158, 'extending/newtypes.html', 'We rename <tt class="xref c c-func docutils literal"><span class="pre">initnoddy()</span></tt> to <tt class="xref c c-func docutils literal"><span class="pre">initnoddy2()</span></tt> and update the module name passed to <a class="reference internal" href="../c-api/allocation.html#Py_InitModule3" title="Py_InitModule3"><tt class="xref c c-func docutils literal"><span class="pre">Py_InitModule3()</span></tt></a>.', 'We rename <tt class="xref c c-func docutils literal"><span class="pre">initnoddy()</span></tt> to <tt class="xref c c-func docutils literal"><span class="pre">initnoddy2()</span></tt> and update the module name passed to <a class="reference internal" href="../c-api/allocation.html#Py_InitModule3" title="Py_InitModule3"><tt class="xref c c-func docutils literal"><span class="pre">Py_InitModule3()</span></tt></a>.');
insert into py276_translations values (6696, 158, 'extending/newtypes.html', 'We rename <tt class="xref c c-func docutils literal"><span class="pre">initnoddy()</span></tt> to <tt class="xref c c-func docutils literal"><span class="pre">initnoddy2()</span></tt> and update the module name passed to <a class="reference internal" href="../c-api/allocation.html#Py_InitModule3" title="Py_InitModule3"><tt class="xref c c-func docutils literal"><span class="pre">Py_InitModule3()</span></tt></a>.', 0, 0);
insert into py276_sentences values (4697, 159, 'extending/newtypes.html', 'Finally, we update our <tt class="file docutils literal"><span class="pre">setup.py</span></tt> file to build the new module:', 'Finally, we update our <tt class="file docutils literal"><span class="pre">setup.py</span></tt> file to build the new module:');
insert into py276_translations values (6697, 159, 'extending/newtypes.html', 'Finally, we update our <tt class="file docutils literal"><span class="pre">setup.py</span></tt> file to build the new module:', 0, 0);
insert into py276_sentences values (4698, 160, 'extending/newtypes.html', 'In this section, we’ll provide finer control over how the <tt class="xref py py-attr docutils literal"><span class="pre">first</span></tt> and <tt class="xref py py-attr docutils literal"><span class="pre">last</span></tt> attributes are set in the <tt class="xref py py-class docutils literal"><span class="pre">Noddy</span></tt> example. ', 'In this section, we’ll provide finer control over how the <tt class="xref py py-attr docutils literal"><span class="pre">first</span></tt> and <tt class="xref py py-attr docutils literal"><span class="pre">last</span></tt> attributes are set in the <tt class="xref py py-class docutils literal"><span class="pre">Noddy</span></tt> example. ');
insert into py276_translations values (6698, 160, 'extending/newtypes.html', 'In this section, we’ll provide finer control over how the <tt class="xref py py-attr docutils literal"><span class="pre">first</span></tt> and <tt class="xref py py-attr docutils literal"><span class="pre">last</span></tt> attributes are set in the <tt class="xref py py-class docutils literal"><span class="pre">Noddy</span></tt> example. ', 0, 0);
insert into py276_sentences values (4699, 161, 'extending/newtypes.html', 'In the previous version of our module, the instance variables <tt class="xref py py-attr docutils literal"><span class="pre">first</span></tt> and <tt class="xref py py-attr docutils literal"><span class="pre">last</span></tt> could be set to non-string values or even deleted. ', 'In the previous version of our module, the instance variables <tt class="xref py py-attr docutils literal"><span class="pre">first</span></tt> and <tt class="xref py py-attr docutils literal"><span class="pre">last</span></tt> could be set to non-string values or even deleted. ');
insert into py276_translations values (6699, 161, 'extending/newtypes.html', 'In the previous version of our module, the instance variables <tt class="xref py py-attr docutils literal"><span class="pre">first</span></tt> and <tt class="xref py py-attr docutils literal"><span class="pre">last</span></tt> could be set to non-string values or even deleted. ', 0, 0);
insert into py276_sentences values (4700, 162, 'extending/newtypes.html', 'We want to make sure that these attributes always contain strings.', 'We want to make sure that these attributes always contain strings.');
insert into py276_translations values (6700, 162, 'extending/newtypes.html', 'We want to make sure that these attributes always contain strings.', 0, 0);
insert into py276_sentences values (4701, 163, 'extending/newtypes.html', 'To provide greater control, over the <tt class="xref py py-attr docutils literal"><span class="pre">first</span></tt> and <tt class="xref py py-attr docutils literal"><span class="pre">last</span></tt> attributes, we’ll use custom getter and setter functions. ', 'To provide greater control, over the <tt class="xref py py-attr docutils literal"><span class="pre">first</span></tt> and <tt class="xref py py-attr docutils literal"><span class="pre">last</span></tt> attributes, we’ll use custom getter and setter functions. ');
insert into py276_translations values (6701, 163, 'extending/newtypes.html', 'To provide greater control, over the <tt class="xref py py-attr docutils literal"><span class="pre">first</span></tt> and <tt class="xref py py-attr docutils literal"><span class="pre">last</span></tt> attributes, we’ll use custom getter and setter functions. ', 0, 0);
insert into py276_sentences values (4702, 164, 'extending/newtypes.html', 'Here are the functions for getting and setting the <tt class="xref py py-attr docutils literal"><span class="pre">first</span></tt> attribute:', 'Here are the functions for getting and setting the <tt class="xref py py-attr docutils literal"><span class="pre">first</span></tt> attribute:');
insert into py276_translations values (6702, 164, 'extending/newtypes.html', 'Here are the functions for getting and setting the <tt class="xref py py-attr docutils literal"><span class="pre">first</span></tt> attribute:', 0, 0);
insert into py276_sentences values (4703, 165, 'extending/newtypes.html', 'The getter function is passed a <tt class="xref py py-class docutils literal"><span class="pre">Noddy</span></tt> object and a “closure”, which is void pointer. ', 'The getter function is passed a <tt class="xref py py-class docutils literal"><span class="pre">Noddy</span></tt> object and a “closure”, which is void pointer. ');
insert into py276_translations values (6703, 165, 'extending/newtypes.html', 'The getter function is passed a <tt class="xref py py-class docutils literal"><span class="pre">Noddy</span></tt> object and a “closure”, which is void pointer. ', 0, 0);
insert into py276_sentences values (4704, 166, 'extending/newtypes.html', 'In this case, the closure is ignored. ', 'In this case, the closure is ignored. ');
insert into py276_translations values (6704, 166, 'extending/newtypes.html', 'In this case, the closure is ignored. ', 0, 0);
insert into py276_sentences values (4705, 167, 'extending/newtypes.html', '(The closure supports an advanced usage in which definition data is passed to the getter and setter. ', '(The closure supports an advanced usage in which definition data is passed to the getter and setter. ');
insert into py276_translations values (6705, 167, 'extending/newtypes.html', '(The closure supports an advanced usage in which definition data is passed to the getter and setter. ', 0, 0);
insert into py276_sentences values (4706, 168, 'extending/newtypes.html', 'This could, for example, be used to allow a single set of getter and setter functions that decide the attribute to get or set based on data in the closure.)', 'This could, for example, be used to allow a single set of getter and setter functions that decide the attribute to get or set based on data in the closure.)');
insert into py276_translations values (6706, 168, 'extending/newtypes.html', 'This could, for example, be used to allow a single set of getter and setter functions that decide the attribute to get or set based on data in the closure.)', 0, 0);
insert into py276_sentences values (4707, 169, 'extending/newtypes.html', 'The setter function is passed the <tt class="xref py py-class docutils literal"><span class="pre">Noddy</span></tt> object, the new value, and the closure. ', 'The setter function is passed the <tt class="xref py py-class docutils literal"><span class="pre">Noddy</span></tt> object, the new value, and the closure. ');
insert into py276_translations values (6707, 169, 'extending/newtypes.html', 'The setter function is passed the <tt class="xref py py-class docutils literal"><span class="pre">Noddy</span></tt> object, the new value, and the closure. ', 0, 0);
insert into py276_sentences values (4708, 170, 'extending/newtypes.html', 'The new value may be <em>NULL</em>, in which case the attribute is being deleted. ', 'The new value may be <em>NULL</em>, in which case the attribute is being deleted. ');
insert into py276_translations values (6708, 170, 'extending/newtypes.html', 'The new value may be <em>NULL</em>, in which case the attribute is being deleted. ', 0, 0);
insert into py276_sentences values (4709, 171, 'extending/newtypes.html', 'In our setter, we raise an error if the attribute is deleted or if the attribute value is not a string.', 'In our setter, we raise an error if the attribute is deleted or if the attribute value is not a string.');
insert into py276_translations values (6709, 171, 'extending/newtypes.html', 'In our setter, we raise an error if the attribute is deleted or if the attribute value is not a string.', 0, 0);
insert into py276_sentences values (4710, 172, 'extending/newtypes.html', 'We create an array of <tt class="xref c c-type docutils literal"><span class="pre">PyGetSetDef</span></tt> structures:', 'We create an array of <tt class="xref c c-type docutils literal"><span class="pre">PyGetSetDef</span></tt> structures:');
insert into py276_translations values (6710, 172, 'extending/newtypes.html', 'We create an array of <tt class="xref c c-type docutils literal"><span class="pre">PyGetSetDef</span></tt> structures:', 0, 0);
insert into py276_sentences values (4711, 173, 'extending/newtypes.html', 'and register it in the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_getset" title="PyTypeObject.tp_getset"><tt class="xref c c-member docutils literal"><span class="pre">tp_getset</span></tt></a> slot:', 'and register it in the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_getset" title="PyTypeObject.tp_getset"><tt class="xref c c-member docutils literal"><span class="pre">tp_getset</span></tt></a> slot:');
insert into py276_translations values (6711, 173, 'extending/newtypes.html', 'and register it in the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_getset" title="PyTypeObject.tp_getset"><tt class="xref c c-member docutils literal"><span class="pre">tp_getset</span></tt></a> slot:', 0, 0);
insert into py276_sentences values (4712, 174, 'extending/newtypes.html', 'to register our attribute getters and setters.', 'to register our attribute getters and setters.');
insert into py276_translations values (6712, 174, 'extending/newtypes.html', 'to register our attribute getters and setters.', 0, 0);
insert into py276_sentences values (4713, 175, 'extending/newtypes.html', 'The last item in a <tt class="xref c c-type docutils literal"><span class="pre">PyGetSetDef</span></tt> structure is the closure mentioned above. ', 'The last item in a <tt class="xref c c-type docutils literal"><span class="pre">PyGetSetDef</span></tt> structure is the closure mentioned above. ');
insert into py276_translations values (6713, 175, 'extending/newtypes.html', 'The last item in a <tt class="xref c c-type docutils literal"><span class="pre">PyGetSetDef</span></tt> structure is the closure mentioned above. ', 0, 0);
insert into py276_sentences values (4714, 176, 'extending/newtypes.html', 'In this case, we aren’t using the closure, so we just pass <em>NULL</em>.', 'In this case, we aren’t using the closure, so we just pass <em>NULL</em>.');
insert into py276_translations values (6714, 176, 'extending/newtypes.html', 'In this case, we aren’t using the closure, so we just pass <em>NULL</em>.', 0, 0);
insert into py276_sentences values (4715, 177, 'extending/newtypes.html', 'We also remove the member definitions for these attributes:', 'We also remove the member definitions for these attributes:');
insert into py276_translations values (6715, 177, 'extending/newtypes.html', 'We also remove the member definitions for these attributes:', 0, 0);
insert into py276_sentences values (4716, 178, 'extending/newtypes.html', 'We also need to update the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_init" title="PyTypeObject.tp_init"><tt class="xref c c-member docutils literal"><span class="pre">tp_init</span></tt></a> handler to only allow strings <a class="footnote-reference" href="#id9" id="id4">[3]</a> to be passed:', 'We also need to update the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_init" title="PyTypeObject.tp_init"><tt class="xref c c-member docutils literal"><span class="pre">tp_init</span></tt></a> handler to only allow strings <a class="footnote-reference" href="#id9" id="id4">[3]</a> to be passed:');
insert into py276_translations values (6716, 178, 'extending/newtypes.html', 'We also need to update the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_init" title="PyTypeObject.tp_init"><tt class="xref c c-member docutils literal"><span class="pre">tp_init</span></tt></a> handler to only allow strings <a class="footnote-reference" href="#id9" id="id4">[3]</a> to be passed:', 0, 0);
insert into py276_sentences values (4717, 179, 'extending/newtypes.html', 'With these changes, we can assure that the <tt class="xref py py-attr docutils literal"><span class="pre">first</span></tt> and <tt class="xref py py-attr docutils literal"><span class="pre">last</span></tt> members are never <em>NULL</em> so we can remove checks for <em>NULL</em> values in almost all cases. ', 'With these changes, we can assure that the <tt class="xref py py-attr docutils literal"><span class="pre">first</span></tt> and <tt class="xref py py-attr docutils literal"><span class="pre">last</span></tt> members are never <em>NULL</em> so we can remove checks for <em>NULL</em> values in almost all cases. ');
insert into py276_translations values (6717, 179, 'extending/newtypes.html', 'With these changes, we can assure that the <tt class="xref py py-attr docutils literal"><span class="pre">first</span></tt> and <tt class="xref py py-attr docutils literal"><span class="pre">last</span></tt> members are never <em>NULL</em> so we can remove checks for <em>NULL</em> values in almost all cases. ', 0, 0);
insert into py276_sentences values (4718, 180, 'extending/newtypes.html', 'This means that most of the <a class="reference internal" href="../c-api/refcounting.html#Py_XDECREF" title="Py_XDECREF"><tt class="xref c c-func docutils literal"><span class="pre">Py_XDECREF()</span></tt></a> calls can be converted to <a class="reference internal" href="../c-api/refcounting.html#Py_DECREF" title="Py_DECREF"><tt class="xref c c-func docutils literal"><span class="pre">Py_DECREF()</span></tt></a> calls. ', 'This means that most of the <a class="reference internal" href="../c-api/refcounting.html#Py_XDECREF" title="Py_XDECREF"><tt class="xref c c-func docutils literal"><span class="pre">Py_XDECREF()</span></tt></a> calls can be converted to <a class="reference internal" href="../c-api/refcounting.html#Py_DECREF" title="Py_DECREF"><tt class="xref c c-func docutils literal"><span class="pre">Py_DECREF()</span></tt></a> calls. ');
insert into py276_translations values (6718, 180, 'extending/newtypes.html', 'This means that most of the <a class="reference internal" href="../c-api/refcounting.html#Py_XDECREF" title="Py_XDECREF"><tt class="xref c c-func docutils literal"><span class="pre">Py_XDECREF()</span></tt></a> calls can be converted to <a class="reference internal" href="../c-api/refcounting.html#Py_DECREF" title="Py_DECREF"><tt class="xref c c-func docutils literal"><span class="pre">Py_DECREF()</span></tt></a> calls. ', 0, 0);
insert into py276_sentences values (4719, 181, 'extending/newtypes.html', 'The only place we can’t change these calls is in the deallocator, where there is the possibility that the initialization of these members failed in the constructor.', 'The only place we can’t change these calls is in the deallocator, where there is the possibility that the initialization of these members failed in the constructor.');
insert into py276_translations values (6719, 181, 'extending/newtypes.html', 'The only place we can’t change these calls is in the deallocator, where there is the possibility that the initialization of these members failed in the constructor.', 0, 0);
insert into py276_sentences values (4720, 182, 'extending/newtypes.html', 'We also rename the module initialization function and module name in the initialization function, as we did before, and we add an extra definition to the <tt class="file docutils literal"><span class="pre">setup.py</span></tt> file.', 'We also rename the module initialization function and module name in the initialization function, as we did before, and we add an extra definition to the <tt class="file docutils literal"><span class="pre">setup.py</span></tt> file.');
insert into py276_translations values (6720, 182, 'extending/newtypes.html', 'We also rename the module initialization function and module name in the initialization function, as we did before, and we add an extra definition to the <tt class="file docutils literal"><span class="pre">setup.py</span></tt> file.', 0, 0);
insert into py276_sentences values (4721, 183, 'extending/newtypes.html', 'Python has a cyclic-garbage collector that can identify unneeded objects even when their reference counts are not zero. ', 'Python has a cyclic-garbage collector that can identify unneeded objects even when their reference counts are not zero. ');
insert into py276_translations values (6721, 183, 'extending/newtypes.html', 'Python has a cyclic-garbage collector that can identify unneeded objects even when their reference counts are not zero. ', 0, 0);
insert into py276_sentences values (4722, 184, 'extending/newtypes.html', 'This can happen when objects are involved in cycles. ', 'This can happen when objects are involved in cycles. ');
insert into py276_translations values (6722, 184, 'extending/newtypes.html', 'This can happen when objects are involved in cycles. ', 0, 0);
insert into py276_sentences values (4723, 185, 'extending/newtypes.html', 'For example, consider:', 'For example, consider:');
insert into py276_translations values (6723, 185, 'extending/newtypes.html', 'For example, consider:', 0, 0);
insert into py276_sentences values (4724, 186, 'extending/newtypes.html', 'In this example, we create a list that contains itself. ', 'In this example, we create a list that contains itself. ');
insert into py276_translations values (6724, 186, 'extending/newtypes.html', 'In this example, we create a list that contains itself. ', 0, 0);
insert into py276_sentences values (4725, 187, 'extending/newtypes.html', 'When we delete it, it still has a reference from itself. ', 'When we delete it, it still has a reference from itself. ');
insert into py276_translations values (6725, 187, 'extending/newtypes.html', 'When we delete it, it still has a reference from itself. ', 0, 0);
insert into py276_sentences values (4726, 188, 'extending/newtypes.html', 'Its reference count doesn’t drop to zero. ', 'Its reference count doesn’t drop to zero. ');
insert into py276_translations values (6726, 188, 'extending/newtypes.html', 'Its reference count doesn’t drop to zero. ', 0, 0);
insert into py276_sentences values (4727, 189, 'extending/newtypes.html', 'Fortunately, Python’s cyclic-garbage collector will eventually figure out that the list is garbage and free it.', 'Fortunately, Python’s cyclic-garbage collector will eventually figure out that the list is garbage and free it.');
insert into py276_translations values (6727, 189, 'extending/newtypes.html', 'Fortunately, Python’s cyclic-garbage collector will eventually figure out that the list is garbage and free it.', 0, 0);
insert into py276_sentences values (4728, 190, 'extending/newtypes.html', 'In the second version of the <tt class="xref py py-class docutils literal"><span class="pre">Noddy</span></tt> example, we allowed any kind of object to be stored in the <tt class="xref py py-attr docutils literal"><span class="pre">first</span></tt> or <tt class="xref py py-attr docutils literal"><span class="pre">last</span></tt> attributes. ', 'In the second version of the <tt class="xref py py-class docutils literal"><span class="pre">Noddy</span></tt> example, we allowed any kind of object to be stored in the <tt class="xref py py-attr docutils literal"><span class="pre">first</span></tt> or <tt class="xref py py-attr docutils literal"><span class="pre">last</span></tt> attributes. ');
insert into py276_translations values (6728, 190, 'extending/newtypes.html', 'In the second version of the <tt class="xref py py-class docutils literal"><span class="pre">Noddy</span></tt> example, we allowed any kind of object to be stored in the <tt class="xref py py-attr docutils literal"><span class="pre">first</span></tt> or <tt class="xref py py-attr docutils literal"><span class="pre">last</span></tt> attributes. ', 0, 0);
insert into py276_sentences values (4729, 191, 'extending/newtypes.html', '<a class="footnote-reference" href="#id10" id="id5">[4]</a> This means that <tt class="xref py py-class docutils literal"><span class="pre">Noddy</span></tt> objects can participate in cycles:', '<a class="footnote-reference" href="#id10" id="id5">[4]</a> This means that <tt class="xref py py-class docutils literal"><span class="pre">Noddy</span></tt> objects can participate in cycles:');
insert into py276_translations values (6729, 191, 'extending/newtypes.html', '<a class="footnote-reference" href="#id10" id="id5">[4]</a> This means that <tt class="xref py py-class docutils literal"><span class="pre">Noddy</span></tt> objects can participate in cycles:', 0, 0);
insert into py276_sentences values (4730, 192, 'extending/newtypes.html', 'This is pretty silly, but it gives us an excuse to add support for the cyclic-garbage collector to the <tt class="xref py py-class docutils literal"><span class="pre">Noddy</span></tt> example. ', 'This is pretty silly, but it gives us an excuse to add support for the cyclic-garbage collector to the <tt class="xref py py-class docutils literal"><span class="pre">Noddy</span></tt> example. ');
insert into py276_translations values (6730, 192, 'extending/newtypes.html', 'This is pretty silly, but it gives us an excuse to add support for the cyclic-garbage collector to the <tt class="xref py py-class docutils literal"><span class="pre">Noddy</span></tt> example. ', 0, 0);
insert into py276_sentences values (4731, 193, 'extending/newtypes.html', 'To support cyclic garbage collection, types need to fill two slots and set a class flag that enables these slots:', 'To support cyclic garbage collection, types need to fill two slots and set a class flag that enables these slots:');
insert into py276_translations values (6731, 193, 'extending/newtypes.html', 'To support cyclic garbage collection, types need to fill two slots and set a class flag that enables these slots:', 0, 0);
insert into py276_sentences values (4732, 194, 'extending/newtypes.html', 'The traversal method provides access to subobjects that could participate in cycles:', 'The traversal method provides access to subobjects that could participate in cycles:');
insert into py276_translations values (6732, 194, 'extending/newtypes.html', 'The traversal method provides access to subobjects that could participate in cycles:', 0, 0);
insert into py276_sentences values (4733, 195, 'extending/newtypes.html', 'For each subobject that can participate in cycles, we need to call the <tt class="xref c c-func docutils literal"><span class="pre">visit()</span></tt> function, which is passed to the traversal method. ', 'For each subobject that can participate in cycles, we need to call the <tt class="xref c c-func docutils literal"><span class="pre">visit()</span></tt> function, which is passed to the traversal method. ');
insert into py276_translations values (6733, 195, 'extending/newtypes.html', 'For each subobject that can participate in cycles, we need to call the <tt class="xref c c-func docutils literal"><span class="pre">visit()</span></tt> function, which is passed to the traversal method. ', 0, 0);
insert into py276_sentences values (4734, 196, 'extending/newtypes.html', 'The <tt class="xref c c-func docutils literal"><span class="pre">visit()</span></tt> function takes as arguments the subobject and the extra argument <em>arg</em> passed to the traversal method. ', 'The <tt class="xref c c-func docutils literal"><span class="pre">visit()</span></tt> function takes as arguments the subobject and the extra argument <em>arg</em> passed to the traversal method. ');
insert into py276_translations values (6734, 196, 'extending/newtypes.html', 'The <tt class="xref c c-func docutils literal"><span class="pre">visit()</span></tt> function takes as arguments the subobject and the extra argument <em>arg</em> passed to the traversal method. ', 0, 0);
insert into py276_sentences values (4735, 197, 'extending/newtypes.html', 'It returns an integer value that must be returned if it is non-zero.', 'It returns an integer value that must be returned if it is non-zero.');
insert into py276_translations values (6735, 197, 'extending/newtypes.html', 'It returns an integer value that must be returned if it is non-zero.', 0, 0);
insert into py276_sentences values (4736, 198, 'extending/newtypes.html', 'Python 2.4 and higher provide a <a class="reference internal" href="../c-api/gcsupport.html#Py_VISIT" title="Py_VISIT"><tt class="xref c c-func docutils literal"><span class="pre">Py_VISIT()</span></tt></a> macro that automates calling visit functions. ', 'Python 2.4 and higher provide a <a class="reference internal" href="../c-api/gcsupport.html#Py_VISIT" title="Py_VISIT"><tt class="xref c c-func docutils literal"><span class="pre">Py_VISIT()</span></tt></a> macro that automates calling visit functions. ');
insert into py276_translations values (6736, 198, 'extending/newtypes.html', 'Python 2.4 and higher provide a <a class="reference internal" href="../c-api/gcsupport.html#Py_VISIT" title="Py_VISIT"><tt class="xref c c-func docutils literal"><span class="pre">Py_VISIT()</span></tt></a> macro that automates calling visit functions. ', 0, 0);
insert into py276_sentences values (4737, 199, 'extending/newtypes.html', 'With <a class="reference internal" href="../c-api/gcsupport.html#Py_VISIT" title="Py_VISIT"><tt class="xref c c-func docutils literal"><span class="pre">Py_VISIT()</span></tt></a>, <tt class="xref c c-func docutils literal"><span class="pre">Noddy_traverse()</span></tt> can be simplified:', 'With <a class="reference internal" href="../c-api/gcsupport.html#Py_VISIT" title="Py_VISIT"><tt class="xref c c-func docutils literal"><span class="pre">Py_VISIT()</span></tt></a>, <tt class="xref c c-func docutils literal"><span class="pre">Noddy_traverse()</span></tt> can be simplified:');
insert into py276_translations values (6737, 199, 'extending/newtypes.html', 'With <a class="reference internal" href="../c-api/gcsupport.html#Py_VISIT" title="Py_VISIT"><tt class="xref c c-func docutils literal"><span class="pre">Py_VISIT()</span></tt></a>, <tt class="xref c c-func docutils literal"><span class="pre">Noddy_traverse()</span></tt> can be simplified:', 0, 0);
insert into py276_sentences values (4738, 200, 'extending/newtypes.html', 'Note', 'Note');
insert into py276_translations values (6738, 200, 'extending/newtypes.html', 'Note', 0, 0);
insert into py276_sentences values (4739, 201, 'extending/newtypes.html', 'Note that the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_traverse" title="PyTypeObject.tp_traverse"><tt class="xref c c-member docutils literal"><span class="pre">tp_traverse</span></tt></a> implementation must name its arguments exactly <em>visit</em> and <em>arg</em> in order to use <a class="reference internal" href="../c-api/gcsupport.html#Py_VISIT" title="Py_VISIT"><tt class="xref c c-func docutils literal"><span class="pre">Py_VISIT()</span></tt></a>. ', 'Note that the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_traverse" title="PyTypeObject.tp_traverse"><tt class="xref c c-member docutils literal"><span class="pre">tp_traverse</span></tt></a> implementation must name its arguments exactly <em>visit</em> and <em>arg</em> in order to use <a class="reference internal" href="../c-api/gcsupport.html#Py_VISIT" title="Py_VISIT"><tt class="xref c c-func docutils literal"><span class="pre">Py_VISIT()</span></tt></a>. ');
insert into py276_translations values (6739, 201, 'extending/newtypes.html', 'Note that the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_traverse" title="PyTypeObject.tp_traverse"><tt class="xref c c-member docutils literal"><span class="pre">tp_traverse</span></tt></a> implementation must name its arguments exactly <em>visit</em> and <em>arg</em> in order to use <a class="reference internal" href="../c-api/gcsupport.html#Py_VISIT" title="Py_VISIT"><tt class="xref c c-func docutils literal"><span class="pre">Py_VISIT()</span></tt></a>. ', 0, 0);
insert into py276_sentences values (4740, 202, 'extending/newtypes.html', 'This is to encourage uniformity across these boring implementations.', 'This is to encourage uniformity across these boring implementations.');
insert into py276_translations values (6740, 202, 'extending/newtypes.html', 'This is to encourage uniformity across these boring implementations.', 0, 0);
insert into py276_sentences values (4741, 203, 'extending/newtypes.html', 'We also need to provide a method for clearing any subobjects that can participate in cycles. ', 'We also need to provide a method for clearing any subobjects that can participate in cycles. ');
insert into py276_translations values (6741, 203, 'extending/newtypes.html', 'We also need to provide a method for clearing any subobjects that can participate in cycles. ', 0, 0);
insert into py276_sentences values (4742, 204, 'extending/newtypes.html', 'We implement the method and reimplement the deallocator to use it:', 'We implement the method and reimplement the deallocator to use it:');
insert into py276_translations values (6742, 204, 'extending/newtypes.html', 'We implement the method and reimplement the deallocator to use it:', 0, 0);
insert into py276_sentences values (4743, 205, 'extending/newtypes.html', 'Notice the use of a temporary variable in <tt class="xref c c-func docutils literal"><span class="pre">Noddy_clear()</span></tt>. ', 'Notice the use of a temporary variable in <tt class="xref c c-func docutils literal"><span class="pre">Noddy_clear()</span></tt>. ');
insert into py276_translations values (6743, 205, 'extending/newtypes.html', 'Notice the use of a temporary variable in <tt class="xref c c-func docutils literal"><span class="pre">Noddy_clear()</span></tt>. ', 0, 0);
insert into py276_sentences values (4744, 206, 'extending/newtypes.html', 'We use the temporary variable so that we can set each member to <em>NULL</em> before decrementing its reference count. ', 'We use the temporary variable so that we can set each member to <em>NULL</em> before decrementing its reference count. ');
insert into py276_translations values (6744, 206, 'extending/newtypes.html', 'We use the temporary variable so that we can set each member to <em>NULL</em> before decrementing its reference count. ', 0, 0);
insert into py276_sentences values (4745, 207, 'extending/newtypes.html', 'We do this because, as was discussed earlier, if the reference count drops to zero, we might cause code to run that calls back into the object. ', 'We do this because, as was discussed earlier, if the reference count drops to zero, we might cause code to run that calls back into the object. ');
insert into py276_translations values (6745, 207, 'extending/newtypes.html', 'We do this because, as was discussed earlier, if the reference count drops to zero, we might cause code to run that calls back into the object. ', 0, 0);
insert into py276_sentences values (4746, 208, 'extending/newtypes.html', 'In addition, because we now support garbage collection, we also have to worry about code being run that triggers garbage collection. ', 'In addition, because we now support garbage collection, we also have to worry about code being run that triggers garbage collection. ');
insert into py276_translations values (6746, 208, 'extending/newtypes.html', 'In addition, because we now support garbage collection, we also have to worry about code being run that triggers garbage collection. ', 0, 0);
insert into py276_sentences values (4747, 209, 'extending/newtypes.html', 'If garbage collection is run, our <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_traverse" title="PyTypeObject.tp_traverse"><tt class="xref c c-member docutils literal"><span class="pre">tp_traverse</span></tt></a> handler could get called. ', 'If garbage collection is run, our <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_traverse" title="PyTypeObject.tp_traverse"><tt class="xref c c-member docutils literal"><span class="pre">tp_traverse</span></tt></a> handler could get called. ');
insert into py276_translations values (6747, 209, 'extending/newtypes.html', 'If garbage collection is run, our <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_traverse" title="PyTypeObject.tp_traverse"><tt class="xref c c-member docutils literal"><span class="pre">tp_traverse</span></tt></a> handler could get called. ', 0, 0);
insert into py276_sentences values (4748, 210, 'extending/newtypes.html', 'We can’t take a chance of having <tt class="xref c c-func docutils literal"><span class="pre">Noddy_traverse()</span></tt> called when a member’s reference count has dropped to zero and its value hasn’t been set to <em>NULL</em>.', 'We can’t take a chance of having <tt class="xref c c-func docutils literal"><span class="pre">Noddy_traverse()</span></tt> called when a member’s reference count has dropped to zero and its value hasn’t been set to <em>NULL</em>.');
insert into py276_translations values (6748, 210, 'extending/newtypes.html', 'We can’t take a chance of having <tt class="xref c c-func docutils literal"><span class="pre">Noddy_traverse()</span></tt> called when a member’s reference count has dropped to zero and its value hasn’t been set to <em>NULL</em>.', 0, 0);
insert into py276_sentences values (4749, 211, 'extending/newtypes.html', 'Python 2.4 and higher provide a <a class="reference internal" href="../c-api/refcounting.html#Py_CLEAR" title="Py_CLEAR"><tt class="xref c c-func docutils literal"><span class="pre">Py_CLEAR()</span></tt></a> that automates the careful decrementing of reference counts. ', 'Python 2.4 and higher provide a <a class="reference internal" href="../c-api/refcounting.html#Py_CLEAR" title="Py_CLEAR"><tt class="xref c c-func docutils literal"><span class="pre">Py_CLEAR()</span></tt></a> that automates the careful decrementing of reference counts. ');
insert into py276_translations values (6749, 211, 'extending/newtypes.html', 'Python 2.4 and higher provide a <a class="reference internal" href="../c-api/refcounting.html#Py_CLEAR" title="Py_CLEAR"><tt class="xref c c-func docutils literal"><span class="pre">Py_CLEAR()</span></tt></a> that automates the careful decrementing of reference counts. ', 0, 0);
insert into py276_sentences values (4750, 212, 'extending/newtypes.html', 'With <a class="reference internal" href="../c-api/refcounting.html#Py_CLEAR" title="Py_CLEAR"><tt class="xref c c-func docutils literal"><span class="pre">Py_CLEAR()</span></tt></a>, the <tt class="xref c c-func docutils literal"><span class="pre">Noddy_clear()</span></tt> function can be simplified:', 'With <a class="reference internal" href="../c-api/refcounting.html#Py_CLEAR" title="Py_CLEAR"><tt class="xref c c-func docutils literal"><span class="pre">Py_CLEAR()</span></tt></a>, the <tt class="xref c c-func docutils literal"><span class="pre">Noddy_clear()</span></tt> function can be simplified:');
insert into py276_translations values (6750, 212, 'extending/newtypes.html', 'With <a class="reference internal" href="../c-api/refcounting.html#Py_CLEAR" title="Py_CLEAR"><tt class="xref c c-func docutils literal"><span class="pre">Py_CLEAR()</span></tt></a>, the <tt class="xref c c-func docutils literal"><span class="pre">Noddy_clear()</span></tt> function can be simplified:', 0, 0);
insert into py276_sentences values (4751, 213, 'extending/newtypes.html', 'Finally, we add the <a class="reference internal" href="../c-api/typeobj.html#Py_TPFLAGS_HAVE_GC" title="Py_TPFLAGS_HAVE_GC"><tt class="xref py py-const docutils literal"><span class="pre">Py_TPFLAGS_HAVE_GC</span></tt></a> flag to the class flags:', 'Finally, we add the <a class="reference internal" href="../c-api/typeobj.html#Py_TPFLAGS_HAVE_GC" title="Py_TPFLAGS_HAVE_GC"><tt class="xref py py-const docutils literal"><span class="pre">Py_TPFLAGS_HAVE_GC</span></tt></a> flag to the class flags:');
insert into py276_translations values (6751, 213, 'extending/newtypes.html', 'Finally, we add the <a class="reference internal" href="../c-api/typeobj.html#Py_TPFLAGS_HAVE_GC" title="Py_TPFLAGS_HAVE_GC"><tt class="xref py py-const docutils literal"><span class="pre">Py_TPFLAGS_HAVE_GC</span></tt></a> flag to the class flags:', 0, 0);
insert into py276_sentences values (4752, 214, 'extending/newtypes.html', 'That’s pretty much it. ', 'That’s pretty much it. ');
insert into py276_translations values (6752, 214, 'extending/newtypes.html', 'That’s pretty much it. ', 0, 0);
insert into py276_sentences values (4753, 215, 'extending/newtypes.html', 'If we had written custom <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_alloc" title="PyTypeObject.tp_alloc"><tt class="xref c c-member docutils literal"><span class="pre">tp_alloc</span></tt></a> or <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_free" title="PyTypeObject.tp_free"><tt class="xref c c-member docutils literal"><span class="pre">tp_free</span></tt></a> slots, we’d need to modify them for cyclic-garbage collection. ', 'If we had written custom <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_alloc" title="PyTypeObject.tp_alloc"><tt class="xref c c-member docutils literal"><span class="pre">tp_alloc</span></tt></a> or <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_free" title="PyTypeObject.tp_free"><tt class="xref c c-member docutils literal"><span class="pre">tp_free</span></tt></a> slots, we’d need to modify them for cyclic-garbage collection. ');
insert into py276_translations values (6753, 215, 'extending/newtypes.html', 'If we had written custom <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_alloc" title="PyTypeObject.tp_alloc"><tt class="xref c c-member docutils literal"><span class="pre">tp_alloc</span></tt></a> or <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_free" title="PyTypeObject.tp_free"><tt class="xref c c-member docutils literal"><span class="pre">tp_free</span></tt></a> slots, we’d need to modify them for cyclic-garbage collection. ', 0, 0);
insert into py276_sentences values (4754, 216, 'extending/newtypes.html', 'Most extensions will use the versions automatically provided.', 'Most extensions will use the versions automatically provided.');
insert into py276_translations values (6754, 216, 'extending/newtypes.html', 'Most extensions will use the versions automatically provided.', 0, 0);
insert into py276_sentences values (4755, 217, 'extending/newtypes.html', 'It is possible to create new extension types that are derived from existing types. ', 'It is possible to create new extension types that are derived from existing types. ');
insert into py276_translations values (6755, 217, 'extending/newtypes.html', 'It is possible to create new extension types that are derived from existing types. ', 0, 0);
insert into py276_sentences values (4756, 218, 'extending/newtypes.html', 'It is easiest to inherit from the built in types, since an extension can easily use the <tt class="xref py py-class docutils literal"><span class="pre">PyTypeObject</span></tt> it needs. ', 'It is easiest to inherit from the built in types, since an extension can easily use the <tt class="xref py py-class docutils literal"><span class="pre">PyTypeObject</span></tt> it needs. ');
insert into py276_translations values (6756, 218, 'extending/newtypes.html', 'It is easiest to inherit from the built in types, since an extension can easily use the <tt class="xref py py-class docutils literal"><span class="pre">PyTypeObject</span></tt> it needs. ', 0, 0);
insert into py276_sentences values (4757, 219, 'extending/newtypes.html', 'It can be difficult to share these <tt class="xref py py-class docutils literal"><span class="pre">PyTypeObject</span></tt> structures between extension modules.', 'It can be difficult to share these <tt class="xref py py-class docutils literal"><span class="pre">PyTypeObject</span></tt> structures between extension modules.');
insert into py276_translations values (6757, 219, 'extending/newtypes.html', 'It can be difficult to share these <tt class="xref py py-class docutils literal"><span class="pre">PyTypeObject</span></tt> structures between extension modules.', 0, 0);
insert into py276_sentences values (4758, 220, 'extending/newtypes.html', 'In this example we will create a <tt class="xref py py-class docutils literal"><span class="pre">Shoddy</span></tt> type that inherits from the built-in <a class="reference internal" href="../library/functions.html#list" title="list"><tt class="xref py py-class docutils literal"><span class="pre">list</span></tt></a> type. ', 'In this example we will create a <tt class="xref py py-class docutils literal"><span class="pre">Shoddy</span></tt> type that inherits from the built-in <a class="reference internal" href="../library/functions.html#list" title="list"><tt class="xref py py-class docutils literal"><span class="pre">list</span></tt></a> type. ');
insert into py276_translations values (6758, 220, 'extending/newtypes.html', 'In this example we will create a <tt class="xref py py-class docutils literal"><span class="pre">Shoddy</span></tt> type that inherits from the built-in <a class="reference internal" href="../library/functions.html#list" title="list"><tt class="xref py py-class docutils literal"><span class="pre">list</span></tt></a> type. ', 0, 0);
insert into py276_sentences values (4759, 221, 'extending/newtypes.html', 'The new type will be completely compatible with regular lists, but will have an additional <tt class="xref py py-meth docutils literal"><span class="pre">increment()</span></tt> method that increases an internal counter.', 'The new type will be completely compatible with regular lists, but will have an additional <tt class="xref py py-meth docutils literal"><span class="pre">increment()</span></tt> method that increases an internal counter.');
insert into py276_translations values (6759, 221, 'extending/newtypes.html', 'The new type will be completely compatible with regular lists, but will have an additional <tt class="xref py py-meth docutils literal"><span class="pre">increment()</span></tt> method that increases an internal counter.', 0, 0);
insert into py276_sentences values (4760, 222, 'extending/newtypes.html', 'As you can see, the source code closely resembles the <tt class="xref py py-class docutils literal"><span class="pre">Noddy</span></tt> examples in previous sections. ', 'As you can see, the source code closely resembles the <tt class="xref py py-class docutils literal"><span class="pre">Noddy</span></tt> examples in previous sections. ');
insert into py276_translations values (6760, 222, 'extending/newtypes.html', 'As you can see, the source code closely resembles the <tt class="xref py py-class docutils literal"><span class="pre">Noddy</span></tt> examples in previous sections. ', 0, 0);
insert into py276_sentences values (4761, 223, 'extending/newtypes.html', 'We will break down the main differences between them.', 'We will break down the main differences between them.');
insert into py276_translations values (6761, 223, 'extending/newtypes.html', 'We will break down the main differences between them.', 0, 0);
insert into py276_sentences values (4762, 224, 'extending/newtypes.html', 'The primary difference for derived type objects is that the base type’s object structure must be the first value. ', 'The primary difference for derived type objects is that the base type’s object structure must be the first value. ');
insert into py276_translations values (6762, 224, 'extending/newtypes.html', 'The primary difference for derived type objects is that the base type’s object structure must be the first value. ', 0, 0);
insert into py276_sentences values (4763, 225, 'extending/newtypes.html', 'The base type will already include the <a class="reference internal" href="../c-api/structures.html#PyObject_HEAD" title="PyObject_HEAD"><tt class="xref c c-func docutils literal"><span class="pre">PyObject_HEAD()</span></tt></a> at the beginning of its structure.', 'The base type will already include the <a class="reference internal" href="../c-api/structures.html#PyObject_HEAD" title="PyObject_HEAD"><tt class="xref c c-func docutils literal"><span class="pre">PyObject_HEAD()</span></tt></a> at the beginning of its structure.');
insert into py276_translations values (6763, 225, 'extending/newtypes.html', 'The base type will already include the <a class="reference internal" href="../c-api/structures.html#PyObject_HEAD" title="PyObject_HEAD"><tt class="xref c c-func docutils literal"><span class="pre">PyObject_HEAD()</span></tt></a> at the beginning of its structure.', 0, 0);
insert into py276_sentences values (4764, 226, 'extending/newtypes.html', 'When a Python object is a <tt class="xref py py-class docutils literal"><span class="pre">Shoddy</span></tt> instance, its <em>PyObject*</em> pointer can be safely cast to both <em>PyListObject*</em> and <em>Shoddy*</em>.', 'When a Python object is a <tt class="xref py py-class docutils literal"><span class="pre">Shoddy</span></tt> instance, its <em>PyObject*</em> pointer can be safely cast to both <em>PyListObject*</em> and <em>Shoddy*</em>.');
insert into py276_translations values (6764, 226, 'extending/newtypes.html', 'When a Python object is a <tt class="xref py py-class docutils literal"><span class="pre">Shoddy</span></tt> instance, its <em>PyObject*</em> pointer can be safely cast to both <em>PyListObject*</em> and <em>Shoddy*</em>.', 0, 0);
insert into py276_sentences values (4765, 227, 'extending/newtypes.html', 'In the <tt class="xref py py-attr docutils literal"><span class="pre">__init__</span></tt> method for our type, we can see how to call through to the <tt class="xref py py-attr docutils literal"><span class="pre">__init__</span></tt> method of the base type.', 'In the <tt class="xref py py-attr docutils literal"><span class="pre">__init__</span></tt> method for our type, we can see how to call through to the <tt class="xref py py-attr docutils literal"><span class="pre">__init__</span></tt> method of the base type.');
insert into py276_translations values (6765, 227, 'extending/newtypes.html', 'In the <tt class="xref py py-attr docutils literal"><span class="pre">__init__</span></tt> method for our type, we can see how to call through to the <tt class="xref py py-attr docutils literal"><span class="pre">__init__</span></tt> method of the base type.', 0, 0);
insert into py276_sentences values (4766, 228, 'extending/newtypes.html', 'This pattern is important when writing a type with custom <a class="reference internal" href="../library/new.html#module-new" title="new: Interface to the creation of runtime implementation objects. (deprecated)"><tt class="xref py py-attr docutils literal"><span class="pre">new</span></tt></a> and <tt class="xref py py-attr docutils literal"><span class="pre">dealloc</span></tt> methods. ', 'This pattern is important when writing a type with custom <a class="reference internal" href="../library/new.html#module-new" title="new: Interface to the creation of runtime implementation objects. (deprecated)"><tt class="xref py py-attr docutils literal"><span class="pre">new</span></tt></a> and <tt class="xref py py-attr docutils literal"><span class="pre">dealloc</span></tt> methods. ');
insert into py276_translations values (6766, 228, 'extending/newtypes.html', 'This pattern is important when writing a type with custom <a class="reference internal" href="../library/new.html#module-new" title="new: Interface to the creation of runtime implementation objects. (deprecated)"><tt class="xref py py-attr docutils literal"><span class="pre">new</span></tt></a> and <tt class="xref py py-attr docutils literal"><span class="pre">dealloc</span></tt> methods. ', 0, 0);
insert into py276_sentences values (4767, 229, 'extending/newtypes.html', 'The <a class="reference internal" href="../library/new.html#module-new" title="new: Interface to the creation of runtime implementation objects. (deprecated)"><tt class="xref py py-attr docutils literal"><span class="pre">new</span></tt></a> method should not actually create the memory for the object with <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_alloc" title="PyTypeObject.tp_alloc"><tt class="xref c c-member docutils literal"><span class="pre">tp_alloc</span></tt></a>, that will be handled by the base class when calling its <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_new" title="PyTypeObject.tp_new"><tt class="xref c c-member docutils literal"><span class="pre">tp_new</span></tt></a>.', 'The <a class="reference internal" href="../library/new.html#module-new" title="new: Interface to the creation of runtime implementation objects. (deprecated)"><tt class="xref py py-attr docutils literal"><span class="pre">new</span></tt></a> method should not actually create the memory for the object with <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_alloc" title="PyTypeObject.tp_alloc"><tt class="xref c c-member docutils literal"><span class="pre">tp_alloc</span></tt></a>, that will be handled by the base class when calling its <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_new" title="PyTypeObject.tp_new"><tt class="xref c c-member docutils literal"><span class="pre">tp_new</span></tt></a>.');
insert into py276_translations values (6767, 229, 'extending/newtypes.html', 'The <a class="reference internal" href="../library/new.html#module-new" title="new: Interface to the creation of runtime implementation objects. (deprecated)"><tt class="xref py py-attr docutils literal"><span class="pre">new</span></tt></a> method should not actually create the memory for the object with <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_alloc" title="PyTypeObject.tp_alloc"><tt class="xref c c-member docutils literal"><span class="pre">tp_alloc</span></tt></a>, that will be handled by the base class when calling its <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_new" title="PyTypeObject.tp_new"><tt class="xref c c-member docutils literal"><span class="pre">tp_new</span></tt></a>.', 0, 0);
insert into py276_sentences values (4768, 230, 'extending/newtypes.html', 'When filling out the <a class="reference internal" href="../c-api/type.html#PyTypeObject" title="PyTypeObject"><tt class="xref c c-func docutils literal"><span class="pre">PyTypeObject()</span></tt></a> for the <tt class="xref py py-class docutils literal"><span class="pre">Shoddy</span></tt> type, you see a slot for <tt class="xref c c-func docutils literal"><span class="pre">tp_base()</span></tt>. ', 'When filling out the <a class="reference internal" href="../c-api/type.html#PyTypeObject" title="PyTypeObject"><tt class="xref c c-func docutils literal"><span class="pre">PyTypeObject()</span></tt></a> for the <tt class="xref py py-class docutils literal"><span class="pre">Shoddy</span></tt> type, you see a slot for <tt class="xref c c-func docutils literal"><span class="pre">tp_base()</span></tt>. ');
insert into py276_translations values (6768, 230, 'extending/newtypes.html', 'When filling out the <a class="reference internal" href="../c-api/type.html#PyTypeObject" title="PyTypeObject"><tt class="xref c c-func docutils literal"><span class="pre">PyTypeObject()</span></tt></a> for the <tt class="xref py py-class docutils literal"><span class="pre">Shoddy</span></tt> type, you see a slot for <tt class="xref c c-func docutils literal"><span class="pre">tp_base()</span></tt>. ', 0, 0);
insert into py276_sentences values (4769, 231, 'extending/newtypes.html', 'Due to cross platform compiler issues, you can’t fill that field directly with the <a class="reference internal" href="../c-api/list.html#PyList_Type" title="PyList_Type"><tt class="xref c c-func docutils literal"><span class="pre">PyList_Type()</span></tt></a>; ', 'Due to cross platform compiler issues, you can’t fill that field directly with the <a class="reference internal" href="../c-api/list.html#PyList_Type" title="PyList_Type"><tt class="xref c c-func docutils literal"><span class="pre">PyList_Type()</span></tt></a>; ');
insert into py276_translations values (6769, 231, 'extending/newtypes.html', 'Due to cross platform compiler issues, you can’t fill that field directly with the <a class="reference internal" href="../c-api/list.html#PyList_Type" title="PyList_Type"><tt class="xref c c-func docutils literal"><span class="pre">PyList_Type()</span></tt></a>; ', 0, 0);
insert into py276_sentences values (4770, 232, 'extending/newtypes.html', 'it can be done later in the module’s <tt class="xref c c-func docutils literal"><span class="pre">init()</span></tt> function.', 'it can be done later in the module’s <tt class="xref c c-func docutils literal"><span class="pre">init()</span></tt> function.');
insert into py276_translations values (6770, 232, 'extending/newtypes.html', 'it can be done later in the module’s <tt class="xref c c-func docutils literal"><span class="pre">init()</span></tt> function.', 0, 0);
insert into py276_sentences values (4771, 233, 'extending/newtypes.html', 'Before calling <a class="reference internal" href="../c-api/type.html#PyType_Ready" title="PyType_Ready"><tt class="xref c c-func docutils literal"><span class="pre">PyType_Ready()</span></tt></a>, the type structure must have the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_base" title="PyTypeObject.tp_base"><tt class="xref c c-member docutils literal"><span class="pre">tp_base</span></tt></a> slot filled in. ', 'Before calling <a class="reference internal" href="../c-api/type.html#PyType_Ready" title="PyType_Ready"><tt class="xref c c-func docutils literal"><span class="pre">PyType_Ready()</span></tt></a>, the type structure must have the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_base" title="PyTypeObject.tp_base"><tt class="xref c c-member docutils literal"><span class="pre">tp_base</span></tt></a> slot filled in. ');
insert into py276_translations values (6771, 233, 'extending/newtypes.html', 'Before calling <a class="reference internal" href="../c-api/type.html#PyType_Ready" title="PyType_Ready"><tt class="xref c c-func docutils literal"><span class="pre">PyType_Ready()</span></tt></a>, the type structure must have the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_base" title="PyTypeObject.tp_base"><tt class="xref c c-member docutils literal"><span class="pre">tp_base</span></tt></a> slot filled in. ', 0, 0);
insert into py276_sentences values (4772, 234, 'extending/newtypes.html', 'When we are deriving a new type, it is not necessary to fill out the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_alloc" title="PyTypeObject.tp_alloc"><tt class="xref c c-member docutils literal"><span class="pre">tp_alloc</span></tt></a> slot with <a class="reference internal" href="../c-api/type.html#PyType_GenericNew" title="PyType_GenericNew"><tt class="xref c c-func docutils literal"><span class="pre">PyType_GenericNew()</span></tt></a> – the allocate function from the base type will be inherited.', 'When we are deriving a new type, it is not necessary to fill out the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_alloc" title="PyTypeObject.tp_alloc"><tt class="xref c c-member docutils literal"><span class="pre">tp_alloc</span></tt></a> slot with <a class="reference internal" href="../c-api/type.html#PyType_GenericNew" title="PyType_GenericNew"><tt class="xref c c-func docutils literal"><span class="pre">PyType_GenericNew()</span></tt></a> – the allocate function from the base type will be inherited.');
insert into py276_translations values (6772, 234, 'extending/newtypes.html', 'When we are deriving a new type, it is not necessary to fill out the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_alloc" title="PyTypeObject.tp_alloc"><tt class="xref c c-member docutils literal"><span class="pre">tp_alloc</span></tt></a> slot with <a class="reference internal" href="../c-api/type.html#PyType_GenericNew" title="PyType_GenericNew"><tt class="xref c c-func docutils literal"><span class="pre">PyType_GenericNew()</span></tt></a> – the allocate function from the base type will be inherited.', 0, 0);
insert into py276_sentences values (4773, 235, 'extending/newtypes.html', 'After that, calling <a class="reference internal" href="../c-api/type.html#PyType_Ready" title="PyType_Ready"><tt class="xref c c-func docutils literal"><span class="pre">PyType_Ready()</span></tt></a> and adding the type object to the module is the same as with the basic <tt class="xref py py-class docutils literal"><span class="pre">Noddy</span></tt> examples.', 'After that, calling <a class="reference internal" href="../c-api/type.html#PyType_Ready" title="PyType_Ready"><tt class="xref c c-func docutils literal"><span class="pre">PyType_Ready()</span></tt></a> and adding the type object to the module is the same as with the basic <tt class="xref py py-class docutils literal"><span class="pre">Noddy</span></tt> examples.');
insert into py276_translations values (6773, 235, 'extending/newtypes.html', 'After that, calling <a class="reference internal" href="../c-api/type.html#PyType_Ready" title="PyType_Ready"><tt class="xref c c-func docutils literal"><span class="pre">PyType_Ready()</span></tt></a> and adding the type object to the module is the same as with the basic <tt class="xref py py-class docutils literal"><span class="pre">Noddy</span></tt> examples.', 0, 0);
insert into py276_sentences values (4774, 236, 'extending/newtypes.html', 'This section aims to give a quick fly-by on the various type methods you can implement and what they do.', 'This section aims to give a quick fly-by on the various type methods you can implement and what they do.');
insert into py276_translations values (6774, 236, 'extending/newtypes.html', 'This section aims to give a quick fly-by on the various type methods you can implement and what they do.', 0, 0);
insert into py276_sentences values (4775, 237, 'extending/newtypes.html', 'Here is the definition of <a class="reference internal" href="../c-api/type.html#PyTypeObject" title="PyTypeObject"><tt class="xref c c-type docutils literal"><span class="pre">PyTypeObject</span></tt></a>, with some fields only used in debug builds omitted:', 'Here is the definition of <a class="reference internal" href="../c-api/type.html#PyTypeObject" title="PyTypeObject"><tt class="xref c c-type docutils literal"><span class="pre">PyTypeObject</span></tt></a>, with some fields only used in debug builds omitted:');
insert into py276_translations values (6775, 237, 'extending/newtypes.html', 'Here is the definition of <a class="reference internal" href="../c-api/type.html#PyTypeObject" title="PyTypeObject"><tt class="xref c c-type docutils literal"><span class="pre">PyTypeObject</span></tt></a>, with some fields only used in debug builds omitted:', 0, 0);
insert into py276_sentences values (4776, 238, 'extending/newtypes.html', 'Now that’s a <em>lot</em> of methods. ', 'Now that’s a <em>lot</em> of methods. ');
insert into py276_translations values (6776, 238, 'extending/newtypes.html', 'Now that’s a <em>lot</em> of methods. ', 0, 0);
insert into py276_sentences values (4777, 239, 'extending/newtypes.html', 'Don’t worry too much though - if you have a type you want to define, the chances are very good that you will only implement a handful of these.', 'Don’t worry too much though - if you have a type you want to define, the chances are very good that you will only implement a handful of these.');
insert into py276_translations values (6777, 239, 'extending/newtypes.html', 'Don’t worry too much though - if you have a type you want to define, the chances are very good that you will only implement a handful of these.', 0, 0);
insert into py276_sentences values (4778, 240, 'extending/newtypes.html', 'As you probably expect by now, we’re going to go over this and give more information about the various handlers. ', 'As you probably expect by now, we’re going to go over this and give more information about the various handlers. ');
insert into py276_translations values (6778, 240, 'extending/newtypes.html', 'As you probably expect by now, we’re going to go over this and give more information about the various handlers. ', 0, 0);
insert into py276_sentences values (4779, 241, 'extending/newtypes.html', 'We won’t go in the order they are defined in the structure, because there is a lot of historical baggage that impacts the ordering of the fields; ', 'We won’t go in the order they are defined in the structure, because there is a lot of historical baggage that impacts the ordering of the fields; ');
insert into py276_translations values (6779, 241, 'extending/newtypes.html', 'We won’t go in the order they are defined in the structure, because there is a lot of historical baggage that impacts the ordering of the fields; ', 0, 0);
insert into py276_sentences values (4780, 242, 'extending/newtypes.html', 'be sure your type initialization keeps the fields in the right order! ', 'be sure your type initialization keeps the fields in the right order! ');
insert into py276_translations values (6780, 242, 'extending/newtypes.html', 'be sure your type initialization keeps the fields in the right order! ', 0, 0);
insert into py276_sentences values (4781, 243, 'extending/newtypes.html', 'It’s often easiest to find an example that includes all the fields you need (even if they’re initialized to <tt class="docutils literal"><span class="pre">0</span></tt>) and then change the values to suit your new type.', 'It’s often easiest to find an example that includes all the fields you need (even if they’re initialized to <tt class="docutils literal"><span class="pre">0</span></tt>) and then change the values to suit your new type.');
insert into py276_translations values (6781, 243, 'extending/newtypes.html', 'It’s often easiest to find an example that includes all the fields you need (even if they’re initialized to <tt class="docutils literal"><span class="pre">0</span></tt>) and then change the values to suit your new type.', 0, 0);
insert into py276_sentences values (4782, 244, 'extending/newtypes.html', 'The name of the type - as mentioned in the last section, this will appear in various places, almost entirely for diagnostic purposes. ', 'The name of the type - as mentioned in the last section, this will appear in various places, almost entirely for diagnostic purposes. ');
insert into py276_translations values (6782, 244, 'extending/newtypes.html', 'The name of the type - as mentioned in the last section, this will appear in various places, almost entirely for diagnostic purposes. ', 0, 0);
insert into py276_sentences values (4783, 245, 'extending/newtypes.html', 'Try to choose something that will be helpful in such a situation!', 'Try to choose something that will be helpful in such a situation!');
insert into py276_translations values (6783, 245, 'extending/newtypes.html', 'Try to choose something that will be helpful in such a situation!', 0, 0);
insert into py276_sentences values (4784, 246, 'extending/newtypes.html', 'These fields tell the runtime how much memory to allocate when new objects of this type are created. ', 'These fields tell the runtime how much memory to allocate when new objects of this type are created. ');
insert into py276_translations values (6784, 246, 'extending/newtypes.html', 'These fields tell the runtime how much memory to allocate when new objects of this type are created. ', 0, 0);
insert into py276_sentences values (4785, 247, 'extending/newtypes.html', 'Python has some built-in support for variable length structures (think: strings, lists) which is where the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_itemsize" title="PyTypeObject.tp_itemsize"><tt class="xref c c-member docutils literal"><span class="pre">tp_itemsize</span></tt></a> field comes in. ', 'Python has some built-in support for variable length structures (think: strings, lists) which is where the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_itemsize" title="PyTypeObject.tp_itemsize"><tt class="xref c c-member docutils literal"><span class="pre">tp_itemsize</span></tt></a> field comes in. ');
insert into py276_translations values (6785, 247, 'extending/newtypes.html', 'Python has some built-in support for variable length structures (think: strings, lists) which is where the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_itemsize" title="PyTypeObject.tp_itemsize"><tt class="xref c c-member docutils literal"><span class="pre">tp_itemsize</span></tt></a> field comes in. ', 0, 0);
insert into py276_sentences values (4786, 248, 'extending/newtypes.html', 'This will be dealt with later.', 'This will be dealt with later.');
insert into py276_translations values (6786, 248, 'extending/newtypes.html', 'This will be dealt with later.', 0, 0);
insert into py276_sentences values (4787, 249, 'extending/newtypes.html', 'Here you can put a string (or its address) that you want returned when the Python script references <tt class="docutils literal"><span class="pre">obj.__doc__</span></tt> to retrieve the doc string.', 'Here you can put a string (or its address) that you want returned when the Python script references <tt class="docutils literal"><span class="pre">obj.__doc__</span></tt> to retrieve the doc string.');
insert into py276_translations values (6787, 249, 'extending/newtypes.html', 'Here you can put a string (or its address) that you want returned when the Python script references <tt class="docutils literal"><span class="pre">obj.__doc__</span></tt> to retrieve the doc string.', 0, 0);
insert into py276_sentences values (4788, 250, 'extending/newtypes.html', 'Now we come to the basic type methods—the ones most extension types will implement.', 'Now we come to the basic type methods—the ones most extension types will implement.');
insert into py276_translations values (6788, 250, 'extending/newtypes.html', 'Now we come to the basic type methods—the ones most extension types will implement.', 0, 0);
insert into py276_sentences values (4789, 251, 'extending/newtypes.html', 'This function is called when the reference count of the instance of your type is reduced to zero and the Python interpreter wants to reclaim it. ', 'This function is called when the reference count of the instance of your type is reduced to zero and the Python interpreter wants to reclaim it. ');
insert into py276_translations values (6789, 251, 'extending/newtypes.html', 'This function is called when the reference count of the instance of your type is reduced to zero and the Python interpreter wants to reclaim it. ', 0, 0);
insert into py276_sentences values (4790, 252, 'extending/newtypes.html', 'If your type has memory to free or other clean-up to perform, put it here. ', 'If your type has memory to free or other clean-up to perform, put it here. ');
insert into py276_translations values (6790, 252, 'extending/newtypes.html', 'If your type has memory to free or other clean-up to perform, put it here. ', 0, 0);
insert into py276_sentences values (4791, 253, 'extending/newtypes.html', 'The object itself needs to be freed here as well. ', 'The object itself needs to be freed here as well. ');
insert into py276_translations values (6791, 253, 'extending/newtypes.html', 'The object itself needs to be freed here as well. ', 0, 0);
insert into py276_sentences values (4792, 254, 'extending/newtypes.html', 'Here is an example of this function:', 'Here is an example of this function:');
insert into py276_translations values (6792, 254, 'extending/newtypes.html', 'Here is an example of this function:', 0, 0);
insert into py276_sentences values (4793, 255, 'extending/newtypes.html', 'One important requirement of the deallocator function is that it leaves any pending exceptions alone. ', 'One important requirement of the deallocator function is that it leaves any pending exceptions alone. ');
insert into py276_translations values (6793, 255, 'extending/newtypes.html', 'One important requirement of the deallocator function is that it leaves any pending exceptions alone. ', 0, 0);
insert into py276_sentences values (4794, 256, 'extending/newtypes.html', 'This is important since deallocators are frequently called as the interpreter unwinds the Python stack; ', 'This is important since deallocators are frequently called as the interpreter unwinds the Python stack; ');
insert into py276_translations values (6794, 256, 'extending/newtypes.html', 'This is important since deallocators are frequently called as the interpreter unwinds the Python stack; ', 0, 0);
insert into py276_sentences values (4795, 257, 'extending/newtypes.html', 'when the stack is unwound due to an exception (rather than normal returns), nothing is done to protect the deallocators from seeing that an exception has already been set. ', 'when the stack is unwound due to an exception (rather than normal returns), nothing is done to protect the deallocators from seeing that an exception has already been set. ');
insert into py276_translations values (6795, 257, 'extending/newtypes.html', 'when the stack is unwound due to an exception (rather than normal returns), nothing is done to protect the deallocators from seeing that an exception has already been set. ', 0, 0);
insert into py276_sentences values (4796, 258, 'extending/newtypes.html', 'Any actions which a deallocator performs which may cause additional Python code to be executed may detect that an exception has been set. ', 'Any actions which a deallocator performs which may cause additional Python code to be executed may detect that an exception has been set. ');
insert into py276_translations values (6796, 258, 'extending/newtypes.html', 'Any actions which a deallocator performs which may cause additional Python code to be executed may detect that an exception has been set. ', 0, 0);
insert into py276_sentences values (4797, 259, 'extending/newtypes.html', 'This can lead to misleading errors from the interpreter. ', 'This can lead to misleading errors from the interpreter. ');
insert into py276_translations values (6797, 259, 'extending/newtypes.html', 'This can lead to misleading errors from the interpreter. ', 0, 0);
insert into py276_sentences values (4798, 260, 'extending/newtypes.html', 'The proper way to protect against this is to save a pending exception before performing the unsafe action, and restoring it when done. ', 'The proper way to protect against this is to save a pending exception before performing the unsafe action, and restoring it when done. ');
insert into py276_translations values (6798, 260, 'extending/newtypes.html', 'The proper way to protect against this is to save a pending exception before performing the unsafe action, and restoring it when done. ', 0, 0);
insert into py276_sentences values (4799, 261, 'extending/newtypes.html', 'This can be done using the <a class="reference internal" href="../c-api/exceptions.html#PyErr_Fetch" title="PyErr_Fetch"><tt class="xref c c-func docutils literal"><span class="pre">PyErr_Fetch()</span></tt></a> and <a class="reference internal" href="../c-api/exceptions.html#PyErr_Restore" title="PyErr_Restore"><tt class="xref c c-func docutils literal"><span class="pre">PyErr_Restore()</span></tt></a> functions:', 'This can be done using the <a class="reference internal" href="../c-api/exceptions.html#PyErr_Fetch" title="PyErr_Fetch"><tt class="xref c c-func docutils literal"><span class="pre">PyErr_Fetch()</span></tt></a> and <a class="reference internal" href="../c-api/exceptions.html#PyErr_Restore" title="PyErr_Restore"><tt class="xref c c-func docutils literal"><span class="pre">PyErr_Restore()</span></tt></a> functions:');
insert into py276_translations values (6799, 261, 'extending/newtypes.html', 'This can be done using the <a class="reference internal" href="../c-api/exceptions.html#PyErr_Fetch" title="PyErr_Fetch"><tt class="xref c c-func docutils literal"><span class="pre">PyErr_Fetch()</span></tt></a> and <a class="reference internal" href="../c-api/exceptions.html#PyErr_Restore" title="PyErr_Restore"><tt class="xref c c-func docutils literal"><span class="pre">PyErr_Restore()</span></tt></a> functions:', 0, 0);
insert into py276_sentences values (4800, 262, 'extending/newtypes.html', 'In Python, there are three ways to generate a textual representation of an object: the <a class="reference internal" href="../library/repr.html#module-repr" title="repr: Alternate repr() implementation with size limits."><tt class="xref py py-func docutils literal"><span class="pre">repr()</span></tt></a> function (or equivalent back-tick syntax), the <a class="reference internal" href="../library/functions.html#str" title="str"><tt class="xref py py-func docutils literal"><span class="pre">str()</span></tt></a> function, and the <a class="reference internal" href="../reference/simple_stmts.html#print"><tt class="xref std std-keyword docutils literal"><span class="pre">print</span></tt></a> statement. ', 'In Python, there are three ways to generate a textual representation of an object: the <a class="reference internal" href="../library/repr.html#module-repr" title="repr: Alternate repr() implementation with size limits."><tt class="xref py py-func docutils literal"><span class="pre">repr()</span></tt></a> function (or equivalent back-tick syntax), the <a class="reference internal" href="../library/functions.html#str" title="str"><tt class="xref py py-func docutils literal"><span class="pre">str()</span></tt></a> function, and the <a class="reference internal" href="../reference/simple_stmts.html#print"><tt class="xref std std-keyword docutils literal"><span class="pre">print</span></tt></a> statement. ');
insert into py276_translations values (6800, 262, 'extending/newtypes.html', 'In Python, there are three ways to generate a textual representation of an object: the <a class="reference internal" href="../library/repr.html#module-repr" title="repr: Alternate repr() implementation with size limits."><tt class="xref py py-func docutils literal"><span class="pre">repr()</span></tt></a> function (or equivalent back-tick syntax), the <a class="reference internal" href="../library/functions.html#str" title="str"><tt class="xref py py-func docutils literal"><span class="pre">str()</span></tt></a> function, and the <a class="reference internal" href="../reference/simple_stmts.html#print"><tt class="xref std std-keyword docutils literal"><span class="pre">print</span></tt></a> statement. ', 0, 0);
insert into py276_sentences values (4801, 263, 'extending/newtypes.html', 'For most objects, the <a class="reference internal" href="../reference/simple_stmts.html#print"><tt class="xref std std-keyword docutils literal"><span class="pre">print</span></tt></a> statement is equivalent to the <a class="reference internal" href="../library/functions.html#str" title="str"><tt class="xref py py-func docutils literal"><span class="pre">str()</span></tt></a> function, but it is possible to special-case printing to a <tt class="xref c c-type docutils literal"><span class="pre">FILE*</span></tt> if necessary; ', 'For most objects, the <a class="reference internal" href="../reference/simple_stmts.html#print"><tt class="xref std std-keyword docutils literal"><span class="pre">print</span></tt></a> statement is equivalent to the <a class="reference internal" href="../library/functions.html#str" title="str"><tt class="xref py py-func docutils literal"><span class="pre">str()</span></tt></a> function, but it is possible to special-case printing to a <tt class="xref c c-type docutils literal"><span class="pre">FILE*</span></tt> if necessary; ');
insert into py276_translations values (6801, 263, 'extending/newtypes.html', 'For most objects, the <a class="reference internal" href="../reference/simple_stmts.html#print"><tt class="xref std std-keyword docutils literal"><span class="pre">print</span></tt></a> statement is equivalent to the <a class="reference internal" href="../library/functions.html#str" title="str"><tt class="xref py py-func docutils literal"><span class="pre">str()</span></tt></a> function, but it is possible to special-case printing to a <tt class="xref c c-type docutils literal"><span class="pre">FILE*</span></tt> if necessary; ', 0, 0);
insert into py276_sentences values (4802, 264, 'extending/newtypes.html', 'this should only be done if efficiency is identified as a problem and profiling suggests that creating a temporary string object to be written to a file is too expensive.', 'this should only be done if efficiency is identified as a problem and profiling suggests that creating a temporary string object to be written to a file is too expensive.');
insert into py276_translations values (6802, 264, 'extending/newtypes.html', 'this should only be done if efficiency is identified as a problem and profiling suggests that creating a temporary string object to be written to a file is too expensive.', 0, 0);
insert into py276_sentences values (4803, 265, 'extending/newtypes.html', 'These handlers are all optional, and most types at most need to implement the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_str" title="PyTypeObject.tp_str"><tt class="xref c c-member docutils literal"><span class="pre">tp_str</span></tt></a> and <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_repr" title="PyTypeObject.tp_repr"><tt class="xref c c-member docutils literal"><span class="pre">tp_repr</span></tt></a> handlers.', 'These handlers are all optional, and most types at most need to implement the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_str" title="PyTypeObject.tp_str"><tt class="xref c c-member docutils literal"><span class="pre">tp_str</span></tt></a> and <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_repr" title="PyTypeObject.tp_repr"><tt class="xref c c-member docutils literal"><span class="pre">tp_repr</span></tt></a> handlers.');
insert into py276_translations values (6803, 265, 'extending/newtypes.html', 'These handlers are all optional, and most types at most need to implement the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_str" title="PyTypeObject.tp_str"><tt class="xref c c-member docutils literal"><span class="pre">tp_str</span></tt></a> and <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_repr" title="PyTypeObject.tp_repr"><tt class="xref c c-member docutils literal"><span class="pre">tp_repr</span></tt></a> handlers.', 0, 0);
insert into py276_sentences values (4804, 266, 'extending/newtypes.html', 'The <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_repr" title="PyTypeObject.tp_repr"><tt class="xref c c-member docutils literal"><span class="pre">tp_repr</span></tt></a> handler should return a string object containing a representation of the instance for which it is called. ', 'The <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_repr" title="PyTypeObject.tp_repr"><tt class="xref c c-member docutils literal"><span class="pre">tp_repr</span></tt></a> handler should return a string object containing a representation of the instance for which it is called. ');
insert into py276_translations values (6804, 266, 'extending/newtypes.html', 'The <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_repr" title="PyTypeObject.tp_repr"><tt class="xref c c-member docutils literal"><span class="pre">tp_repr</span></tt></a> handler should return a string object containing a representation of the instance for which it is called. ', 0, 0);
insert into py276_sentences values (4805, 267, 'extending/newtypes.html', 'Here is a simple example:', 'Here is a simple example:');
insert into py276_translations values (6805, 267, 'extending/newtypes.html', 'Here is a simple example:', 0, 0);
insert into py276_sentences values (4806, 268, 'extending/newtypes.html', 'If no <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_repr" title="PyTypeObject.tp_repr"><tt class="xref c c-member docutils literal"><span class="pre">tp_repr</span></tt></a> handler is specified, the interpreter will supply a representation that uses the type’s <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_name" title="PyTypeObject.tp_name"><tt class="xref c c-member docutils literal"><span class="pre">tp_name</span></tt></a> and a uniquely-identifying value for the object.', 'If no <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_repr" title="PyTypeObject.tp_repr"><tt class="xref c c-member docutils literal"><span class="pre">tp_repr</span></tt></a> handler is specified, the interpreter will supply a representation that uses the type’s <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_name" title="PyTypeObject.tp_name"><tt class="xref c c-member docutils literal"><span class="pre">tp_name</span></tt></a> and a uniquely-identifying value for the object.');
insert into py276_translations values (6806, 268, 'extending/newtypes.html', 'If no <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_repr" title="PyTypeObject.tp_repr"><tt class="xref c c-member docutils literal"><span class="pre">tp_repr</span></tt></a> handler is specified, the interpreter will supply a representation that uses the type’s <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_name" title="PyTypeObject.tp_name"><tt class="xref c c-member docutils literal"><span class="pre">tp_name</span></tt></a> and a uniquely-identifying value for the object.', 0, 0);
insert into py276_sentences values (4807, 269, 'extending/newtypes.html', 'The <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_str" title="PyTypeObject.tp_str"><tt class="xref c c-member docutils literal"><span class="pre">tp_str</span></tt></a> handler is to <a class="reference internal" href="../library/functions.html#str" title="str"><tt class="xref py py-func docutils literal"><span class="pre">str()</span></tt></a> what the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_repr" title="PyTypeObject.tp_repr"><tt class="xref c c-member docutils literal"><span class="pre">tp_repr</span></tt></a> handler described above is to <a class="reference internal" href="../library/repr.html#module-repr" title="repr: Alternate repr() implementation with size limits."><tt class="xref py py-func docutils literal"><span class="pre">repr()</span></tt></a>; ', 'The <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_str" title="PyTypeObject.tp_str"><tt class="xref c c-member docutils literal"><span class="pre">tp_str</span></tt></a> handler is to <a class="reference internal" href="../library/functions.html#str" title="str"><tt class="xref py py-func docutils literal"><span class="pre">str()</span></tt></a> what the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_repr" title="PyTypeObject.tp_repr"><tt class="xref c c-member docutils literal"><span class="pre">tp_repr</span></tt></a> handler described above is to <a class="reference internal" href="../library/repr.html#module-repr" title="repr: Alternate repr() implementation with size limits."><tt class="xref py py-func docutils literal"><span class="pre">repr()</span></tt></a>; ');
insert into py276_translations values (6807, 269, 'extending/newtypes.html', 'The <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_str" title="PyTypeObject.tp_str"><tt class="xref c c-member docutils literal"><span class="pre">tp_str</span></tt></a> handler is to <a class="reference internal" href="../library/functions.html#str" title="str"><tt class="xref py py-func docutils literal"><span class="pre">str()</span></tt></a> what the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_repr" title="PyTypeObject.tp_repr"><tt class="xref c c-member docutils literal"><span class="pre">tp_repr</span></tt></a> handler described above is to <a class="reference internal" href="../library/repr.html#module-repr" title="repr: Alternate repr() implementation with size limits."><tt class="xref py py-func docutils literal"><span class="pre">repr()</span></tt></a>; ', 0, 0);
insert into py276_sentences values (4808, 270, 'extending/newtypes.html', 'that is, it is called when Python code calls <a class="reference internal" href="../library/functions.html#str" title="str"><tt class="xref py py-func docutils literal"><span class="pre">str()</span></tt></a> on an instance of your object. ', 'that is, it is called when Python code calls <a class="reference internal" href="../library/functions.html#str" title="str"><tt class="xref py py-func docutils literal"><span class="pre">str()</span></tt></a> on an instance of your object. ');
insert into py276_translations values (6808, 270, 'extending/newtypes.html', 'that is, it is called when Python code calls <a class="reference internal" href="../library/functions.html#str" title="str"><tt class="xref py py-func docutils literal"><span class="pre">str()</span></tt></a> on an instance of your object. ', 0, 0);
insert into py276_sentences values (4809, 271, 'extending/newtypes.html', 'Its implementation is very similar to the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_repr" title="PyTypeObject.tp_repr"><tt class="xref c c-member docutils literal"><span class="pre">tp_repr</span></tt></a> function, but the resulting string is intended for human consumption. ', 'Its implementation is very similar to the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_repr" title="PyTypeObject.tp_repr"><tt class="xref c c-member docutils literal"><span class="pre">tp_repr</span></tt></a> function, but the resulting string is intended for human consumption. ');
insert into py276_translations values (6809, 271, 'extending/newtypes.html', 'Its implementation is very similar to the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_repr" title="PyTypeObject.tp_repr"><tt class="xref c c-member docutils literal"><span class="pre">tp_repr</span></tt></a> function, but the resulting string is intended for human consumption. ', 0, 0);
insert into py276_sentences values (4810, 272, 'extending/newtypes.html', 'If <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_str" title="PyTypeObject.tp_str"><tt class="xref c c-member docutils literal"><span class="pre">tp_str</span></tt></a> is not specified, the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_repr" title="PyTypeObject.tp_repr"><tt class="xref c c-member docutils literal"><span class="pre">tp_repr</span></tt></a> handler is used instead.', 'If <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_str" title="PyTypeObject.tp_str"><tt class="xref c c-member docutils literal"><span class="pre">tp_str</span></tt></a> is not specified, the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_repr" title="PyTypeObject.tp_repr"><tt class="xref c c-member docutils literal"><span class="pre">tp_repr</span></tt></a> handler is used instead.');
insert into py276_translations values (6810, 272, 'extending/newtypes.html', 'If <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_str" title="PyTypeObject.tp_str"><tt class="xref c c-member docutils literal"><span class="pre">tp_str</span></tt></a> is not specified, the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_repr" title="PyTypeObject.tp_repr"><tt class="xref c c-member docutils literal"><span class="pre">tp_repr</span></tt></a> handler is used instead.', 0, 0);
insert into py276_sentences values (4811, 273, 'extending/newtypes.html', 'Here is a simple example:', 'Here is a simple example:');
insert into py276_translations values (6811, 273, 'extending/newtypes.html', 'Here is a simple example:', 0, 0);
insert into py276_sentences values (4812, 274, 'extending/newtypes.html', 'The print function will be called whenever Python needs to “print” an instance of the type. ', 'The print function will be called whenever Python needs to “print” an instance of the type. ');
insert into py276_translations values (6812, 274, 'extending/newtypes.html', 'The print function will be called whenever Python needs to “print” an instance of the type. ', 0, 0);
insert into py276_sentences values (4813, 275, 'extending/newtypes.html', 'For example, if ‘node’ is an instance of type TreeNode, then the print function is called when Python code calls:', 'For example, if ‘node’ is an instance of type TreeNode, then the print function is called when Python code calls:');
insert into py276_translations values (6813, 275, 'extending/newtypes.html', 'For example, if ‘node’ is an instance of type TreeNode, then the print function is called when Python code calls:', 0, 0);
insert into py276_sentences values (4814, 276, 'extending/newtypes.html', 'There is a flags argument and one flag, <tt class="xref py py-const docutils literal"><span class="pre">Py_PRINT_RAW</span></tt>, and it suggests that you print without string quotes and possibly without interpreting escape sequences.', 'There is a flags argument and one flag, <tt class="xref py py-const docutils literal"><span class="pre">Py_PRINT_RAW</span></tt>, and it suggests that you print without string quotes and possibly without interpreting escape sequences.');
insert into py276_translations values (6814, 276, 'extending/newtypes.html', 'There is a flags argument and one flag, <tt class="xref py py-const docutils literal"><span class="pre">Py_PRINT_RAW</span></tt>, and it suggests that you print without string quotes and possibly without interpreting escape sequences.', 0, 0);
insert into py276_sentences values (4815, 277, 'extending/newtypes.html', 'The print function receives a file object as an argument. ', 'The print function receives a file object as an argument. ');
insert into py276_translations values (6815, 277, 'extending/newtypes.html', 'The print function receives a file object as an argument. ', 0, 0);
insert into py276_sentences values (4816, 278, 'extending/newtypes.html', 'You will likely want to write to that file object.', 'You will likely want to write to that file object.');
insert into py276_translations values (6816, 278, 'extending/newtypes.html', 'You will likely want to write to that file object.', 0, 0);
insert into py276_sentences values (4817, 279, 'extending/newtypes.html', 'Here is a sample print function:', 'Here is a sample print function:');
insert into py276_translations values (6817, 279, 'extending/newtypes.html', 'Here is a sample print function:', 0, 0);
insert into py276_sentences values (4818, 280, 'extending/newtypes.html', 'For every object which can support attributes, the corresponding type must provide the functions that control how the attributes are resolved. ', 'For every object which can support attributes, the corresponding type must provide the functions that control how the attributes are resolved. ');
insert into py276_translations values (6818, 280, 'extending/newtypes.html', 'For every object which can support attributes, the corresponding type must provide the functions that control how the attributes are resolved. ', 0, 0);
insert into py276_sentences values (4819, 281, 'extending/newtypes.html', 'There needs to be a function which can retrieve attributes (if any are defined), and another to set attributes (if setting attributes is allowed). ', 'There needs to be a function which can retrieve attributes (if any are defined), and another to set attributes (if setting attributes is allowed). ');
insert into py276_translations values (6819, 281, 'extending/newtypes.html', 'There needs to be a function which can retrieve attributes (if any are defined), and another to set attributes (if setting attributes is allowed). ', 0, 0);
insert into py276_sentences values (4820, 282, 'extending/newtypes.html', 'Removing an attribute is a special case, for which the new value passed to the handler is <em>NULL</em>.', 'Removing an attribute is a special case, for which the new value passed to the handler is <em>NULL</em>.');
insert into py276_translations values (6820, 282, 'extending/newtypes.html', 'Removing an attribute is a special case, for which the new value passed to the handler is <em>NULL</em>.', 0, 0);
insert into py276_sentences values (4821, 283, 'extending/newtypes.html', 'Python supports two pairs of attribute handlers; ', 'Python supports two pairs of attribute handlers; ');
insert into py276_translations values (6821, 283, 'extending/newtypes.html', 'Python supports two pairs of attribute handlers; ', 0, 0);
insert into py276_sentences values (4822, 284, 'extending/newtypes.html', 'a type that supports attributes only needs to implement the functions for one pair. ', 'a type that supports attributes only needs to implement the functions for one pair. ');
insert into py276_translations values (6822, 284, 'extending/newtypes.html', 'a type that supports attributes only needs to implement the functions for one pair. ', 0, 0);
insert into py276_sentences values (4823, 285, 'extending/newtypes.html', 'The difference is that one pair takes the name of the attribute as a <tt class="xref c c-type docutils literal"><span class="pre">char*</span></tt>, while the other accepts a <a class="reference internal" href="../c-api/structures.html#PyObject" title="PyObject"><tt class="xref c c-type docutils literal"><span class="pre">PyObject*</span></tt></a>. ', 'The difference is that one pair takes the name of the attribute as a <tt class="xref c c-type docutils literal"><span class="pre">char*</span></tt>, while the other accepts a <a class="reference internal" href="../c-api/structures.html#PyObject" title="PyObject"><tt class="xref c c-type docutils literal"><span class="pre">PyObject*</span></tt></a>. ');
insert into py276_translations values (6823, 285, 'extending/newtypes.html', 'The difference is that one pair takes the name of the attribute as a <tt class="xref c c-type docutils literal"><span class="pre">char*</span></tt>, while the other accepts a <a class="reference internal" href="../c-api/structures.html#PyObject" title="PyObject"><tt class="xref c c-type docutils literal"><span class="pre">PyObject*</span></tt></a>. ', 0, 0);
insert into py276_sentences values (4824, 286, 'extending/newtypes.html', 'Each type can use whichever pair makes more sense for the implementation’s convenience.', 'Each type can use whichever pair makes more sense for the implementation’s convenience.');
insert into py276_translations values (6824, 286, 'extending/newtypes.html', 'Each type can use whichever pair makes more sense for the implementation’s convenience.', 0, 0);
insert into py276_sentences values (4825, 287, 'extending/newtypes.html', 'If accessing attributes of an object is always a simple operation (this will be explained shortly), there are generic implementations which can be used to provide the <a class="reference internal" href="../c-api/structures.html#PyObject" title="PyObject"><tt class="xref c c-type docutils literal"><span class="pre">PyObject*</span></tt></a> version of the attribute management functions. ', 'If accessing attributes of an object is always a simple operation (this will be explained shortly), there are generic implementations which can be used to provide the <a class="reference internal" href="../c-api/structures.html#PyObject" title="PyObject"><tt class="xref c c-type docutils literal"><span class="pre">PyObject*</span></tt></a> version of the attribute management functions. ');
insert into py276_translations values (6825, 287, 'extending/newtypes.html', 'If accessing attributes of an object is always a simple operation (this will be explained shortly), there are generic implementations which can be used to provide the <a class="reference internal" href="../c-api/structures.html#PyObject" title="PyObject"><tt class="xref c c-type docutils literal"><span class="pre">PyObject*</span></tt></a> version of the attribute management functions. ', 0, 0);
insert into py276_sentences values (4826, 288, 'extending/newtypes.html', 'The actual need for type-specific attribute handlers almost completely disappeared starting with Python 2.2, though there are many examples which have not been updated to use some of the new generic mechanism that is available.', 'The actual need for type-specific attribute handlers almost completely disappeared starting with Python 2.2, though there are many examples which have not been updated to use some of the new generic mechanism that is available.');
insert into py276_translations values (6826, 288, 'extending/newtypes.html', 'The actual need for type-specific attribute handlers almost completely disappeared starting with Python 2.2, though there are many examples which have not been updated to use some of the new generic mechanism that is available.', 0, 0);
insert into py276_sentences values (4827, 289, 'extending/newtypes.html', ' <span class="versionmodified">New in version 2.2.</span>', ' <span class="versionmodified">New in version 2.2.</span>');
insert into py276_translations values (6827, 289, 'extending/newtypes.html', ' <span class="versionmodified">New in version 2.2.</span>', 0, 0);
insert into py276_sentences values (4828, 290, 'extending/newtypes.html', 'Most extension types only use <em>simple</em> attributes. ', 'Most extension types only use <em>simple</em> attributes. ');
insert into py276_translations values (6828, 290, 'extending/newtypes.html', 'Most extension types only use <em>simple</em> attributes. ', 0, 0);
insert into py276_sentences values (4829, 291, 'extending/newtypes.html', 'So, what makes the attributes simple? ', 'So, what makes the attributes simple? ');
insert into py276_translations values (6829, 291, 'extending/newtypes.html', 'So, what makes the attributes simple? ', 0, 0);
insert into py276_sentences values (4830, 292, 'extending/newtypes.html', 'There are only a couple of conditions that must be met:', 'There are only a couple of conditions that must be met:');
insert into py276_translations values (6830, 292, 'extending/newtypes.html', 'There are only a couple of conditions that must be met:', 0, 0);
insert into py276_sentences values (4831, 293, 'extending/newtypes.html', 'Note that this list does not place any restrictions on the values of the attributes, when the values are computed, or how relevant data is stored.', 'Note that this list does not place any restrictions on the values of the attributes, when the values are computed, or how relevant data is stored.');
insert into py276_translations values (6831, 293, 'extending/newtypes.html', 'Note that this list does not place any restrictions on the values of the attributes, when the values are computed, or how relevant data is stored.', 0, 0);
insert into py276_sentences values (4832, 294, 'extending/newtypes.html', 'When <a class="reference internal" href="../c-api/type.html#PyType_Ready" title="PyType_Ready"><tt class="xref c c-func docutils literal"><span class="pre">PyType_Ready()</span></tt></a> is called, it uses three tables referenced by the type object to create <a class="reference internal" href="../glossary.html#term-descriptor"><em class="xref std std-term">descriptor</em></a>s which are placed in the dictionary of the type object. ', 'When <a class="reference internal" href="../c-api/type.html#PyType_Ready" title="PyType_Ready"><tt class="xref c c-func docutils literal"><span class="pre">PyType_Ready()</span></tt></a> is called, it uses three tables referenced by the type object to create <a class="reference internal" href="../glossary.html#term-descriptor"><em class="xref std std-term">descriptor</em></a>s which are placed in the dictionary of the type object. ');
insert into py276_translations values (6832, 294, 'extending/newtypes.html', 'When <a class="reference internal" href="../c-api/type.html#PyType_Ready" title="PyType_Ready"><tt class="xref c c-func docutils literal"><span class="pre">PyType_Ready()</span></tt></a> is called, it uses three tables referenced by the type object to create <a class="reference internal" href="../glossary.html#term-descriptor"><em class="xref std std-term">descriptor</em></a>s which are placed in the dictionary of the type object. ', 0, 0);
insert into py276_sentences values (4833, 295, 'extending/newtypes.html', 'Each descriptor controls access to one attribute of the instance object. ', 'Each descriptor controls access to one attribute of the instance object. ');
insert into py276_translations values (6833, 295, 'extending/newtypes.html', 'Each descriptor controls access to one attribute of the instance object. ', 0, 0);
insert into py276_sentences values (4834, 296, 'extending/newtypes.html', 'Each of the tables is optional; ', 'Each of the tables is optional; ');
insert into py276_translations values (6834, 296, 'extending/newtypes.html', 'Each of the tables is optional; ', 0, 0);
insert into py276_sentences values (4835, 297, 'extending/newtypes.html', 'if all three are <em>NULL</em>, instances of the type will only have attributes that are inherited from their base type, and should leave the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_getattro" title="PyTypeObject.tp_getattro"><tt class="xref c c-member docutils literal"><span class="pre">tp_getattro</span></tt></a> and <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_setattro" title="PyTypeObject.tp_setattro"><tt class="xref c c-member docutils literal"><span class="pre">tp_setattro</span></tt></a> fields <em>NULL</em> as well, allowing the base type to handle attributes.', 'if all three are <em>NULL</em>, instances of the type will only have attributes that are inherited from their base type, and should leave the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_getattro" title="PyTypeObject.tp_getattro"><tt class="xref c c-member docutils literal"><span class="pre">tp_getattro</span></tt></a> and <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_setattro" title="PyTypeObject.tp_setattro"><tt class="xref c c-member docutils literal"><span class="pre">tp_setattro</span></tt></a> fields <em>NULL</em> as well, allowing the base type to handle attributes.');
insert into py276_translations values (6835, 297, 'extending/newtypes.html', 'if all three are <em>NULL</em>, instances of the type will only have attributes that are inherited from their base type, and should leave the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_getattro" title="PyTypeObject.tp_getattro"><tt class="xref c c-member docutils literal"><span class="pre">tp_getattro</span></tt></a> and <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_setattro" title="PyTypeObject.tp_setattro"><tt class="xref c c-member docutils literal"><span class="pre">tp_setattro</span></tt></a> fields <em>NULL</em> as well, allowing the base type to handle attributes.', 0, 0);
insert into py276_sentences values (4836, 298, 'extending/newtypes.html', 'The tables are declared as three fields of the type object:', 'The tables are declared as three fields of the type object:');
insert into py276_translations values (6836, 298, 'extending/newtypes.html', 'The tables are declared as three fields of the type object:', 0, 0);
insert into py276_sentences values (4837, 299, 'extending/newtypes.html', 'If <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_methods" title="PyTypeObject.tp_methods"><tt class="xref c c-member docutils literal"><span class="pre">tp_methods</span></tt></a> is not <em>NULL</em>, it must refer to an array of <a class="reference internal" href="../c-api/structures.html#PyMethodDef" title="PyMethodDef"><tt class="xref c c-type docutils literal"><span class="pre">PyMethodDef</span></tt></a> structures. ', 'If <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_methods" title="PyTypeObject.tp_methods"><tt class="xref c c-member docutils literal"><span class="pre">tp_methods</span></tt></a> is not <em>NULL</em>, it must refer to an array of <a class="reference internal" href="../c-api/structures.html#PyMethodDef" title="PyMethodDef"><tt class="xref c c-type docutils literal"><span class="pre">PyMethodDef</span></tt></a> structures. ');
insert into py276_translations values (6837, 299, 'extending/newtypes.html', 'If <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_methods" title="PyTypeObject.tp_methods"><tt class="xref c c-member docutils literal"><span class="pre">tp_methods</span></tt></a> is not <em>NULL</em>, it must refer to an array of <a class="reference internal" href="../c-api/structures.html#PyMethodDef" title="PyMethodDef"><tt class="xref c c-type docutils literal"><span class="pre">PyMethodDef</span></tt></a> structures. ', 0, 0);
insert into py276_sentences values (4838, 300, 'extending/newtypes.html', 'Each entry in the table is an instance of this structure:', 'Each entry in the table is an instance of this structure:');
insert into py276_translations values (6838, 300, 'extending/newtypes.html', 'Each entry in the table is an instance of this structure:', 0, 0);
insert into py276_sentences values (4839, 301, 'extending/newtypes.html', 'One entry should be defined for each method provided by the type; ', 'One entry should be defined for each method provided by the type; ');
insert into py276_translations values (6839, 301, 'extending/newtypes.html', 'One entry should be defined for each method provided by the type; ', 0, 0);
insert into py276_sentences values (4840, 302, 'extending/newtypes.html', 'no entries are needed for methods inherited from a base type. ', 'no entries are needed for methods inherited from a base type. ');
insert into py276_translations values (6840, 302, 'extending/newtypes.html', 'no entries are needed for methods inherited from a base type. ', 0, 0);
insert into py276_sentences values (4841, 303, 'extending/newtypes.html', 'One additional entry is needed at the end; ', 'One additional entry is needed at the end; ');
insert into py276_translations values (6841, 303, 'extending/newtypes.html', 'One additional entry is needed at the end; ', 0, 0);
insert into py276_sentences values (4842, 304, 'extending/newtypes.html', 'it is a sentinel that marks the end of the array. ', 'it is a sentinel that marks the end of the array. ');
insert into py276_translations values (6842, 304, 'extending/newtypes.html', 'it is a sentinel that marks the end of the array. ', 0, 0);
insert into py276_sentences values (4843, 305, 'extending/newtypes.html', 'The <tt class="xref py py-attr docutils literal"><span class="pre">ml_name</span></tt> field of the sentinel must be <em>NULL</em>.', 'The <tt class="xref py py-attr docutils literal"><span class="pre">ml_name</span></tt> field of the sentinel must be <em>NULL</em>.');
insert into py276_translations values (6843, 305, 'extending/newtypes.html', 'The <tt class="xref py py-attr docutils literal"><span class="pre">ml_name</span></tt> field of the sentinel must be <em>NULL</em>.', 0, 0);
insert into py276_sentences values (4844, 306, 'extending/newtypes.html', 'XXX Need to refer to some unified discussion of the structure fields, shared with the next section.', 'XXX Need to refer to some unified discussion of the structure fields, shared with the next section.');
insert into py276_translations values (6844, 306, 'extending/newtypes.html', 'XXX Need to refer to some unified discussion of the structure fields, shared with the next section.', 0, 0);
insert into py276_sentences values (4845, 307, 'extending/newtypes.html', 'The second table is used to define attributes which map directly to data stored in the instance. ', 'The second table is used to define attributes which map directly to data stored in the instance. ');
insert into py276_translations values (6845, 307, 'extending/newtypes.html', 'The second table is used to define attributes which map directly to data stored in the instance. ', 0, 0);
insert into py276_sentences values (4846, 308, 'extending/newtypes.html', 'A variety of primitive C types are supported, and access may be read-only or read-write. ', 'A variety of primitive C types are supported, and access may be read-only or read-write. ');
insert into py276_translations values (6846, 308, 'extending/newtypes.html', 'A variety of primitive C types are supported, and access may be read-only or read-write. ', 0, 0);
insert into py276_sentences values (4847, 309, 'extending/newtypes.html', 'The structures in the table are defined as:', 'The structures in the table are defined as:');
insert into py276_translations values (6847, 309, 'extending/newtypes.html', 'The structures in the table are defined as:', 0, 0);
insert into py276_sentences values (4848, 310, 'extending/newtypes.html', 'For each entry in the table, a <a class="reference internal" href="../glossary.html#term-descriptor"><em class="xref std std-term">descriptor</em></a> will be constructed and added to the type which will be able to extract a value from the instance structure. ', 'For each entry in the table, a <a class="reference internal" href="../glossary.html#term-descriptor"><em class="xref std std-term">descriptor</em></a> will be constructed and added to the type which will be able to extract a value from the instance structure. ');
insert into py276_translations values (6848, 310, 'extending/newtypes.html', 'For each entry in the table, a <a class="reference internal" href="../glossary.html#term-descriptor"><em class="xref std std-term">descriptor</em></a> will be constructed and added to the type which will be able to extract a value from the instance structure. ', 0, 0);
insert into py276_sentences values (4849, 311, 'extending/newtypes.html', 'The <a class="reference internal" href="../library/functions.html#type" title="type"><tt class="xref py py-attr docutils literal"><span class="pre">type</span></tt></a> field should contain one of the type codes defined in the <tt class="file docutils literal"><span class="pre">structmember.h</span></tt> header; ', 'The <a class="reference internal" href="../library/functions.html#type" title="type"><tt class="xref py py-attr docutils literal"><span class="pre">type</span></tt></a> field should contain one of the type codes defined in the <tt class="file docutils literal"><span class="pre">structmember.h</span></tt> header; ');
insert into py276_translations values (6849, 311, 'extending/newtypes.html', 'The <a class="reference internal" href="../library/functions.html#type" title="type"><tt class="xref py py-attr docutils literal"><span class="pre">type</span></tt></a> field should contain one of the type codes defined in the <tt class="file docutils literal"><span class="pre">structmember.h</span></tt> header; ', 0, 0);
insert into py276_sentences values (4850, 312, 'extending/newtypes.html', 'the value will be used to determine how to convert Python values to and from C values. ', 'the value will be used to determine how to convert Python values to and from C values. ');
insert into py276_translations values (6850, 312, 'extending/newtypes.html', 'the value will be used to determine how to convert Python values to and from C values. ', 0, 0);
insert into py276_sentences values (4851, 313, 'extending/newtypes.html', 'The <tt class="xref py py-attr docutils literal"><span class="pre">flags</span></tt> field is used to store flags which control how the attribute can be accessed.', 'The <tt class="xref py py-attr docutils literal"><span class="pre">flags</span></tt> field is used to store flags which control how the attribute can be accessed.');
insert into py276_translations values (6851, 313, 'extending/newtypes.html', 'The <tt class="xref py py-attr docutils literal"><span class="pre">flags</span></tt> field is used to store flags which control how the attribute can be accessed.', 0, 0);
insert into py276_sentences values (4852, 314, 'extending/newtypes.html', 'XXX Need to move some of this to a shared section!', 'XXX Need to move some of this to a shared section!');
insert into py276_translations values (6852, 314, 'extending/newtypes.html', 'XXX Need to move some of this to a shared section!', 0, 0);
insert into py276_sentences values (4853, 315, 'extending/newtypes.html', 'The following flag constants are defined in <tt class="file docutils literal"><span class="pre">structmember.h</span></tt>; ', 'The following flag constants are defined in <tt class="file docutils literal"><span class="pre">structmember.h</span></tt>; ');
insert into py276_translations values (6853, 315, 'extending/newtypes.html', 'The following flag constants are defined in <tt class="file docutils literal"><span class="pre">structmember.h</span></tt>; ', 0, 0);
insert into py276_sentences values (4854, 316, 'extending/newtypes.html', 'they may be combined using bitwise-OR.', 'they may be combined using bitwise-OR.');
insert into py276_translations values (6854, 316, 'extending/newtypes.html', 'they may be combined using bitwise-OR.', 0, 0);
insert into py276_sentences values (4855, 317, 'extending/newtypes.html', 'An interesting advantage of using the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_members" title="PyTypeObject.tp_members"><tt class="xref c c-member docutils literal"><span class="pre">tp_members</span></tt></a> table to build descriptors that are used at runtime is that any attribute defined this way can have an associated doc string simply by providing the text in the table. ', 'An interesting advantage of using the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_members" title="PyTypeObject.tp_members"><tt class="xref c c-member docutils literal"><span class="pre">tp_members</span></tt></a> table to build descriptors that are used at runtime is that any attribute defined this way can have an associated doc string simply by providing the text in the table. ');
insert into py276_translations values (6855, 317, 'extending/newtypes.html', 'An interesting advantage of using the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_members" title="PyTypeObject.tp_members"><tt class="xref c c-member docutils literal"><span class="pre">tp_members</span></tt></a> table to build descriptors that are used at runtime is that any attribute defined this way can have an associated doc string simply by providing the text in the table. ', 0, 0);
insert into py276_sentences values (4856, 318, 'extending/newtypes.html', 'An application can use the introspection API to retrieve the descriptor from the class object, and get the doc string using its <tt class="xref py py-attr docutils literal"><span class="pre">__doc__</span></tt> attribute.', 'An application can use the introspection API to retrieve the descriptor from the class object, and get the doc string using its <tt class="xref py py-attr docutils literal"><span class="pre">__doc__</span></tt> attribute.');
insert into py276_translations values (6856, 318, 'extending/newtypes.html', 'An application can use the introspection API to retrieve the descriptor from the class object, and get the doc string using its <tt class="xref py py-attr docutils literal"><span class="pre">__doc__</span></tt> attribute.', 0, 0);
insert into py276_sentences values (4857, 319, 'extending/newtypes.html', 'As with the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_methods" title="PyTypeObject.tp_methods"><tt class="xref c c-member docutils literal"><span class="pre">tp_methods</span></tt></a> table, a sentinel entry with a <tt class="xref py py-attr docutils literal"><span class="pre">name</span></tt> value of <em>NULL</em> is required.', 'As with the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_methods" title="PyTypeObject.tp_methods"><tt class="xref c c-member docutils literal"><span class="pre">tp_methods</span></tt></a> table, a sentinel entry with a <tt class="xref py py-attr docutils literal"><span class="pre">name</span></tt> value of <em>NULL</em> is required.');
insert into py276_translations values (6857, 319, 'extending/newtypes.html', 'As with the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_methods" title="PyTypeObject.tp_methods"><tt class="xref c c-member docutils literal"><span class="pre">tp_methods</span></tt></a> table, a sentinel entry with a <tt class="xref py py-attr docutils literal"><span class="pre">name</span></tt> value of <em>NULL</em> is required.', 0, 0);
insert into py276_sentences values (4858, 320, 'extending/newtypes.html', 'For simplicity, only the <tt class="xref c c-type docutils literal"><span class="pre">char*</span></tt> version will be demonstrated here; ', 'For simplicity, only the <tt class="xref c c-type docutils literal"><span class="pre">char*</span></tt> version will be demonstrated here; ');
insert into py276_translations values (6858, 320, 'extending/newtypes.html', 'For simplicity, only the <tt class="xref c c-type docutils literal"><span class="pre">char*</span></tt> version will be demonstrated here; ', 0, 0);
insert into py276_sentences values (4859, 321, 'extending/newtypes.html', 'the type of the name parameter is the only difference between the <tt class="xref c c-type docutils literal"><span class="pre">char*</span></tt> and <a class="reference internal" href="../c-api/structures.html#PyObject" title="PyObject"><tt class="xref c c-type docutils literal"><span class="pre">PyObject*</span></tt></a> flavors of the interface. ', 'the type of the name parameter is the only difference between the <tt class="xref c c-type docutils literal"><span class="pre">char*</span></tt> and <a class="reference internal" href="../c-api/structures.html#PyObject" title="PyObject"><tt class="xref c c-type docutils literal"><span class="pre">PyObject*</span></tt></a> flavors of the interface. ');
insert into py276_translations values (6859, 321, 'extending/newtypes.html', 'the type of the name parameter is the only difference between the <tt class="xref c c-type docutils literal"><span class="pre">char*</span></tt> and <a class="reference internal" href="../c-api/structures.html#PyObject" title="PyObject"><tt class="xref c c-type docutils literal"><span class="pre">PyObject*</span></tt></a> flavors of the interface. ', 0, 0);
insert into py276_sentences values (4860, 322, 'extending/newtypes.html', 'This example effectively does the same thing as the generic example above, but does not use the generic support added in Python 2.2. ', 'This example effectively does the same thing as the generic example above, but does not use the generic support added in Python 2.2. ');
insert into py276_translations values (6860, 322, 'extending/newtypes.html', 'This example effectively does the same thing as the generic example above, but does not use the generic support added in Python 2.2. ', 0, 0);
insert into py276_sentences values (4861, 323, 'extending/newtypes.html', 'The value in showing this is two-fold: it demonstrates how basic attribute management can be done in a way that is portable to older versions of Python, and explains how the handler functions are called, so that if you do need to extend their functionality, you’ll understand what needs to be done.', 'The value in showing this is two-fold: it demonstrates how basic attribute management can be done in a way that is portable to older versions of Python, and explains how the handler functions are called, so that if you do need to extend their functionality, you’ll understand what needs to be done.');
insert into py276_translations values (6861, 323, 'extending/newtypes.html', 'The value in showing this is two-fold: it demonstrates how basic attribute management can be done in a way that is portable to older versions of Python, and explains how the handler functions are called, so that if you do need to extend their functionality, you’ll understand what needs to be done.', 0, 0);
insert into py276_sentences values (4862, 324, 'extending/newtypes.html', 'The <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_getattr" title="PyTypeObject.tp_getattr"><tt class="xref c c-member docutils literal"><span class="pre">tp_getattr</span></tt></a> handler is called when the object requires an attribute look-up. ', 'The <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_getattr" title="PyTypeObject.tp_getattr"><tt class="xref c c-member docutils literal"><span class="pre">tp_getattr</span></tt></a> handler is called when the object requires an attribute look-up. ');
insert into py276_translations values (6862, 324, 'extending/newtypes.html', 'The <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_getattr" title="PyTypeObject.tp_getattr"><tt class="xref c c-member docutils literal"><span class="pre">tp_getattr</span></tt></a> handler is called when the object requires an attribute look-up. ', 0, 0);
insert into py276_sentences values (4863, 325, 'extending/newtypes.html', 'It is called in the same situations where the <a class="reference internal" href="../reference/datamodel.html#object.__getattr__" title="object.__getattr__"><tt class="xref py py-meth docutils literal"><span class="pre">__getattr__()</span></tt></a> method of a class would be called.', 'It is called in the same situations where the <a class="reference internal" href="../reference/datamodel.html#object.__getattr__" title="object.__getattr__"><tt class="xref py py-meth docutils literal"><span class="pre">__getattr__()</span></tt></a> method of a class would be called.');
insert into py276_translations values (6863, 325, 'extending/newtypes.html', 'It is called in the same situations where the <a class="reference internal" href="../reference/datamodel.html#object.__getattr__" title="object.__getattr__"><tt class="xref py py-meth docutils literal"><span class="pre">__getattr__()</span></tt></a> method of a class would be called.', 0, 0);
insert into py276_sentences values (4864, 326, 'extending/newtypes.html', 'A likely way to handle this is (1) to implement a set of functions (such as <tt class="xref c c-func docutils literal"><span class="pre">newdatatype_getSize()</span></tt> and <tt class="xref c c-func docutils literal"><span class="pre">newdatatype_setSize()</span></tt> in the example below), (2) provide a method table listing these functions, and (3) provide a getattr function that returns the result of a lookup in that table. ', 'A likely way to handle this is (1) to implement a set of functions (such as <tt class="xref c c-func docutils literal"><span class="pre">newdatatype_getSize()</span></tt> and <tt class="xref c c-func docutils literal"><span class="pre">newdatatype_setSize()</span></tt> in the example below), (2) provide a method table listing these functions, and (3) provide a getattr function that returns the result of a lookup in that table. ');
insert into py276_translations values (6864, 326, 'extending/newtypes.html', 'A likely way to handle this is (1) to implement a set of functions (such as <tt class="xref c c-func docutils literal"><span class="pre">newdatatype_getSize()</span></tt> and <tt class="xref c c-func docutils literal"><span class="pre">newdatatype_setSize()</span></tt> in the example below), (2) provide a method table listing these functions, and (3) provide a getattr function that returns the result of a lookup in that table. ', 0, 0);
insert into py276_sentences values (4865, 327, 'extending/newtypes.html', 'The method table uses the same structure as the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_methods" title="PyTypeObject.tp_methods"><tt class="xref c c-member docutils literal"><span class="pre">tp_methods</span></tt></a> field of the type object.', 'The method table uses the same structure as the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_methods" title="PyTypeObject.tp_methods"><tt class="xref c c-member docutils literal"><span class="pre">tp_methods</span></tt></a> field of the type object.');
insert into py276_translations values (6865, 327, 'extending/newtypes.html', 'The method table uses the same structure as the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_methods" title="PyTypeObject.tp_methods"><tt class="xref c c-member docutils literal"><span class="pre">tp_methods</span></tt></a> field of the type object.', 0, 0);
insert into py276_sentences values (4866, 328, 'extending/newtypes.html', 'Here is an example:', 'Here is an example:');
insert into py276_translations values (6866, 328, 'extending/newtypes.html', 'Here is an example:', 0, 0);
insert into py276_sentences values (4867, 329, 'extending/newtypes.html', 'The <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_setattr" title="PyTypeObject.tp_setattr"><tt class="xref c c-member docutils literal"><span class="pre">tp_setattr</span></tt></a> handler is called when the <a class="reference internal" href="../reference/datamodel.html#object.__setattr__" title="object.__setattr__"><tt class="xref py py-meth docutils literal"><span class="pre">__setattr__()</span></tt></a> or <a class="reference internal" href="../reference/datamodel.html#object.__delattr__" title="object.__delattr__"><tt class="xref py py-meth docutils literal"><span class="pre">__delattr__()</span></tt></a> method of a class instance would be called. ', 'The <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_setattr" title="PyTypeObject.tp_setattr"><tt class="xref c c-member docutils literal"><span class="pre">tp_setattr</span></tt></a> handler is called when the <a class="reference internal" href="../reference/datamodel.html#object.__setattr__" title="object.__setattr__"><tt class="xref py py-meth docutils literal"><span class="pre">__setattr__()</span></tt></a> or <a class="reference internal" href="../reference/datamodel.html#object.__delattr__" title="object.__delattr__"><tt class="xref py py-meth docutils literal"><span class="pre">__delattr__()</span></tt></a> method of a class instance would be called. ');
insert into py276_translations values (6867, 329, 'extending/newtypes.html', 'The <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_setattr" title="PyTypeObject.tp_setattr"><tt class="xref c c-member docutils literal"><span class="pre">tp_setattr</span></tt></a> handler is called when the <a class="reference internal" href="../reference/datamodel.html#object.__setattr__" title="object.__setattr__"><tt class="xref py py-meth docutils literal"><span class="pre">__setattr__()</span></tt></a> or <a class="reference internal" href="../reference/datamodel.html#object.__delattr__" title="object.__delattr__"><tt class="xref py py-meth docutils literal"><span class="pre">__delattr__()</span></tt></a> method of a class instance would be called. ', 0, 0);
insert into py276_sentences values (4868, 330, 'extending/newtypes.html', 'When an attribute should be deleted, the third parameter will be <em>NULL</em>. ', 'When an attribute should be deleted, the third parameter will be <em>NULL</em>. ');
insert into py276_translations values (6868, 330, 'extending/newtypes.html', 'When an attribute should be deleted, the third parameter will be <em>NULL</em>. ', 0, 0);
insert into py276_sentences values (4869, 331, 'extending/newtypes.html', 'Here is an example that simply raises an exception; ', 'Here is an example that simply raises an exception; ');
insert into py276_translations values (6869, 331, 'extending/newtypes.html', 'Here is an example that simply raises an exception; ', 0, 0);
insert into py276_sentences values (4870, 332, 'extending/newtypes.html', 'if this were really all you wanted, the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_setattr" title="PyTypeObject.tp_setattr"><tt class="xref c c-member docutils literal"><span class="pre">tp_setattr</span></tt></a> handler should be set to <em>NULL</em>.', 'if this were really all you wanted, the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_setattr" title="PyTypeObject.tp_setattr"><tt class="xref c c-member docutils literal"><span class="pre">tp_setattr</span></tt></a> handler should be set to <em>NULL</em>.');
insert into py276_translations values (6870, 332, 'extending/newtypes.html', 'if this were really all you wanted, the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_setattr" title="PyTypeObject.tp_setattr"><tt class="xref c c-member docutils literal"><span class="pre">tp_setattr</span></tt></a> handler should be set to <em>NULL</em>.', 0, 0);
insert into py276_sentences values (4871, 333, 'extending/newtypes.html', 'The <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_compare" title="PyTypeObject.tp_compare"><tt class="xref c c-member docutils literal"><span class="pre">tp_compare</span></tt></a> handler is called when comparisons are needed and the object does not implement the specific rich comparison method which matches the requested comparison. ', 'The <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_compare" title="PyTypeObject.tp_compare"><tt class="xref c c-member docutils literal"><span class="pre">tp_compare</span></tt></a> handler is called when comparisons are needed and the object does not implement the specific rich comparison method which matches the requested comparison. ');
insert into py276_translations values (6871, 333, 'extending/newtypes.html', 'The <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_compare" title="PyTypeObject.tp_compare"><tt class="xref c c-member docutils literal"><span class="pre">tp_compare</span></tt></a> handler is called when comparisons are needed and the object does not implement the specific rich comparison method which matches the requested comparison. ', 0, 0);
insert into py276_sentences values (4872, 334, 'extending/newtypes.html', '(It is always used if defined and the <a class="reference internal" href="../c-api/object.html#PyObject_Compare" title="PyObject_Compare"><tt class="xref c c-func docutils literal"><span class="pre">PyObject_Compare()</span></tt></a> or <a class="reference internal" href="../c-api/object.html#PyObject_Cmp" title="PyObject_Cmp"><tt class="xref c c-func docutils literal"><span class="pre">PyObject_Cmp()</span></tt></a> functions are used, or if <a class="reference internal" href="../library/functions.html#cmp" title="cmp"><tt class="xref py py-func docutils literal"><span class="pre">cmp()</span></tt></a> is used from Python.) ', '(It is always used if defined and the <a class="reference internal" href="../c-api/object.html#PyObject_Compare" title="PyObject_Compare"><tt class="xref c c-func docutils literal"><span class="pre">PyObject_Compare()</span></tt></a> or <a class="reference internal" href="../c-api/object.html#PyObject_Cmp" title="PyObject_Cmp"><tt class="xref c c-func docutils literal"><span class="pre">PyObject_Cmp()</span></tt></a> functions are used, or if <a class="reference internal" href="../library/functions.html#cmp" title="cmp"><tt class="xref py py-func docutils literal"><span class="pre">cmp()</span></tt></a> is used from Python.) ');
insert into py276_translations values (6872, 334, 'extending/newtypes.html', '(It is always used if defined and the <a class="reference internal" href="../c-api/object.html#PyObject_Compare" title="PyObject_Compare"><tt class="xref c c-func docutils literal"><span class="pre">PyObject_Compare()</span></tt></a> or <a class="reference internal" href="../c-api/object.html#PyObject_Cmp" title="PyObject_Cmp"><tt class="xref c c-func docutils literal"><span class="pre">PyObject_Cmp()</span></tt></a> functions are used, or if <a class="reference internal" href="../library/functions.html#cmp" title="cmp"><tt class="xref py py-func docutils literal"><span class="pre">cmp()</span></tt></a> is used from Python.) ', 0, 0);
insert into py276_sentences values (4873, 335, 'extending/newtypes.html', 'It is analogous to the <a class="reference internal" href="../reference/datamodel.html#object.__cmp__" title="object.__cmp__"><tt class="xref py py-meth docutils literal"><span class="pre">__cmp__()</span></tt></a> method. ', 'It is analogous to the <a class="reference internal" href="../reference/datamodel.html#object.__cmp__" title="object.__cmp__"><tt class="xref py py-meth docutils literal"><span class="pre">__cmp__()</span></tt></a> method. ');
insert into py276_translations values (6873, 335, 'extending/newtypes.html', 'It is analogous to the <a class="reference internal" href="../reference/datamodel.html#object.__cmp__" title="object.__cmp__"><tt class="xref py py-meth docutils literal"><span class="pre">__cmp__()</span></tt></a> method. ', 0, 0);
insert into py276_sentences values (4874, 336, 'extending/newtypes.html', 'This function should return <tt class="docutils literal"><span class="pre">-1</span></tt> if <em>obj1</em> is less than <em>obj2</em>, <tt class="docutils literal"><span class="pre">0</span></tt> if they are equal, and <tt class="docutils literal"><span class="pre">1</span></tt> if <em>obj1</em> is greater than <em>obj2</em>. ', 'This function should return <tt class="docutils literal"><span class="pre">-1</span></tt> if <em>obj1</em> is less than <em>obj2</em>, <tt class="docutils literal"><span class="pre">0</span></tt> if they are equal, and <tt class="docutils literal"><span class="pre">1</span></tt> if <em>obj1</em> is greater than <em>obj2</em>. ');
insert into py276_translations values (6874, 336, 'extending/newtypes.html', 'This function should return <tt class="docutils literal"><span class="pre">-1</span></tt> if <em>obj1</em> is less than <em>obj2</em>, <tt class="docutils literal"><span class="pre">0</span></tt> if they are equal, and <tt class="docutils literal"><span class="pre">1</span></tt> if <em>obj1</em> is greater than <em>obj2</em>. ', 0, 0);
insert into py276_sentences values (4875, 337, 'extending/newtypes.html', '(It was previously allowed to return arbitrary negative or positive integers for less than and greater than, respectively; as of Python 2.2, this is no longer allowed. ', '(It was previously allowed to return arbitrary negative or positive integers for less than and greater than, respectively; as of Python 2.2, this is no longer allowed. ');
insert into py276_translations values (6875, 337, 'extending/newtypes.html', '(It was previously allowed to return arbitrary negative or positive integers for less than and greater than, respectively; as of Python 2.2, this is no longer allowed. ', 0, 0);
insert into py276_sentences values (4876, 338, 'extending/newtypes.html', 'In the future, other return values may be assigned a different meaning.)', 'In the future, other return values may be assigned a different meaning.)');
insert into py276_translations values (6876, 338, 'extending/newtypes.html', 'In the future, other return values may be assigned a different meaning.)', 0, 0);
insert into py276_sentences values (4877, 339, 'extending/newtypes.html', 'A <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_compare" title="PyTypeObject.tp_compare"><tt class="xref c c-member docutils literal"><span class="pre">tp_compare</span></tt></a> handler may raise an exception. ', 'A <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_compare" title="PyTypeObject.tp_compare"><tt class="xref c c-member docutils literal"><span class="pre">tp_compare</span></tt></a> handler may raise an exception. ');
insert into py276_translations values (6877, 339, 'extending/newtypes.html', 'A <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_compare" title="PyTypeObject.tp_compare"><tt class="xref c c-member docutils literal"><span class="pre">tp_compare</span></tt></a> handler may raise an exception. ', 0, 0);
insert into py276_sentences values (4878, 340, 'extending/newtypes.html', 'In this case it should return a negative value. ', 'In this case it should return a negative value. ');
insert into py276_translations values (6878, 340, 'extending/newtypes.html', 'In this case it should return a negative value. ', 0, 0);
insert into py276_sentences values (4879, 341, 'extending/newtypes.html', 'The caller has to test for the exception using <a class="reference internal" href="../c-api/exceptions.html#PyErr_Occurred" title="PyErr_Occurred"><tt class="xref c c-func docutils literal"><span class="pre">PyErr_Occurred()</span></tt></a>.', 'The caller has to test for the exception using <a class="reference internal" href="../c-api/exceptions.html#PyErr_Occurred" title="PyErr_Occurred"><tt class="xref c c-func docutils literal"><span class="pre">PyErr_Occurred()</span></tt></a>.');
insert into py276_translations values (6879, 341, 'extending/newtypes.html', 'The caller has to test for the exception using <a class="reference internal" href="../c-api/exceptions.html#PyErr_Occurred" title="PyErr_Occurred"><tt class="xref c c-func docutils literal"><span class="pre">PyErr_Occurred()</span></tt></a>.', 0, 0);
insert into py276_sentences values (4880, 342, 'extending/newtypes.html', 'Here is a sample implementation:', 'Here is a sample implementation:');
insert into py276_translations values (6880, 342, 'extending/newtypes.html', 'Here is a sample implementation:', 0, 0);
insert into py276_sentences values (4881, 343, 'extending/newtypes.html', 'Python supports a variety of <em>abstract</em> ‘protocols;’ the specific interfaces provided to use these interfaces are documented in <a class="reference internal" href="../c-api/abstract.html#abstract"><em>Abstract Objects Layer</em></a>.', 'Python supports a variety of <em>abstract</em> ‘protocols;’ the specific interfaces provided to use these interfaces are documented in <a class="reference internal" href="../c-api/abstract.html#abstract"><em>Abstract Objects Layer</em></a>.');
insert into py276_translations values (6881, 343, 'extending/newtypes.html', 'Python supports a variety of <em>abstract</em> ‘protocols;’ the specific interfaces provided to use these interfaces are documented in <a class="reference internal" href="../c-api/abstract.html#abstract"><em>Abstract Objects Layer</em></a>.', 0, 0);
insert into py276_sentences values (4882, 344, 'extending/newtypes.html', 'A number of these abstract interfaces were defined early in the development of the Python implementation. ', 'A number of these abstract interfaces were defined early in the development of the Python implementation. ');
insert into py276_translations values (6882, 344, 'extending/newtypes.html', 'A number of these abstract interfaces were defined early in the development of the Python implementation. ', 0, 0);
insert into py276_sentences values (4883, 345, 'extending/newtypes.html', 'In particular, the number, mapping, and sequence protocols have been part of Python since the beginning. ', 'In particular, the number, mapping, and sequence protocols have been part of Python since the beginning. ');
insert into py276_translations values (6883, 345, 'extending/newtypes.html', 'In particular, the number, mapping, and sequence protocols have been part of Python since the beginning. ', 0, 0);
insert into py276_sentences values (4884, 346, 'extending/newtypes.html', 'Other protocols have been added over time. ', 'Other protocols have been added over time. ');
insert into py276_translations values (6884, 346, 'extending/newtypes.html', 'Other protocols have been added over time. ', 0, 0);
insert into py276_sentences values (4885, 347, 'extending/newtypes.html', 'For protocols which depend on several handler routines from the type implementation, the older protocols have been defined as optional blocks of handlers referenced by the type object. ', 'For protocols which depend on several handler routines from the type implementation, the older protocols have been defined as optional blocks of handlers referenced by the type object. ');
insert into py276_translations values (6885, 347, 'extending/newtypes.html', 'For protocols which depend on several handler routines from the type implementation, the older protocols have been defined as optional blocks of handlers referenced by the type object. ', 0, 0);
insert into py276_sentences values (4886, 348, 'extending/newtypes.html', 'For newer protocols there are additional slots in the main type object, with a flag bit being set to indicate that the slots are present and should be checked by the interpreter. ', 'For newer protocols there are additional slots in the main type object, with a flag bit being set to indicate that the slots are present and should be checked by the interpreter. ');
insert into py276_translations values (6886, 348, 'extending/newtypes.html', 'For newer protocols there are additional slots in the main type object, with a flag bit being set to indicate that the slots are present and should be checked by the interpreter. ', 0, 0);
insert into py276_sentences values (4887, 349, 'extending/newtypes.html', '(The flag bit does not indicate that the slot values are non-<em>NULL</em>. ', '(The flag bit does not indicate that the slot values are non-<em>NULL</em>. ');
insert into py276_translations values (6887, 349, 'extending/newtypes.html', '(The flag bit does not indicate that the slot values are non-<em>NULL</em>. ', 0, 0);
insert into py276_sentences values (4888, 350, 'extending/newtypes.html', 'The flag may be set to indicate the presence of a slot, but a slot may still be unfilled.)', 'The flag may be set to indicate the presence of a slot, but a slot may still be unfilled.)');
insert into py276_translations values (6888, 350, 'extending/newtypes.html', 'The flag may be set to indicate the presence of a slot, but a slot may still be unfilled.)', 0, 0);
insert into py276_sentences values (4889, 351, 'extending/newtypes.html', 'If you wish your object to be able to act like a number, a sequence, or a mapping object, then you place the address of a structure that implements the C type <a class="reference internal" href="../c-api/typeobj.html#PyNumberMethods" title="PyNumberMethods"><tt class="xref c c-type docutils literal"><span class="pre">PyNumberMethods</span></tt></a>, <a class="reference internal" href="../c-api/typeobj.html#PySequenceMethods" title="PySequenceMethods"><tt class="xref c c-type docutils literal"><span class="pre">PySequenceMethods</span></tt></a>, or <a class="reference internal" href="../c-api/typeobj.html#PyMappingMethods" title="PyMappingMethods"><tt class="xref c c-type docutils literal"><span class="pre">PyMappingMethods</span></tt></a>, respectively. ', 'If you wish your object to be able to act like a number, a sequence, or a mapping object, then you place the address of a structure that implements the C type <a class="reference internal" href="../c-api/typeobj.html#PyNumberMethods" title="PyNumberMethods"><tt class="xref c c-type docutils literal"><span class="pre">PyNumberMethods</span></tt></a>, <a class="reference internal" href="../c-api/typeobj.html#PySequenceMethods" title="PySequenceMethods"><tt class="xref c c-type docutils literal"><span class="pre">PySequenceMethods</span></tt></a>, or <a class="reference internal" href="../c-api/typeobj.html#PyMappingMethods" title="PyMappingMethods"><tt class="xref c c-type docutils literal"><span class="pre">PyMappingMethods</span></tt></a>, respectively. ');
insert into py276_translations values (6889, 351, 'extending/newtypes.html', 'If you wish your object to be able to act like a number, a sequence, or a mapping object, then you place the address of a structure that implements the C type <a class="reference internal" href="../c-api/typeobj.html#PyNumberMethods" title="PyNumberMethods"><tt class="xref c c-type docutils literal"><span class="pre">PyNumberMethods</span></tt></a>, <a class="reference internal" href="../c-api/typeobj.html#PySequenceMethods" title="PySequenceMethods"><tt class="xref c c-type docutils literal"><span class="pre">PySequenceMethods</span></tt></a>, or <a class="reference internal" href="../c-api/typeobj.html#PyMappingMethods" title="PyMappingMethods"><tt class="xref c c-type docutils literal"><span class="pre">PyMappingMethods</span></tt></a>, respectively. ', 0, 0);
insert into py276_sentences values (4890, 352, 'extending/newtypes.html', 'It is up to you to fill in this structure with appropriate values. ', 'It is up to you to fill in this structure with appropriate values. ');
insert into py276_translations values (6890, 352, 'extending/newtypes.html', 'It is up to you to fill in this structure with appropriate values. ', 0, 0);
insert into py276_sentences values (4891, 353, 'extending/newtypes.html', 'You can find examples of the use of each of these in the <tt class="file docutils literal"><span class="pre">Objects</span></tt> directory of the Python source distribution.', 'You can find examples of the use of each of these in the <tt class="file docutils literal"><span class="pre">Objects</span></tt> directory of the Python source distribution.');
insert into py276_translations values (6891, 353, 'extending/newtypes.html', 'You can find examples of the use of each of these in the <tt class="file docutils literal"><span class="pre">Objects</span></tt> directory of the Python source distribution.', 0, 0);
insert into py276_sentences values (4892, 354, 'extending/newtypes.html', 'This function, if you choose to provide it, should return a hash number for an instance of your data type. ', 'This function, if you choose to provide it, should return a hash number for an instance of your data type. ');
insert into py276_translations values (6892, 354, 'extending/newtypes.html', 'This function, if you choose to provide it, should return a hash number for an instance of your data type. ', 0, 0);
insert into py276_sentences values (4893, 355, 'extending/newtypes.html', 'Here is a moderately pointless example:', 'Here is a moderately pointless example:');
insert into py276_translations values (6893, 355, 'extending/newtypes.html', 'Here is a moderately pointless example:', 0, 0);
insert into py276_sentences values (4894, 356, 'extending/newtypes.html', 'This function is called when an instance of your data type is “called”, for example, if <tt class="docutils literal"><span class="pre">obj1</span></tt> is an instance of your data type and the Python script contains <tt class="docutils literal"><span class="pre">obj1('hello')</span></tt>, the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_call" title="PyTypeObject.tp_call"><tt class="xref c c-member docutils literal"><span class="pre">tp_call</span></tt></a> handler is invoked.', 'This function is called when an instance of your data type is “called”, for example, if <tt class="docutils literal"><span class="pre">obj1</span></tt> is an instance of your data type and the Python script contains <tt class="docutils literal"><span class="pre">obj1('hello')</span></tt>, the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_call" title="PyTypeObject.tp_call"><tt class="xref c c-member docutils literal"><span class="pre">tp_call</span></tt></a> handler is invoked.');
insert into py276_translations values (6894, 356, 'extending/newtypes.html', 'This function is called when an instance of your data type is “called”, for example, if <tt class="docutils literal"><span class="pre">obj1</span></tt> is an instance of your data type and the Python script contains <tt class="docutils literal"><span class="pre">obj1('hello')</span></tt>, the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_call" title="PyTypeObject.tp_call"><tt class="xref c c-member docutils literal"><span class="pre">tp_call</span></tt></a> handler is invoked.', 0, 0);
insert into py276_sentences values (4895, 357, 'extending/newtypes.html', 'This function takes three arguments:', 'This function takes three arguments:');
insert into py276_translations values (6895, 357, 'extending/newtypes.html', 'This function takes three arguments:', 0, 0);
insert into py276_sentences values (4896, 358, 'extending/newtypes.html', 'Here is a desultory example of the implementation of the call function.', 'Here is a desultory example of the implementation of the call function.');
insert into py276_translations values (6896, 358, 'extending/newtypes.html', 'Here is a desultory example of the implementation of the call function.', 0, 0);
insert into py276_sentences values (4897, 359, 'extending/newtypes.html', 'XXX some fields need to be added here...', 'XXX some fields need to be added here...');
insert into py276_translations values (6897, 359, 'extending/newtypes.html', 'XXX some fields need to be added here...', 0, 0);
insert into py276_sentences values (4898, 360, 'extending/newtypes.html', 'These functions provide support for the iterator protocol. ', 'These functions provide support for the iterator protocol. ');
insert into py276_translations values (6898, 360, 'extending/newtypes.html', 'These functions provide support for the iterator protocol. ', 0, 0);
insert into py276_sentences values (4899, 361, 'extending/newtypes.html', 'Any object which wishes to support iteration over its contents (which may be generated during iteration) must implement the <tt class="docutils literal"><span class="pre">tp_iter</span></tt> handler. ', 'Any object which wishes to support iteration over its contents (which may be generated during iteration) must implement the <tt class="docutils literal"><span class="pre">tp_iter</span></tt> handler. ');
insert into py276_translations values (6899, 361, 'extending/newtypes.html', 'Any object which wishes to support iteration over its contents (which may be generated during iteration) must implement the <tt class="docutils literal"><span class="pre">tp_iter</span></tt> handler. ', 0, 0);
insert into py276_sentences values (4900, 362, 'extending/newtypes.html', 'Objects which are returned by a <tt class="docutils literal"><span class="pre">tp_iter</span></tt> handler must implement both the <tt class="docutils literal"><span class="pre">tp_iter</span></tt> and <tt class="docutils literal"><span class="pre">tp_iternext</span></tt> handlers. ', 'Objects which are returned by a <tt class="docutils literal"><span class="pre">tp_iter</span></tt> handler must implement both the <tt class="docutils literal"><span class="pre">tp_iter</span></tt> and <tt class="docutils literal"><span class="pre">tp_iternext</span></tt> handlers. ');
insert into py276_translations values (6900, 362, 'extending/newtypes.html', 'Objects which are returned by a <tt class="docutils literal"><span class="pre">tp_iter</span></tt> handler must implement both the <tt class="docutils literal"><span class="pre">tp_iter</span></tt> and <tt class="docutils literal"><span class="pre">tp_iternext</span></tt> handlers. ', 0, 0);
insert into py276_sentences values (4901, 363, 'extending/newtypes.html', 'Both handlers take exactly one parameter, the instance for which they are being called, and return a new reference. ', 'Both handlers take exactly one parameter, the instance for which they are being called, and return a new reference. ');
insert into py276_translations values (6901, 363, 'extending/newtypes.html', 'Both handlers take exactly one parameter, the instance for which they are being called, and return a new reference. ', 0, 0);
insert into py276_sentences values (4902, 364, 'extending/newtypes.html', 'In the case of an error, they should set an exception and return <em>NULL</em>.', 'In the case of an error, they should set an exception and return <em>NULL</em>.');
insert into py276_translations values (6902, 364, 'extending/newtypes.html', 'In the case of an error, they should set an exception and return <em>NULL</em>.', 0, 0);
insert into py276_sentences values (4903, 365, 'extending/newtypes.html', 'For an object which represents an iterable collection, the <tt class="docutils literal"><span class="pre">tp_iter</span></tt> handler must return an iterator object. ', 'For an object which represents an iterable collection, the <tt class="docutils literal"><span class="pre">tp_iter</span></tt> handler must return an iterator object. ');
insert into py276_translations values (6903, 365, 'extending/newtypes.html', 'For an object which represents an iterable collection, the <tt class="docutils literal"><span class="pre">tp_iter</span></tt> handler must return an iterator object. ', 0, 0);
insert into py276_sentences values (4904, 366, 'extending/newtypes.html', 'The iterator object is responsible for maintaining the state of the iteration. ', 'The iterator object is responsible for maintaining the state of the iteration. ');
insert into py276_translations values (6904, 366, 'extending/newtypes.html', 'The iterator object is responsible for maintaining the state of the iteration. ', 0, 0);
insert into py276_sentences values (4905, 367, 'extending/newtypes.html', 'For collections which can support multiple iterators which do not interfere with each other (as lists and tuples do), a new iterator should be created and returned. ', 'For collections which can support multiple iterators which do not interfere with each other (as lists and tuples do), a new iterator should be created and returned. ');
insert into py276_translations values (6905, 367, 'extending/newtypes.html', 'For collections which can support multiple iterators which do not interfere with each other (as lists and tuples do), a new iterator should be created and returned. ', 0, 0);
insert into py276_sentences values (4906, 368, 'extending/newtypes.html', 'Objects which can only be iterated over once (usually due to side effects of iteration) should implement this handler by returning a new reference to themselves, and should also implement the <tt class="docutils literal"><span class="pre">tp_iternext</span></tt> handler. ', 'Objects which can only be iterated over once (usually due to side effects of iteration) should implement this handler by returning a new reference to themselves, and should also implement the <tt class="docutils literal"><span class="pre">tp_iternext</span></tt> handler. ');
insert into py276_translations values (6906, 368, 'extending/newtypes.html', 'Objects which can only be iterated over once (usually due to side effects of iteration) should implement this handler by returning a new reference to themselves, and should also implement the <tt class="docutils literal"><span class="pre">tp_iternext</span></tt> handler. ', 0, 0);
insert into py276_sentences values (4907, 369, 'extending/newtypes.html', 'File objects are an example of such an iterator.', 'File objects are an example of such an iterator.');
insert into py276_translations values (6907, 369, 'extending/newtypes.html', 'File objects are an example of such an iterator.', 0, 0);
insert into py276_sentences values (4908, 370, 'extending/newtypes.html', 'Iterator objects should implement both handlers. ', 'Iterator objects should implement both handlers. ');
insert into py276_translations values (6908, 370, 'extending/newtypes.html', 'Iterator objects should implement both handlers. ', 0, 0);
insert into py276_sentences values (4909, 371, 'extending/newtypes.html', 'The <tt class="docutils literal"><span class="pre">tp_iter</span></tt> handler should return a new reference to the iterator (this is the same as the <tt class="docutils literal"><span class="pre">tp_iter</span></tt> handler for objects which can only be iterated over destructively). ', 'The <tt class="docutils literal"><span class="pre">tp_iter</span></tt> handler should return a new reference to the iterator (this is the same as the <tt class="docutils literal"><span class="pre">tp_iter</span></tt> handler for objects which can only be iterated over destructively). ');
insert into py276_translations values (6909, 371, 'extending/newtypes.html', 'The <tt class="docutils literal"><span class="pre">tp_iter</span></tt> handler should return a new reference to the iterator (this is the same as the <tt class="docutils literal"><span class="pre">tp_iter</span></tt> handler for objects which can only be iterated over destructively). ', 0, 0);
insert into py276_sentences values (4910, 372, 'extending/newtypes.html', 'The <tt class="docutils literal"><span class="pre">tp_iternext</span></tt> handler should return a new reference to the next object in the iteration if there is one. ', 'The <tt class="docutils literal"><span class="pre">tp_iternext</span></tt> handler should return a new reference to the next object in the iteration if there is one. ');
insert into py276_translations values (6910, 372, 'extending/newtypes.html', 'The <tt class="docutils literal"><span class="pre">tp_iternext</span></tt> handler should return a new reference to the next object in the iteration if there is one. ', 0, 0);
insert into py276_sentences values (4911, 373, 'extending/newtypes.html', 'If the iteration has reached the end, it may return <em>NULL</em> without setting an exception or it may set <a class="reference internal" href="../library/exceptions.html#exceptions.StopIteration" title="exceptions.StopIteration"><tt class="xref py py-exc docutils literal"><span class="pre">StopIteration</span></tt></a>; ', 'If the iteration has reached the end, it may return <em>NULL</em> without setting an exception or it may set <a class="reference internal" href="../library/exceptions.html#exceptions.StopIteration" title="exceptions.StopIteration"><tt class="xref py py-exc docutils literal"><span class="pre">StopIteration</span></tt></a>; ');
insert into py276_translations values (6911, 373, 'extending/newtypes.html', 'If the iteration has reached the end, it may return <em>NULL</em> without setting an exception or it may set <a class="reference internal" href="../library/exceptions.html#exceptions.StopIteration" title="exceptions.StopIteration"><tt class="xref py py-exc docutils literal"><span class="pre">StopIteration</span></tt></a>; ', 0, 0);
insert into py276_sentences values (4912, 374, 'extending/newtypes.html', 'avoiding the exception can yield slightly better performance. ', 'avoiding the exception can yield slightly better performance. ');
insert into py276_translations values (6912, 374, 'extending/newtypes.html', 'avoiding the exception can yield slightly better performance. ', 0, 0);
insert into py276_sentences values (4913, 375, 'extending/newtypes.html', 'If an actual error occurs, it should set an exception and return <em>NULL</em>.', 'If an actual error occurs, it should set an exception and return <em>NULL</em>.');
insert into py276_translations values (6913, 375, 'extending/newtypes.html', 'If an actual error occurs, it should set an exception and return <em>NULL</em>.', 0, 0);
insert into py276_sentences values (4914, 376, 'extending/newtypes.html', 'One of the goals of Python’s weak-reference implementation is to allow any type to participate in the weak reference mechanism without incurring the overhead on those objects which do not benefit by weak referencing (such as numbers).', 'One of the goals of Python’s weak-reference implementation is to allow any type to participate in the weak reference mechanism without incurring the overhead on those objects which do not benefit by weak referencing (such as numbers).');
insert into py276_translations values (6914, 376, 'extending/newtypes.html', 'One of the goals of Python’s weak-reference implementation is to allow any type to participate in the weak reference mechanism without incurring the overhead on those objects which do not benefit by weak referencing (such as numbers).', 0, 0);
insert into py276_sentences values (4915, 377, 'extending/newtypes.html', 'For an object to be weakly referencable, the extension must include a <a class="reference internal" href="../c-api/structures.html#PyObject" title="PyObject"><tt class="xref c c-type docutils literal"><span class="pre">PyObject*</span></tt></a> field in the instance structure for the use of the weak reference mechanism; ', 'For an object to be weakly referencable, the extension must include a <a class="reference internal" href="../c-api/structures.html#PyObject" title="PyObject"><tt class="xref c c-type docutils literal"><span class="pre">PyObject*</span></tt></a> field in the instance structure for the use of the weak reference mechanism; ');
insert into py276_translations values (6915, 377, 'extending/newtypes.html', 'For an object to be weakly referencable, the extension must include a <a class="reference internal" href="../c-api/structures.html#PyObject" title="PyObject"><tt class="xref c c-type docutils literal"><span class="pre">PyObject*</span></tt></a> field in the instance structure for the use of the weak reference mechanism; ', 0, 0);
insert into py276_sentences values (4916, 378, 'extending/newtypes.html', 'it must be initialized to <em>NULL</em> by the object’s constructor. ', 'it must be initialized to <em>NULL</em> by the object’s constructor. ');
insert into py276_translations values (6916, 378, 'extending/newtypes.html', 'it must be initialized to <em>NULL</em> by the object’s constructor. ', 0, 0);
insert into py276_sentences values (4917, 379, 'extending/newtypes.html', 'It must also set the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_weaklistoffset" title="PyTypeObject.tp_weaklistoffset"><tt class="xref c c-member docutils literal"><span class="pre">tp_weaklistoffset</span></tt></a> field of the corresponding type object to the offset of the field. ', 'It must also set the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_weaklistoffset" title="PyTypeObject.tp_weaklistoffset"><tt class="xref c c-member docutils literal"><span class="pre">tp_weaklistoffset</span></tt></a> field of the corresponding type object to the offset of the field. ');
insert into py276_translations values (6917, 379, 'extending/newtypes.html', 'It must also set the <a class="reference internal" href="../c-api/typeobj.html#PyTypeObject.tp_weaklistoffset" title="PyTypeObject.tp_weaklistoffset"><tt class="xref c c-member docutils literal"><span class="pre">tp_weaklistoffset</span></tt></a> field of the corresponding type object to the offset of the field. ', 0, 0);
insert into py276_sentences values (4918, 380, 'extending/newtypes.html', 'For example, the instance type is defined with the following structure:', 'For example, the instance type is defined with the following structure:');
insert into py276_translations values (6918, 380, 'extending/newtypes.html', 'For example, the instance type is defined with the following structure:', 0, 0);
insert into py276_sentences values (4919, 381, 'extending/newtypes.html', 'The statically-declared type object for instances is defined this way:', 'The statically-declared type object for instances is defined this way:');
insert into py276_translations values (6919, 381, 'extending/newtypes.html', 'The statically-declared type object for instances is defined this way:', 0, 0);
insert into py276_sentences values (4920, 382, 'extending/newtypes.html', 'The type constructor is responsible for initializing the weak reference list to <em>NULL</em>:', 'The type constructor is responsible for initializing the weak reference list to <em>NULL</em>:');
insert into py276_translations values (6920, 382, 'extending/newtypes.html', 'The type constructor is responsible for initializing the weak reference list to <em>NULL</em>:', 0, 0);
insert into py276_sentences values (4921, 383, 'extending/newtypes.html', 'The only further addition is that the destructor needs to call the weak reference manager to clear any weak references. ', 'The only further addition is that the destructor needs to call the weak reference manager to clear any weak references. ');
insert into py276_translations values (6921, 383, 'extending/newtypes.html', 'The only further addition is that the destructor needs to call the weak reference manager to clear any weak references. ', 0, 0);
insert into py276_sentences values (4922, 384, 'extending/newtypes.html', 'This is only required if the weak reference list is non-<em>NULL</em>:', 'This is only required if the weak reference list is non-<em>NULL</em>:');
insert into py276_translations values (6922, 384, 'extending/newtypes.html', 'This is only required if the weak reference list is non-<em>NULL</em>:', 0, 0);
insert into py276_sentences values (4923, 385, 'extending/newtypes.html', 'Remember that you can omit most of these functions, in which case you provide <tt class="docutils literal"><span class="pre">0</span></tt> as a value. ', 'Remember that you can omit most of these functions, in which case you provide <tt class="docutils literal"><span class="pre">0</span></tt> as a value. ');
insert into py276_translations values (6923, 385, 'extending/newtypes.html', 'Remember that you can omit most of these functions, in which case you provide <tt class="docutils literal"><span class="pre">0</span></tt> as a value. ', 0, 0);
insert into py276_sentences values (4924, 386, 'extending/newtypes.html', 'There are type definitions for each of the functions you must provide. ', 'There are type definitions for each of the functions you must provide. ');
insert into py276_translations values (6924, 386, 'extending/newtypes.html', 'There are type definitions for each of the functions you must provide. ', 0, 0);
insert into py276_sentences values (4925, 387, 'extending/newtypes.html', 'They are in <tt class="file docutils literal"><span class="pre">object.h</span></tt> in the Python include directory that comes with the source distribution of Python.', 'They are in <tt class="file docutils literal"><span class="pre">object.h</span></tt> in the Python include directory that comes with the source distribution of Python.');
insert into py276_translations values (6925, 387, 'extending/newtypes.html', 'They are in <tt class="file docutils literal"><span class="pre">object.h</span></tt> in the Python include directory that comes with the source distribution of Python.', 0, 0);
insert into py276_sentences values (4926, 388, 'extending/newtypes.html', 'In order to learn how to implement any specific method for your new data type, do the following: Download and unpack the Python source distribution. ', 'In order to learn how to implement any specific method for your new data type, do the following: Download and unpack the Python source distribution. ');
insert into py276_translations values (6926, 388, 'extending/newtypes.html', 'In order to learn how to implement any specific method for your new data type, do the following: Download and unpack the Python source distribution. ', 0, 0);
insert into py276_sentences values (4927, 389, 'extending/newtypes.html', 'Go the <tt class="file docutils literal"><span class="pre">Objects</span></tt> directory, then search the C source files for <tt class="docutils literal"><span class="pre">tp_</span></tt> plus the function you want (for example, <tt class="docutils literal"><span class="pre">tp_print</span></tt> or <tt class="docutils literal"><span class="pre">tp_compare</span></tt>). ', 'Go the <tt class="file docutils literal"><span class="pre">Objects</span></tt> directory, then search the C source files for <tt class="docutils literal"><span class="pre">tp_</span></tt> plus the function you want (for example, <tt class="docutils literal"><span class="pre">tp_print</span></tt> or <tt class="docutils literal"><span class="pre">tp_compare</span></tt>). ');
insert into py276_translations values (6927, 389, 'extending/newtypes.html', 'Go the <tt class="file docutils literal"><span class="pre">Objects</span></tt> directory, then search the C source files for <tt class="docutils literal"><span class="pre">tp_</span></tt> plus the function you want (for example, <tt class="docutils literal"><span class="pre">tp_print</span></tt> or <tt class="docutils literal"><span class="pre">tp_compare</span></tt>). ', 0, 0);
insert into py276_sentences values (4928, 390, 'extending/newtypes.html', 'You will find examples of the function you want to implement.', 'You will find examples of the function you want to implement.');
insert into py276_translations values (6928, 390, 'extending/newtypes.html', 'You will find examples of the function you want to implement.', 0, 0);
insert into py276_sentences values (4929, 391, 'extending/newtypes.html', 'When you need to verify that an object is an instance of the type you are implementing, use the <a class="reference internal" href="../c-api/object.html#PyObject_TypeCheck" title="PyObject_TypeCheck"><tt class="xref c c-func docutils literal"><span class="pre">PyObject_TypeCheck()</span></tt></a> function. ', 'When you need to verify that an object is an instance of the type you are implementing, use the <a class="reference internal" href="../c-api/object.html#PyObject_TypeCheck" title="PyObject_TypeCheck"><tt class="xref c c-func docutils literal"><span class="pre">PyObject_TypeCheck()</span></tt></a> function. ');
insert into py276_translations values (6929, 391, 'extending/newtypes.html', 'When you need to verify that an object is an instance of the type you are implementing, use the <a class="reference internal" href="../c-api/object.html#PyObject_TypeCheck" title="PyObject_TypeCheck"><tt class="xref c c-func docutils literal"><span class="pre">PyObject_TypeCheck()</span></tt></a> function. ', 0, 0);
insert into py276_sentences values (4930, 392, 'extending/newtypes.html', 'A sample of its use might be something like the following:', 'A sample of its use might be something like the following:');
insert into py276_translations values (6930, 392, 'extending/newtypes.html', 'A sample of its use might be something like the following:', 0, 0);
insert into py276_sentences values (4931, 393, 'extending/newtypes.html', 'Footnotes', 'Footnotes');
insert into py276_translations values (6931, 393, 'extending/newtypes.html', 'Footnotes', 0, 0);
insert into py276_sentences values (4932, 394, 'extending/newtypes.html', '<a href="extending.html" title="previous chapter">1. Extending Python with C or C++</a>', '<a href="extending.html" title="previous chapter">1. Extending Python with C or C++</a>');
insert into py276_translations values (6932, 394, 'extending/newtypes.html', '<a href="extending.html" title="previous chapter">1. Extending Python with C or C++</a>', 0, 0);
insert into py276_sentences values (4933, 395, 'extending/newtypes.html', '<a href="building.html" title="next chapter">3. Building C and C++ Extensions with distutils</a>', '<a href="building.html" title="next chapter">3. Building C and C++ Extensions with distutils</a>');
insert into py276_translations values (6933, 395, 'extending/newtypes.html', '<a href="building.html" title="next chapter">3. Building C and C++ Extensions with distutils</a>', 0, 0);
insert into py276_sentences values (4934, 396, 'extending/newtypes.html', ' Enter search terms or a module, class or function name. ', ' Enter search terms or a module, class or function name. ');
insert into py276_translations values (6934, 396, 'extending/newtypes.html', ' Enter search terms or a module, class or function name. ', 0, 0);
insert into py276_sentences values (4935, 397, 'extending/newtypes.html', '2. Defining New Types', '2. Defining New Types');
insert into py276_translations values (6935, 397, 'extending/newtypes.html', '2. Defining New Types', 0, 0);
insert into py276_sentences values (4936, 398, 'extending/newtypes.html', '2.1. The Basics', '2.1. The Basics');
insert into py276_translations values (6936, 398, 'extending/newtypes.html', '2.1. The Basics', 0, 0);
insert into py276_sentences values (4937, 399, 'extending/newtypes.html', '2.2. Type Methods', '2.2. Type Methods');
insert into py276_translations values (6937, 399, 'extending/newtypes.html', '2.2. Type Methods', 0, 0);
insert into py276_sentences values (4938, 400, 'extending/newtypes.html', 'Navigation', 'Navigation');
insert into py276_translations values (6938, 400, 'extending/newtypes.html', 'Navigation', 0, 0);
insert into py276_sentences values (4939, 401, 'extending/newtypes.html', '2.1.1. Adding data and methods to the Basic example', '2.1.1. Adding data and methods to the Basic example');
insert into py276_translations values (6939, 401, 'extending/newtypes.html', '2.1.1. Adding data and methods to the Basic example', 0, 0);
insert into py276_sentences values (4940, 402, 'extending/newtypes.html', '2.1.2. Providing finer control over data attributes', '2.1.2. Providing finer control over data attributes');
insert into py276_translations values (6940, 402, 'extending/newtypes.html', '2.1.2. Providing finer control over data attributes', 0, 0);
insert into py276_sentences values (4941, 403, 'extending/newtypes.html', '2.1.3. Supporting cyclic garbage collection', '2.1.3. Supporting cyclic garbage collection');
insert into py276_translations values (6941, 403, 'extending/newtypes.html', '2.1.3. Supporting cyclic garbage collection', 0, 0);
insert into py276_sentences values (4942, 404, 'extending/newtypes.html', '2.1.4. Subclassing other types', '2.1.4. Subclassing other types');
insert into py276_translations values (6942, 404, 'extending/newtypes.html', '2.1.4. Subclassing other types', 0, 0);
insert into py276_sentences values (4943, 405, 'extending/newtypes.html', '2.2.1. Finalization and De-allocation', '2.2.1. Finalization and De-allocation');
insert into py276_translations values (6943, 405, 'extending/newtypes.html', '2.2.1. Finalization and De-allocation', 0, 0);
insert into py276_sentences values (4944, 406, 'extending/newtypes.html', '2.2.2. Object Presentation', '2.2.2. Object Presentation');
insert into py276_translations values (6944, 406, 'extending/newtypes.html', '2.2.2. Object Presentation', 0, 0);
insert into py276_sentences values (4945, 407, 'extending/newtypes.html', '2.2.3. Attribute Management', '2.2.3. Attribute Management');
insert into py276_translations values (6945, 407, 'extending/newtypes.html', '2.2.3. Attribute Management', 0, 0);
insert into py276_sentences values (4946, 408, 'extending/newtypes.html', '2.2.4. Object Comparison', '2.2.4. Object Comparison');
insert into py276_translations values (6946, 408, 'extending/newtypes.html', '2.2.4. Object Comparison', 0, 0);
insert into py276_sentences values (4947, 409, 'extending/newtypes.html', '2.2.5. Abstract Protocol Support', '2.2.5. Abstract Protocol Support');
insert into py276_translations values (6947, 409, 'extending/newtypes.html', '2.2.5. Abstract Protocol Support', 0, 0);
insert into py276_sentences values (4948, 410, 'extending/newtypes.html', '2.2.6. Weak Reference Support', '2.2.6. Weak Reference Support');
insert into py276_translations values (6948, 410, 'extending/newtypes.html', '2.2.6. Weak Reference Support', 0, 0);
insert into py276_sentences values (4949, 411, 'extending/newtypes.html', '2.2.7. More Suggestions', '2.2.7. More Suggestions');
insert into py276_translations values (6949, 411, 'extending/newtypes.html', '2.2.7. More Suggestions', 0, 0);
insert into py276_sentences values (4950, 412, 'extending/newtypes.html', 'Table Of Contents', 'Table Of Contents');
insert into py276_translations values (6950, 412, 'extending/newtypes.html', 'Table Of Contents', 0, 0);
insert into py276_sentences values (4951, 413, 'extending/newtypes.html', 'This Page', 'This Page');
insert into py276_translations values (6951, 413, 'extending/newtypes.html', 'This Page', 0, 0);
insert into py276_sentences values (4952, 414, 'extending/newtypes.html', 'Quick search', 'Quick search');
insert into py276_translations values (6952, 414, 'extending/newtypes.html', 'Quick search', 0, 0);
insert into py276_sentences values (4953, 415, 'extending/newtypes.html', 'Navigation', 'Navigation');
insert into py276_translations values (6953, 415, 'extending/newtypes.html', 'Navigation', 0, 0);
insert into py276_sentences values (4954, 416, 'extending/newtypes.html', '2.2.3.1. Generic Attribute Management', '2.2.3.1. Generic Attribute Management');
insert into py276_translations values (6954, 416, 'extending/newtypes.html', '2.2.3.1. Generic Attribute Management', 0, 0);
insert into py276_sentences values (4955, 417, 'extending/newtypes.html', '2.2.3.2. Type-specific Attribute Management', '2.2.3.2. Type-specific Attribute Management');
insert into py276_translations values (6955, 417, 'extending/newtypes.html', '2.2.3.2. Type-specific Attribute Management', 0, 0);
insert into py276_sentences values (4956, 418, 'extending/newtypes.html', 'Previous topic', 'Previous topic');
insert into py276_translations values (6956, 418, 'extending/newtypes.html', 'Previous topic', 0, 0);
insert into py276_sentences values (4957, 419, 'extending/newtypes.html', 'Next topic', 'Next topic');
insert into py276_translations values (6957, 419, 'extending/newtypes.html', 'Next topic', 0, 0);
insert into py276_sentences values (4958, 420, 'extending/newtypes.html', 'index', 'index');
insert into py276_translations values (6958, 420, 'extending/newtypes.html', 'index', 0, 0);
insert into py276_sentences values (4959, 421, 'extending/newtypes.html', 'modules', 'modules');
insert into py276_translations values (6959, 421, 'extending/newtypes.html', 'modules', 0, 0);
insert into py276_sentences values (4960, 422, 'extending/newtypes.html', 'next', 'next');
insert into py276_translations values (6960, 422, 'extending/newtypes.html', 'next', 0, 0);
insert into py276_sentences values (4961, 423, 'extending/newtypes.html', 'previous', 'previous');
insert into py276_translations values (6961, 423, 'extending/newtypes.html', 'previous', 0, 0);
insert into py276_sentences values (4962, 424, 'extending/newtypes.html', 'Python', 'Python');
insert into py276_translations values (6962, 424, 'extending/newtypes.html', 'Python', 0, 0);
insert into py276_sentences values (4963, 425, 'extending/newtypes.html', 'Documentation', 'Documentation');
insert into py276_translations values (6963, 425, 'extending/newtypes.html', 'Documentation', 0, 0);
insert into py276_sentences values (4964, 426, 'extending/newtypes.html', 'Extending and Embedding the Python Interpreter', 'Extending and Embedding the Python Interpreter');
insert into py276_translations values (6964, 426, 'extending/newtypes.html', 'Extending and Embedding the Python Interpreter', 0, 0);
insert into py276_sentences values (4965, 427, 'extending/newtypes.html', '[1]', '[1]');
insert into py276_translations values (6965, 427, 'extending/newtypes.html', '[1]', 0, 0);
insert into py276_sentences values (4966, 428, 'extending/newtypes.html', 'tp_dealloc', 'tp_dealloc');
insert into py276_translations values (6966, 428, 'extending/newtypes.html', 'tp_dealloc', 0, 0);
insert into py276_sentences values (4967, 429, 'extending/newtypes.html', '[2]', '[2]');
insert into py276_translations values (6967, 429, 'extending/newtypes.html', '[2]', 0, 0);
insert into py276_sentences values (4968, 430, 'extending/newtypes.html', 'PyType_Ready()', 'PyType_Ready()');
insert into py276_translations values (6968, 430, 'extending/newtypes.html', 'PyType_Ready()', 0, 0);
insert into py276_sentences values (4969, 431, 'extending/newtypes.html', 'PyArg_ParseTuple()', 'PyArg_ParseTuple()');
insert into py276_translations values (6969, 431, 'extending/newtypes.html', 'PyArg_ParseTuple()', 0, 0);
insert into py276_sentences values (4970, 432, 'extending/newtypes.html', 'PyArg_ParseTupleAndKeywords()', 'PyArg_ParseTupleAndKeywords()');
insert into py276_translations values (6970, 432, 'extending/newtypes.html', 'PyArg_ParseTupleAndKeywords()', 0, 0);
insert into py276_sentences values (4971, 433, 'extending/newtypes.html', 'TypeError', 'TypeError');
insert into py276_translations values (6971, 433, 'extending/newtypes.html', 'TypeError', 0, 0);
insert into py276_sentences values (4972, 434, 'extending/newtypes.html', '2. Defining New Types', '2. Defining New Types');
insert into py276_translations values (6972, 434, 'extending/newtypes.html', '2. Defining New Types', 0, 0);
insert into py276_sentences values (4973, 435, 'extending/newtypes.html', '2.1. The Basics', '2.1. The Basics');
insert into py276_translations values (6973, 435, 'extending/newtypes.html', '2.1. The Basics', 0, 0);
insert into py276_sentences values (4974, 436, 'extending/newtypes.html', '2.1.1. Adding data and methods to the Basic example', '2.1.1. Adding data and methods to the Basic example');
insert into py276_translations values (6974, 436, 'extending/newtypes.html', '2.1.1. Adding data and methods to the Basic example', 0, 0);
insert into py276_sentences values (4975, 437, 'extending/newtypes.html', '2.1.2. Providing finer control over data attributes', '2.1.2. Providing finer control over data attributes');
insert into py276_translations values (6975, 437, 'extending/newtypes.html', '2.1.2. Providing finer control over data attributes', 0, 0);
insert into py276_sentences values (4976, 438, 'extending/newtypes.html', '2.1.3. Supporting cyclic garbage collection', '2.1.3. Supporting cyclic garbage collection');
insert into py276_translations values (6976, 438, 'extending/newtypes.html', '2.1.3. Supporting cyclic garbage collection', 0, 0);
insert into py276_sentences values (4977, 439, 'extending/newtypes.html', '2.1.4. Subclassing other types', '2.1.4. Subclassing other types');
insert into py276_translations values (6977, 439, 'extending/newtypes.html', '2.1.4. Subclassing other types', 0, 0);
insert into py276_sentences values (4978, 440, 'extending/newtypes.html', '2.2. Type Methods', '2.2. Type Methods');
insert into py276_translations values (6978, 440, 'extending/newtypes.html', '2.2. Type Methods', 0, 0);
insert into py276_sentences values (4979, 441, 'extending/newtypes.html', '2.2.1. Finalization and De-allocation', '2.2.1. Finalization and De-allocation');
insert into py276_translations values (6979, 441, 'extending/newtypes.html', '2.2.1. Finalization and De-allocation', 0, 0);
insert into py276_sentences values (4980, 442, 'extending/newtypes.html', '2.2.2. Object Presentation', '2.2.2. Object Presentation');
insert into py276_translations values (6980, 442, 'extending/newtypes.html', '2.2.2. Object Presentation', 0, 0);
insert into py276_sentences values (4981, 443, 'extending/newtypes.html', '2.2.3. Attribute Management', '2.2.3. Attribute Management');
insert into py276_translations values (6981, 443, 'extending/newtypes.html', '2.2.3. Attribute Management', 0, 0);
insert into py276_sentences values (4982, 444, 'extending/newtypes.html', '2.2.3.1. Generic Attribute Management', '2.2.3.1. Generic Attribute Management');
insert into py276_translations values (6982, 444, 'extending/newtypes.html', '2.2.3.1. Generic Attribute Management', 0, 0);
insert into py276_sentences values (4983, 445, 'extending/newtypes.html', '2.2.3.2. Type-specific Attribute Management', '2.2.3.2. Type-specific Attribute Management');
insert into py276_translations values (6983, 445, 'extending/newtypes.html', '2.2.3.2. Type-specific Attribute Management', 0, 0);
insert into py276_sentences values (4984, 446, 'extending/newtypes.html', '2.2.4. Object Comparison', '2.2.4. Object Comparison');
insert into py276_translations values (6984, 446, 'extending/newtypes.html', '2.2.4. Object Comparison', 0, 0);
insert into py276_sentences values (4985, 447, 'extending/newtypes.html', '2.2.5. Abstract Protocol Support', '2.2.5. Abstract Protocol Support');
insert into py276_translations values (6985, 447, 'extending/newtypes.html', '2.2.5. Abstract Protocol Support', 0, 0);
insert into py276_sentences values (4986, 448, 'extending/newtypes.html', '2.2.6. Weak Reference Support', '2.2.6. Weak Reference Support');
insert into py276_translations values (6986, 448, 'extending/newtypes.html', '2.2.6. Weak Reference Support', 0, 0);
insert into py276_sentences values (4987, 449, 'extending/newtypes.html', '2.2.7. More Suggestions', '2.2.7. More Suggestions');
insert into py276_translations values (6987, 449, 'extending/newtypes.html', '2.2.7. More Suggestions', 0, 0);
insert into py276_sentences values (4988, 450, 'extending/newtypes.html', 'Report a Bug', 'Report a Bug');
insert into py276_translations values (6988, 450, 'extending/newtypes.html', 'Report a Bug', 0, 0);
insert into py276_sentences values (4989, 451, 'extending/newtypes.html', 'Show Source', 'Show Source');
insert into py276_translations values (6989, 451, 'extending/newtypes.html', 'Show Source', 0, 0);
insert into py276_sentences values (4990, 452, 'extending/newtypes.html', 'index', 'index');
insert into py276_translations values (6990, 452, 'extending/newtypes.html', 'index', 0, 0);
insert into py276_sentences values (4991, 453, 'extending/newtypes.html', 'modules', 'modules');
insert into py276_translations values (6991, 453, 'extending/newtypes.html', 'modules', 0, 0);
insert into py276_sentences values (4992, 454, 'extending/newtypes.html', 'next', 'next');
insert into py276_translations values (6992, 454, 'extending/newtypes.html', 'next', 0, 0);
insert into py276_sentences values (4993, 455, 'extending/newtypes.html', 'previous', 'previous');
insert into py276_translations values (6993, 455, 'extending/newtypes.html', 'previous', 0, 0);
insert into py276_sentences values (4994, 456, 'extending/newtypes.html', 'Python', 'Python');
insert into py276_translations values (6994, 456, 'extending/newtypes.html', 'Python', 0, 0);
insert into py276_sentences values (4995, 457, 'extending/newtypes.html', 'Documentation', 'Documentation');
insert into py276_translations values (6995, 457, 'extending/newtypes.html', 'Documentation', 0, 0);
insert into py276_sentences values (4996, 458, 'extending/newtypes.html', 'Extending and Embedding the Python Interpreter', 'Extending and Embedding the Python Interpreter');
insert into py276_translations values (6996, 458, 'extending/newtypes.html', 'Extending and Embedding the Python Interpreter', 0, 0);
